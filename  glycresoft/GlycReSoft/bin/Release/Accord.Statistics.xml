<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Accord.Statistics</name>
    </assembly>
    <members>
        <member name="T:Accord.Statistics.Models.Markov.Learning.ContinuousBaumWelchLearning">
            <summary>
              Baum-Welch learning algorithm for continuous density Hidden Markov Models.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearningBase">
            <summary>
              Base class for implementations of the Baum-Welch learning algorithm.
              This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearningBase.#ctor(Accord.Statistics.Models.Markov.IHiddenMarkovModel)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearningBase"/> class.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearningBase.HasConverged(System.Double,System.Double,System.Int32)">
            <summary>
              Checks if a model has converged given the likelihoods between two iterations
              of the Baum-Welch algorithm and a criteria for convergence.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearningBase.Run(System.Array[])">
            <summary>
              Runs the Baum-Welch learning algorithm for hidden Markov models.
            </summary>
            <remarks>
              Learning problem. Given some training observation sequences O = {o1, o2, ..., oK}
              and general structure of HMM (numbers of hidden and visible states), determine
              HMM parameters M = (A, B, pi) that best fit training data. 
            </remarks>
            <param name="observations">
              The sequences of univariate or multivariate observations used to train the model.
              Can be either of type double[] (for the univariate case) or double[][] for the
              multivariate case.
            </param>
            <returns>
              The average log-likelihood for the observations after the model has been trained.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearningBase.ComputeForwardBackward(System.Int32,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[]@)">
            <summary>
              Computes the forward and backward probabilities matrices
              for a given observation referenced by its index in the
              input training data.
            </summary>
            <param name="index">The index of the observation in the input training data.</param>
            <param name="fwd">Returns the computed forward probabilities matrix.</param>
            <param name="bwd">Returns the computed backward probabilities matrix.</param>
            <param name="scaling">Returns the scaling parameters used during calculations.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearningBase.ComputeKsi(System.Int32,System.Double[0:,0:],System.Double[0:,0:],System.Double[])">
            <summary>
              Computes the ksi matrix of probabilities for a given observation
              referenced by its index in the input training data.
            </summary>
            <param name="index">The index of the observation in the input training data.</param>
            <param name="fwd">The matrix of forward probabilities for the observation.</param>
            <param name="bwd">The matrix of backward probabilities for the observation.</param>
            <param name="scaling">The scaling vector computed in previous calculations.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearningBase.UpdateEmissions">
            <summary>
              Updates the emission probability matrix.
            </summary>
            <remarks>
              Implementations of this method should use the observations
              in the training data and the Gamma probability matrix to
              update the probability distributions of symbol emissions.
            </remarks>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.BaumWelchLearningBase.Ksi">
            <summary>
              Gets the Ksi matrix of probabilities created during the
              last iteration of the Baum-Welch learning algorithm.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.BaumWelchLearningBase.Gamma">
            <summary>
              Gets the Gamma matrix of probabilities created during the
              last iteration of the Baum-Welch learning algorithm.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.BaumWelchLearningBase.Tolerance">
            <summary>
              Gets or sets the maximum change in the average log-likelihood
              after an iteration of the algorithm used to detect convergence.
            </summary>
            <remarks>
              This is the likelihood convergence limit L between two iterations of the algorithm. The
              algorithm will stop when the change in the likelihood for two consecutive iterations
              has not changed by more than L percent of the likelihood. If left as zero, the
              algorithm will ignore this parameter and iterates over a number of fixed iterations
              specified by the previous parameter.
            </remarks>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.BaumWelchLearningBase.Iterations">
            <summary>
              Gets or sets the maximum number of iterations
              performed by the learning algorithm.
            </summary>
            <remarks>
              This is the maximum number of iterations to be performed by the learning algorithm. If
              specified as zero, the algorithm will learn until convergence of the model average
              likelihood respecting the desired limit.
            </remarks>
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.IUnsupervisedLearning">
            <summary>
              Common interface for unsupervised learning algorithms for
              hidden Markov models such as the Baum-Welch learning algorithm.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.IUnsupervisedLearning.Run(System.Array[])">
            <summary>
              Runs the learning algorithm.
            </summary>
            <remarks>
              Learning problem. Given some training observation sequences O = {o1, o2, ..., oK}
              and general structure of HMM (numbers of hidden and visible states), determine
              HMM parameters M = (A, B, pi) that best fit training data. 
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ContinuousBaumWelchLearning.#ctor(Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel)">
            <summary>
              Creates a new instance of the Baum-Welch learning algorithm.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ContinuousBaumWelchLearning.Run(System.Array[])">
            <summary>
              Runs the Baum-Welch learning algorithm for hidden Markov models.
            </summary>
            <remarks>
              Learning problem. Given some training observation sequences O = {o1, o2, ..., oK}
              and general structure of HMM (numbers of hidden and visible states), determine
              HMM parameters M = (A, B, pi) that best fit training data. 
            </remarks>
            <param name="observations">
              The sequences of univariate or multivariate observations used to train the model.
              Can be either of type double[] (for the univariate case) or double[][] for the
              multivariate case.
            </param>
            <returns>
              The average log-likelihood for the observations after the model has been trained.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ContinuousBaumWelchLearning.ComputeKsi(System.Int32,System.Double[0:,0:],System.Double[0:,0:],System.Double[])">
            <summary>
              Computes the ksi matrix of probabilities for a given observation
              referenced by its index in the input training data.
            </summary>
            <param name="index">The index of the observation in the input training data.</param>
            <param name="fwd">The matrix of forward probabilities for the observation.</param>
            <param name="bwd">The matrix of backward probabilities for the observation.</param>
            <param name="scaling">The scaling vector computed in previous calculations.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ContinuousBaumWelchLearning.UpdateEmissions">
            <summary>
              Updates the emission probability matrix.
            </summary>
            <remarks>
              Implementations of this method should use the observations
              in the training data and the Gamma probability matrix to
              update the probability distributions of symbol emissions.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ContinuousBaumWelchLearning.ComputeForwardBackward(System.Int32,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[]@)">
            <summary>
              Computes the forward and backward probabilities matrices
              for a given observation referenced by its index in the
              input training data.
            </summary>
            <param name="index">The index of the observation in the input training data.</param>
            <param name="fwd">Returns the computed forward probabilities matrix.</param>
            <param name="bwd">Returns the computed backward probabilities matrix.</param>
            <param name="scaling">Returns the scaling parameters used during calculations.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ContinuousBaumWelchLearning.convert(System.Array,System.Int32)">
            <summary>
              Converts a univariate or multivariate array
              of observations into a two-dimensional jagged array.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.ContinuousBaumWelchLearning.FittingOptions">
            <summary>
              Gets or sets the distribution fitting options
              to use when estimating distribution densities
              during learning.
            </summary>
            <value>The distribution fitting options.</value>
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Learning.IConditionalRandomFieldLearning">
            <summary>
              Common interface for Conditional Random Fields learning algorithms.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.IConditionalRandomFieldLearning.Run(System.Int32[][],System.Int32[][])">
            <summary>
              Runs the learning algorithm with the specified input
              training observations and corresponding output labels.
            </summary>
            <param name="observations">The training observations.</param>
            <param name="labels">The observation's labels.</param>
        </member>
        <member name="T:Accord.Statistics.Filters.ProjectionFilter">
            <summary>
              Relational-algebra projection filter.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.IFilter">
            <summary>
              Sample processing filter interface.
            </summary>
            
            <remarks>The interface defines the set of methods which should be
            provided by all table processing filters. Methods of this interface should
            keep the source table unchanged and return the result of data processing
            filter as new data table.</remarks>
            
        </member>
        <member name="M:Accord.Statistics.Filters.IFilter.Apply(System.Data.DataTable)">
             <summary>
               Applies the filter to a <see cref="T:System.Data.DataTable"/>.
             </summary>
             
             <param name="data">Source table to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source table.</returns>
             
             <remarks>The method keeps the source table unchanged and returns the
             the result of the table processing filter as new data table.</remarks> 
            
        </member>
        <member name="M:Accord.Statistics.Filters.ProjectionFilter.#ctor(System.String[])">
            <summary>
              Creates a new projection filter.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Filters.ProjectionFilter.#ctor">
            <summary>
              Creates a new projection filter.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Filters.ProjectionFilter.Apply(System.Data.DataTable)">
            <summary>
              Applies the filter to the DataTable.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Filters.ProjectionFilter.Columns">
            <summary>
              List of columns to keep in the projection.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Filters.FiltersSequence">
            <summary>
              Sequence of table processing filters.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.FiltersSequence.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.Statistics.Filters.FiltersSequence"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.FiltersSequence.#ctor(Accord.Statistics.Filters.IFilter[])">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.Statistics.Filters.FiltersSequence"/> class.
            </summary>
            
            <param name="filters">Sequence of filters to apply.</param>
            
        </member>
        <member name="M:Accord.Statistics.Filters.FiltersSequence.Apply(System.Data.DataTable)">
            <summary>
              Applies the sequence of filters to a given table.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution">
            <summary>
              Chi-Square (χ²) probability distribution
            </summary>
            <remarks>
            <para>
              In probability theory and statistics, the chi-square distribution (also chi-squared
              or χ²-distribution) with k degrees of freedom is the distribution of a sum of the 
              squares of k independent standard normal random variables. It is one of the most 
              widely used probability distributions in inferential statistics, e.g. in hypothesis 
              testing, or in construction of confidence intervals.</para>
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Chi-square_distribution">
                  http://en.wikipedia.org/wiki/Chi-square_distribution</a></description></item>
              </list></para>     
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution">
            <summary>
              Abstract class for Probability Distributions.
            </summary>
            <remarks>
            <para>
              A probability distribution identifies either the probability of each value of an
              unidentified random variable (when the variable is discrete), or the probability
              of the value falling within a particular interval (when the variable is continuous).</para>
            <para>
              The probability distribution describes the range of possible values that a random
              variable can attain and the probability that the value of the random variable is
              within any (measurable) subset of that range.</para>  
            <para>
              The function describing the probability that a given value will occur is called
              the probability function (or probability density function, abbreviated PDF), and
              the function describing the cumulative probability that a given value or any value
              smaller than it will occur is called the distribution function (or cumulative
              distribution function, abbreviated CDF).</para>  
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Probability_distribution">
                  http://en.wikipedia.org/wiki/Probability_distribution</a></description></item>
                <item><description><a href="http://mathworld.wolfram.com/StatisticalDistribution.html">
                  http://mathworld.wolfram.com/StatisticalDistribution.html</a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.IDistribution">
            <summary>
              Common interface for probability distributions.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution.DistributionFunction(System.Double[])">
            <summary>
              Gets the cumulative distribution function (cdf) for
              the this distribution evaluated at point <c>x</c>.
            </summary>
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution.ProbabilityFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution.Fit(System.Array)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution.Fit(System.Array,System.Double[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution.Fit(System.Array,Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.IDistribution.Fit(System.Array,System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.IUnivariateDistribution">
            <summary>
              Common interface for univariate probability distributions.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IUnivariateDistribution.Mean">
            <summary>
              Gets the mean value for the distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IUnivariateDistribution.Variance">
            <summary>
              Gets the variance value for the distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IUnivariateDistribution.Entropy">
            <summary>
              Gets entropy of the distribution.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.#ctor">
            <summary>
              Constructs a new UnivariateDistribution class.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#DistributionFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#ProbabilityFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array,System.Double[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array,Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array,System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              the this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range.</param>
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range.</param>
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Fit(System.Double[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Fit(System.Double[],System.Double[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Fit(System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateContinuousDistribution.StandardDeviation">
            <summary>
              Gets the Standard Deviation (the square root of
              the variance) for the current distribution.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.#ctor(System.Int32)">
            <summary>
              Constructs a new Chi-Square distribution
              with given degrees of freedom.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              the χ² distribution evaluated at point <c>x</c>.
            </summary>
            <remarks>
            <para>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.</para>
            <para>
              References:
              <list type="bullet">
                <item><description>
                  <a href="http://www.mathworks.com/access/helpdesk/help/toolbox/stats/chi2pdf.html">
                  http://www.mathworks.com/access/helpdesk/help/toolbox/stats/chi2pdf.html</a></description></item>
              </list></para>
            </remarks>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              the χ² distribution evaluated at point <c>x</c>.
            </summary>
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.SurvivalFunction(System.Double)">
            <summary>
              Gets the complementary cumulative distribution
              function for the χ² evaluated at point <c>x</c>.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              This method is not supported.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.DegreesOfFreedom">
            <summary>
              Gets the Degrees of Freedom for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.ChiSquareDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.BernoulliDistribution">
            <summary>
              Bernoulli probability distribution.
            </summary>
            <remarks>
            <para>
              The Bernoulli distribution is a distribution for a single
              binary variable x E {0,1}, representing, for example, the
              flipping of a coin. It is governed by a single continuous
              parameter representing the probability of an observation
              to be equal to 1.</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Bernoulli_distribution">
                  http://en.wikipedia.org/wiki/Bernoulli_distribution</a></description></item>
                <item><description>
                  C. Bishop. “Pattern Recognition and Machine Learning”. Springer. 2006.</description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution">
            <summary>
              Abstract class for univariate discrete probability distributions.
            </summary>
            <remarks>
            <para>
              A probability distribution identifies either the probability of each value of an
              unidentified random variable (when the variable is discrete), or the probability
              of the value falling within a particular interval (when the variable is continuous).</para>
            <para>
              The probability distribution describes the range of possible values that a random
              variable can attain and the probability that the value of the random variable is
              within any (measurable) subset of that range.</para>  
            <para>
              The function describing the probability that a given discrete value will
              occur is called the probability function (or probability mass function,
              abbreviated PMF), and the function describing the cumulative probability
              that a given value or any value smaller than it will occur is called the
              distribution function (or cumulative distribution function, abbreviated CDF).</para>  
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Probability_distribution">
                  http://en.wikipedia.org/wiki/Probability_distribution</a></description></item>
                <item><description><a href="http://mathworld.wolfram.com/StatisticalDistribution.html">
                  http://mathworld.wolfram.com/StatisticalDistribution.html</a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.#ctor">
            <summary>
              Constructs a new UnivariateDistribution class.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Accord#Statistics#Distributions#IDistribution#DistributionFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Accord#Statistics#Distributions#IDistribution#ProbabilityFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array,System.Double[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array,Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array,System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.DistributionFunction(System.Int32)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              the this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range.</param>
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.ProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range.</param>
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Fit(System.Double[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Fit(System.Double[],System.Double[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Fit(System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution.StandardDeviation">
            <summary>
              Gets the Standard Deviation (the square root of
              the variance) for the current distribution.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.#ctor(System.Double)">
            <summary>
              Creates a new <see cref="T:Accord.Statistics.Distributions.Univariate.BernoulliDistribution">Bernoulli</see> distribution.
            </summary>
            <param name="mean">The probability of an observation being equal to 1.</param>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.DistributionFunction(System.Int32)">
            <summary>
            Gets the cumulative distribution function (cdf) for
            the this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">A single point in the distribution range.</param>
            <returns></returns>
            <remarks>
            The Cumulative Distribution Function (CDF) describes the cumulative
            probability that a given value or any value smaller than it will occur.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.ProbabilityMassFunction(System.Int32)">
            <summary>
            Gets the probability mass function (pmf) for
            this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">A single point in the distribution range.</param>
            <returns>
            The probability of <c>x</c> occurring
            in the current distribution.
            </returns>
            <remarks>
            The Probability Mass Function (PMF) describes the
            probability that a given value <c>x</c> will occur.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
            Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">The array of observations to fit the model against. The array
            elements can be either of type double (for univariate data) or
            type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            <remarks>
            Although both double[] and double[][] arrays are supported,
            providing a double[] for a multivariate distribution or a
            double[][] for a univariate distribution may have a negative
            impact in performance.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.Mean">
            <summary>
            Gets the mean for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.Variance">
            <summary>
            Gets the variance for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.BernoulliDistribution.Entropy">
            <summary>
            Gets the entropy for this distribution.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.VonMisesOptions">
            <summary>
              Von-Mises distribution estimation options.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.IFittingOptions">
            <summary>
              Common interface for distribution fitting option objects.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.VonMisesOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.VonMisesOptions"/> class.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.VonMisesOptions.UseBiasCorrection">
            <summary>
            Gets or sets a value indicating whether to use bias correction
            when estimating the concentration parameter of the von-Mises
            distribution.
            </summary>
            <value><c>true</c> to use bias correction; otherwise, <c>false</c>.</value>
            <remarks>
            For more information, see: Best, D. and Fisher N. (1981). The bias
            of the maximum likelihood estimators of the von Mises-Fisher concentration
            parameters. Communications in Statistics - Simulation and Computation, B10(5),
            493-502.
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IMultipleRegressionAnalysis">
            <summary>
              Common interface for multiple regression analysis.
            </summary>
            
            <remarks>
            <para>
              Regression analysis attempt to express many numerical dependent
              variables as a combinations of other features or measurements.</para>
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IMultivariateAnalysis">
            <summary>
              Common interface for multivariate statistical analysis.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IAnalysis">
            <summary>
              Common interface for statistical analysis.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IAnalysis.Compute">
            <summary>
              Computes the analysis using given source data and parameters.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IMultivariateAnalysis.Source">
            <summary>
              Source data used in the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IMultipleRegressionAnalysis.Output">
            <summary>
              Gets the the dependent variables' values
              for each of the source input points.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.ISupervisedLearning">
            <summary>
              Common interface for supervised learning algorithms for
              hidden Markov models such as the Viterbi-learning algorithm.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ISupervisedLearning.Run(System.Array[],System.Int32[])">
            <summary>
              Runs the learning algorithm.
            </summary>
            <remarks>
              Supervised learning problem. Given some training observation sequences 
              O = {o1, o2, ..., oK} and sequence of hidden states H = {h1, h2, ..., hK}
              and general structure of HMM (numbers of hidden and visible states), 
              determine HMM parameters M = (A, B, pi) that best fit training data. 
            </remarks>
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.ClassifierLearningAlgorithmConfiguration">
            <summary>
              Configuration function delegate for Sequence Classifier Learning algorithms.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.SequenceClassifierLearningBase`2">
            <summary>
              Abstract base class for Sequence Classifier learning algorithms.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.SequenceClassifierLearningBase`2.#ctor(`0,Accord.Statistics.Models.Markov.Learning.ClassifierLearningAlgorithmConfiguration)">
            <summary>
              Creates a new instance of the learning algorithm for a given 
              Markov sequence classifier using the specified configuration
              function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.SequenceClassifierLearningBase`2.Run``1(``0[],System.Int32[])">
            <summary>
              Trains each model to recognize each of the output labels.
            </summary>
            <returns>The sum log-likelihood for all models after training.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.SequenceClassifierLearningBase`2.Threshold">
            <summary>
              Creates a new <see cref="M:Accord.Statistics.Models.Markov.Learning.SequenceClassifierLearningBase`2.Threshold">threshold model</see>
              for the current set of Markov models in this sequence classifier.
            </summary>
            <returns>A <see cref="M:Accord.Statistics.Models.Markov.Learning.SequenceClassifierLearningBase`2.Threshold">threshold Markov model</see>.</returns>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.SequenceClassifierLearningBase`2.Classifier">
            <summary>
              Gets the classifier being trained by this instance.
            </summary>
            <value>The classifier being trained by this instance.</value>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.SequenceClassifierLearningBase`2.Algorithm">
            <summary>
              Gets or sets the configuration function specifying which
              training algorithm should be used for each of the models
              in the hidden Markov model set.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.SequenceClassifierLearningBase`2.Rejection">
            <summary>
              Gets or sets a value indicating whether a threshold
              model should be created after training to support rejection.
            </summary>
            <value><c>true</c> to update the threshold model after training;
            otherwise, <c>false</c>.</value>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.Mixture`1">
            <summary>
              Mixture of univariate probability distributions.
            </summary>
            <remarks>
            <para>
              A mixture density is a probability density function which is expressed
              as a convex combination (i.e. a weighted sum, with non-negative weights
              that sum to 1) of other probability density functions. The individual
              density functions that are combined to make the mixture density are
              called the mixture components, and the weights associated with each
              component are called the mixture weights.</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Mixture_density">
                  http://en.wikipedia.org/wiki/Mixture_density</a></description></item>
              </list></para>
            </remarks>
              
            <typeparam name="T">
              The type of the univariate component distributions.</typeparam>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.#ctor(`0[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Univariate.Mixture`1"/> class.
            </summary>
            <param name="components">The mixture distribution components.</param>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.#ctor(System.Double[],`0[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Univariate.Mixture`1"/> class.
            </summary>
            <param name="coefficients">The mixture weight coefficients.</param>
            <param name="components">The mixture distribution components.</param>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">A single point in the distribution range.</param>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.DistributionFunction(System.Double)">
            <summary>
              This method is not supported.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
            Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">The array of observations to fit the model against. The array
            elements can be either of type double (for univariate data) or
            type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            <remarks>
            Although both double[] and double[][] arrays are supported,
            providing a double[] for a multivariate distribution or a
            double[][] for a univariate distribution may have a negative
            impact in performance.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.LogLikelihood(System.Double[],System.Double[])">
            <summary>
              Computes the log-likelihood of the distribution
              for a given set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.LogLikelihood(System.Double[])">
            <summary>
              Computes the log-likelihood of the distribution
              for a given set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.logLikelihood(System.Double[],`0[],System.Double[],System.Double[])">
            <summary>
              Computes the log-likelihood of the distribution
              for a given set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.Estimate(System.Double[],`0[])">
            <summary>
              Estimates a new mixture model from a given set of observations.
            </summary>
            <param name="data">A set of observations.</param>
            <param name="components">The initial components of the mixture model.</param>
            <returns>Returns a new Mixture fitted to the given observations.</returns>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.Estimate(System.Double[],System.Double[],`0[])">
            <summary>
              Estimates a new mixture model from a given set of observations.
            </summary>
            <param name="data">A set of observations.</param>
            <param name="coefficients">The initial mixture coefficients.</param>
            <param name="components">The initial components of the mixture model.</param>
            <returns>Returns a new Mixture fitted to the given observations.</returns>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.Mixture`1.Estimate(System.Double[],System.Double,System.Double[],`0[])">
            <summary>
              Estimates a new mixture model from a given set of observations.
            </summary>
            <param name="data">A set of observations.</param>
            <param name="coefficients">The initial mixture coefficients.</param>
            <param name="threshold">The convergence threshold for the Expectation-Maximization estimation.</param>
            <param name="components">The initial components of the mixture model.</param>
            <returns>Returns a new Mixture fitted to the given observations.</returns>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.Mixture`1.Components">
            <summary>
              Gets the mixture components.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.Mixture`1.Coefficients">
            <summary>
              Gets the weight coefficients.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.Mixture`1.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.Mixture`1.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.Mixture`1.Entropy">
            <summary>
              This method is not supported.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis">
            <summary>
              Kernel Principal Component Analysis.
            </summary>
            <remarks>
            <para>
              Kernel principal component analysis (kernel PCA) is an extension of principal
              component analysis (PCA) using techniques of kernel methods. Using a kernel,
              the originally linear operations of PCA are done in a reproducing kernel Hilbert
              space with a non-linear mapping.</para>
            
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://www.heikohoffmann.de/htmlthesis/node37.html">
                  http://www.heikohoffmann.de/htmlthesis/node37.html</a></description></item>
                <item><description><a href="http://www.heikohoffmann.de/htmlthesis/node137.html#sec_speedup">
                  http://www.heikohoffmann.de/htmlthesis/node137.html#sec_speedup</a></description></item>
                <item><description><a href="http://www.hpl.hp.com/conferences/icml2003/papers/345.pdf">
                  http://www.hpl.hp.com/conferences/icml2003/papers/345.pdf</a></description></item>
                <item><description><a href="http://www.cse.ust.hk/~jamesk/papers/icml03_slides.pdf">
                  http://www.cse.ust.hk/~jamesk/papers/icml03_slides.pdf</a></description></item>
               </list></para>
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.PrincipalComponentAnalysis">
             <summary>
               Principal component analysis (PCA) is a technique used to reduce
               multidimensional data sets to lower dimensions for analysis.
             </summary>
             <remarks>
             <para>
               Principal Components Analysis or the Karhunen-Loeve expansion is a
               classical method for dimensionality reduction or exploratory data
               analysis.</para>
             <para>
               Mathematically, PCA is a process that decomposes the covariance matrix of a matrix
               into two parts: eigenvalues and column eigenvectors, whereas Singular Value Decomposition
               (SVD) decomposes a matrix per se into three parts: singular values, column eigenvectors,
               and row eigenvectors. The relationships between PCA and SVD lie in that the eigenvalues 
               are the square of the singular values and the column vectors are the same for both.</para>
               
             <para>
               This class uses SVD on the data set which generally gives better numerical accuracy.</para>
            </remarks>
            
            <example>
              <code>
              // Below is the same data used on the excellent paper "Tutorial
              //   On Principal Component Analysis", by Lindsay Smith (2002).
              double[,] sourceMatrix = 
              {
                  { 2.5,  2.4 },
                  { 0.5,  0.7 },
                  { 2.2,  2.9 },
                  { 1.9,  2.2 },
                  { 3.1,  3.0 },
                  { 2.3,  2.7 },
                  { 2.0,  1.6 },
                  { 1.0,  1.1 },
                  { 1.5,  1.6 },
                  { 1.1,  0.9 }
              }; 
             
              // Creates the Principal Component Analysis of the given source
              var pca = new PrincipalComponentAnalysis(sourceMatrix, AnalysisMethod.Correlation);
                
              // Compute the Principal Component Analysis
              pca.Compute();
                
              // Creates a projection considering 80% of the information
              double[,] components = pca.Transform(sourceMatrix, 0.8f, true);
              </code>
            </example>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IProjectionAnalysis">
            <summary>
              Common interface for projective statistical analysis.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IProjectionAnalysis.Transform(System.Double[0:,0:])">
            <summary>
              Projects new data into latent space.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IProjectionAnalysis.Transform(System.Double[0:,0:],System.Int32)">
            <summary>
              Projects new data into latent space with
              given number of dimensions.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.#ctor(System.Double[0:,0:],Accord.Statistics.Analysis.AnalysisMethod)">
            <summary>Constructs a new Principal Component Analysis.</summary>
            <param name="data">The source data to perform analysis. The matrix should contain
            variables as columns and observations of each variable as rows.</param>
            <param name="method">The analysis method to perform. Default is <see cref="F:Accord.Statistics.Analysis.AnalysisMethod.Center"/>.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.#ctor(System.Double[0:,0:])">
            <summary>Constructs a new Principal Component Analysis.</summary>
            <param name="data">The source data to perform analysis. The matrix should contain
            variables as columns and observations of each variable as rows.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Compute">
            <summary>Computes the Principal Component Analysis algorithm.</summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Transform(System.Double[0:,0:])">
            <summary>Projects a given matrix into principal component space.</summary>
            <param name="data">The matrix to be projected.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Transform(System.Double[0:,0:],System.Int32)">
            <summary>Projects a given matrix into principal component space.</summary>
            <param name="data">The matrix to be projected.</param>
            <param name="dimensions">The number of components to consider.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Revert(System.Double[0:,0:])">
            <summary>
              Reverts a set of projected data into it's original form. Complete reverse
              transformation is only possible if all components are present, and, if the
              data has been standardized, the original standard deviation and means of
              the original matrix are known.
            </summary>
            <param name="data">The pca transformed data.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.GetNumberOfComponents(System.Single)">
            <summary>
              Returns the minimal number of principal components
              required to represent a given percentile of the data.
            </summary>
            <param name="threshold">The percentile of the data requiring representation.</param>
            <returns>The minimal number of components required.</returns>
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Adjust(System.Double[0:,0:],System.Boolean)">
            <summary>
              Adjusts a data matrix, centering and standardizing its values
              using the already computed column's means and standard deviations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponentAnalysis.CreateComponents">
            <summary>
              Creates additional information about principal components.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Source">
            <summary>
              Returns the original data supplied to the analysis.
            </summary>
            <value>The original data matrix supplied to the analysis.</value>
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Result">
            <summary>
              Gets the resulting projection of the source
              data given on the creation of the analysis 
              into the space spawned by principal components.
            </summary>
            <value>The resulting projection in principal component space.</value>
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.ComponentMatrix">
            <summary>
              Gets a matrix whose columns contain the principal components. Also known as the Eigenvectors or loadings matrix.
            </summary>
            <value>The matrix of principal components.</value>
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Components">
            <summary>
              Gets the Principal Components in a object-oriented structure.
            </summary>
            <value>The collection of principal components.</value>
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.ComponentProportions">
            <summary>
              The respective role each component plays in the data set.
            </summary>
            <value>The component proportions.</value>
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.CumulativeProportions">
            <summary>
              The cumulative distribution of the components proportion role. Also known
              as the cumulative energy of the principal components.
            </summary>
            <value>The cumulative proportions.</value>
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.SingularValues">
            <summary>
              Provides access to the Singular Values stored during the analysis.
              If a covariance method is chosen, then it will contain an empty vector.
            </summary>
            <value>The singular values.</value>
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Eigenvalues">
            <summary>
              Provides access to the Eigenvalues stored during the analysis.
            </summary>
            <value>The eigenvalues.</value>
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.StandardDeviations">
            <summary>
              Gets the column standard deviations of the source data given at method construction.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Means">
            <summary>
              Gets the column mean of the source data given at method construction.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Method">
            <summary>Gets or sets the method used by this analysis.</summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponentAnalysis.Overwrite">
            <summary>
              Gets or sets whether calculations will be performed overwriting
              data in the original source matrix, using less memory.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.#ctor(System.Double[0:,0:],Accord.Statistics.Kernels.IKernel,Accord.Statistics.Analysis.AnalysisMethod,System.Boolean)">
            <summary>
              Constructs the Kernel Principal Component Analysis.
            </summary>
            <param name="data">The source data to perform analysis. The matrix should contain
            variables as columns and observations of each variable as rows.</param>
            <param name="kernel">The kernel to be used in the analysis.</param>
            <param name="method">The analysis method to perform.</param>
            <param name="centerInFeatureSpace">True to center the data in feature space, false otherwise. Default is true.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.#ctor(System.Double[0:,0:],Accord.Statistics.Kernels.IKernel,Accord.Statistics.Analysis.AnalysisMethod)">
            <summary>
              Constructs the Kernel Principal Component Analysis.
            </summary>
            <param name="data">The source data to perform analysis. The matrix should contain
            variables as columns and observations of each variable as rows.</param>
            <param name="kernel">The kernel to be used in the analysis.</param>
            <param name="method">The analysis method to perform.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.#ctor(System.Double[0:,0:],Accord.Statistics.Kernels.IKernel)">
            <summary>Constructs the Kernel Principal Component Analysis.</summary>
            <param name="data">The source data to perform analysis.</param>
            <param name="kernel">The kernel to be used in the analysis.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.Compute">
            <summary>Computes the Kernel Principal Component Analysis algorithm.</summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.Transform(System.Double[0:,0:],System.Int32)">
            <summary>Projects a given matrix into the principal component space.</summary>
            <param name="data">The matrix to be projected. The matrix should contain
            variables as columns and observations of each variable as rows.</param>
            <param name="dimensions">The number of components to use in the transformation.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.Revert(System.Double[0:,0:])">
            <summary>
              Reverts a set of projected data into it's original form. Complete reverse
              transformation is not always possible and is not even guaranteed to exist.
            </summary>
            <remarks>
              This method works using a closed-form MDS approach as suggested by
              Kwok and Tsang. It is currently a direct implementation of the algorithm
              without any kind of optimization.
              
              Reference:
              - http://cmp.felk.cvut.cz/cmp/software/stprtool/manual/kernels/preimage/list/rbfpreimg3.html
            </remarks>
            <param name="data">The kpca-transformed data.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.Revert(System.Double[0:,0:],System.Int32)">
            <summary>
              Reverts a set of projected data into it's original form. Complete reverse
              transformation is not always possible and is not even guaranteed to exist.
            </summary>
            <remarks>
            <para>
              This method works using a closed-form MDS approach as suggested by
              Kwok and Tsang. It is currently a direct implementation of the algorithm
              without any kind of optimization.
            </para>
            <para>
              Reference:
              - http://cmp.felk.cvut.cz/cmp/software/stprtool/manual/kernels/preimage/list/rbfpreimg3.html
            </para>
            </remarks>
            <param name="data">The kpca-transformed data.</param>
            <param name="neighbors">The number of nearest neighbors to use while constructing the pre-image.</param>
        </member>
        <member name="P:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.Kernel">
            <summary>
              Gets the Kernel used in the analysis.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.Center">
            <summary>
              Gets or sets whether the points should be centured in feature space.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis.Threshold">
            <summary>
              Gets or sets the minimum variance proportion needed to keep a
              discriminant component. If set to zero, all components will be
              kept. Default is 0.001 (all components which contribute less
              than 0.001 to the variance in the data will be discarded).
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Regression.LogisticRegression">
            <summary>
              Logistic Regression
            </summary>
            <remarks>
            <para>
              In statistics, logistic regression (sometimes called the logistic model or
              logit model) is used for prediction of the probability of occurrence of an
              event by fitting data to a logistic curve. It is a generalized linear model
              used for binomial regression.</para>
            <para>
              Like many forms of regression analysis, it makes use of several predictor
              variables that may be either numerical or categorical. For example, the
              probability that a person has a heart attack within a specified time period
              might be predicted from knowledge of the person's age, sex and body mass index.</para>
            <para>
              Logistic regression is used extensively in the medical and social sciences
              as well as marketing applications such as prediction of a customer's
              propensity to purchase a product or cease a subscription.</para>  
            
            <para>
              References:
              <list type="bullet">
                <item><description>
                  http://www.cs.cmu.edu/~ggordon/IRLS-example/logistic.m</description></item>
                <item><description>
                  http://userwww.sfsu.edu/~efc/classes/biol710/logistic/logisticreg.htm</description></item>
                <item><description>
                  http://www.stat.cmu.edu/~cshalizi/350/lectures/26/lecture-26.pdf</description></item>
                <item><description>
                  http://www.inf.ed.ac.uk/teaching/courses/lfd/lectures/logisticlearn-print.pdf</description></item>
              </list></para>  
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.#ctor(System.Int32)">
            <summary>
              Creates a new Logistic Regression Model.
            </summary>
            <param name="inputs">The number of input variables for the model.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.#ctor(System.Int32,System.Double)">
            <summary>
              Creates a new Logistic Regression Model.
            </summary>
            <param name="inputs">The number of input variables for the model.</param>
            <param name="intercept">The starting intercept value.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.Compute(System.Double[])">
            <summary>
              Computes the model output for the given input vector.
            </summary>
            <param name="input">The input vector.</param>
            <returns>The output value.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.Compute(System.Double[][])">
            <summary>
              Computes the model output for each of the given input vectors.
            </summary>
            <param name="input">The array of input vectors.</param>
            <returns>The array of output values.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.GetOddsRatio(System.Int32)">
            <summary>
              Gets the Odds Ratio for a given coefficient.
            </summary>
            <remarks>
              The odds ratio can be computed raising euler's number
              (e ~~ 2.71) to the power of the associated coefficient.
            </remarks>
            <param name="index">
              The coefficient's index. The first value
              (at zero index) is the intercept value.
            </param>
            <returns>
              The Odds Ratio for the given coefficient.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.GetStandardError(System.Int32)">
            <summary>
              Gets the Standard Error for a given coefficient.
            </summary>
            <param name="index">
              The coefficient's index. The first value
              (at zero index) is the intercept value.
            </param>
            <returns>
              The Standard Error for the given coefficient.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.GetConfidenceInterval(System.Int32)">
            <summary>
              Gets the 95% confidence interval for the
              Odds Ratio for a given coefficient.
            </summary>
            <param name="index">
              The coefficient's index. The first value
              (at zero index) is the intercept value.
            </param>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.GetWaldTest(System.Int32)">
            <summary>
              Gets the Wald Test for a given coefficient.
            </summary>
            <remarks>
              See also http://en.wikipedia.org/wiki/Wald_test
            </remarks>
            <param name="index">
              The coefficient's index. The first value
              (at zero index) is the intercept value.
            </param>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.GetLogLikelihood(System.Double[][],System.Double[])">
            <summary>
              Gets the Log-Likelihood for the model.
            </summary>
            <param name="input">A set of input data.</param>
            <param name="output">A set of output data.</param>
            <returns>
              The Log-Likelihood (a measure of performance) of
              the model calculated over the given data sets.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.GetDeviance(System.Double[][],System.Double[])">
            <summary>
              Gets the Deviance for the model
            </summary>
            <remarks>
              The deviance is defined as -2*Log-Likelihood.
            </remarks>
            <param name="input">A set of input data.</param>
            <param name="output">A set of output data.</param>
            <returns>
              The deviance (a measure of performance) of the model
              calculated over the given data sets.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.GetLogLikelihoodRatio(System.Double[][],System.Double[],Accord.Statistics.Models.Regression.LogisticRegression)">
            <summary>
              Gets the Likelihood Ratio between two models.
            </summary>
            <remarks>
              The deviance is defined as -2*Log-Likelihood.
            </remarks>
            <param name="input">A set of input data.</param>
            <param name="output">A set of output data.</param>
            <param name="regression">Another Logistic Regression model.</param>
            <returns>The Log-Likelihood ratio (a measure of performance
            between two models) calculated over the given data sets.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.ChiSquare(System.Double[][],System.Double[])">
            <summary>
              The likelihood ratio test of the overall model, also called the model chi-square test.
            </summary>
            <remarks>
              The likelihood ratio test, also called the log-likelihood test, is based on
              -2LL (deviance). The likelihood ratio test is a test of the significance of
              the difference between the likelihood ratio (-2LL) for the researcher's model
              minus the likelihood ratio for a reduced model. This difference is called the
              "model chi-square."
              
              The likelihood ratio test is generally preferred over its alternative, the Wald test,
              discussed below.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.Regress(System.Double[][],System.Double[])">
            <summary>
              Iterates one pass of the optimization algorithm trying to find
              the best regression coefficients for the logistic model.
            </summary>
            <remarks>
              An iterative Newton-Raphson algorithm is used to calculate
              the maximum likelihood values of the parameters.  This procedure
              uses the partial second derivatives of the parameters in the
              Hessian matrix to guide incremental parameter changes in an effort
              to maximize the log likelihood value for the likelihood function. 
            </remarks>
            <returns>
              The absolute value of the largest parameter change.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.Clone">
            <summary>
              Creates a new LogisticRegression that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.LogisticRegression.Logistic(System.Double)">
            <summary>
              The Logistic function.
            </summary>
            <param name="value">The logit parameter.</param>
        </member>
        <member name="P:Accord.Statistics.Models.Regression.LogisticRegression.Coefficients">
            <summary>
              Gets the coefficient vector, with its first
              value being the intercept value.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Regression.LogisticRegression.Inputs">
            <summary>
              Gets the number of inputs handled by this model.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Tensor">
            <summary>
              Tensor Product combination of Kernels.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.IKernel">
            <summary>
              Kernel function interface.
            </summary>
            <remarks>
            <para>
              In Machine Learning and statistics, a Kernel is a function that returns
              the value of the dot product between the images of the two arguments.</para>
              
            <para>  <c>k(x,y) = ‹S(x),S(y)›</c></para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://www.support-vector.net/icml-tutorial.pdf">
                http://www.support-vector.net/icml-tutorial.pdf</a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.IKernel.Function(System.Double[],System.Double[])">
            <summary>
              The kernel function.
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="M:Accord.Statistics.Kernels.Tensor.#ctor(Accord.Statistics.Kernels.IKernel[])">
            <summary>
              Constructs a new additive kernel.
            </summary>
            <param name="kernels">Kernels to combine.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Tensor.Function(System.Double[],System.Double[])">
            <summary>
              Tensor Product Kernel Combination function.
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Functions.HiddenMarkovModelPotentialFunction">
            <summary>
              Potential function modeling Hidden Markov Models.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Functions.IPotentialFunction">
            <summary>
              Common interface for CRF's Potential functions.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.IPotentialFunction.Compute(System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary>
              Computes the potential function given the specified parameters.
            </summary>
            <param name="previous">Previous state.</param>
            <param name="state">Current state.</param>
            <param name="observations">The observations.</param>
            <param name="index">The index for the current observation.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.IPotentialFunction.LogCompute(System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary>
              Computes the log of the potential function given the specified parameters.
            </summary>
            <param name="previous">Previous state.</param>
            <param name="state">Current state.</param>
            <param name="observations">The observations.</param>
            <param name="index">The index for the current observation.</param>
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.IPotentialFunction.States">
            <summary>
              Gets the number of model states
              assumed by this function.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.IPotentialFunction.Weights">
            <summary>
              Gets or sets the set of weights for each feature function.
            </summary>
            <value>The weights for each of the feature functions.</value>
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.IPotentialFunction.Features">
            <summary>
              Gets the feature functions composing this potential function.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.HiddenMarkovModelPotentialFunction.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs a new potential function modeling Hidden Markov Models.
            </summary>
            <param name="states">The number of states.</param>
            <param name="symbols">The number of symbols.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.HiddenMarkovModelPotentialFunction.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovModel)">
            <summary>
              Constructs a new potential function modeling Hidden Markov Models.
            </summary>
            <param name="model">The hidden Markov model.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.HiddenMarkovModelPotentialFunction.Compute(System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary>
            Computes the potential function given the specified parameters.
            </summary>
            <param name="previous"></param>
            <param name="state"></param>
            <param name="observations">The observations.</param>
            <param name="index">The index for the current observation.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Functions.HiddenMarkovModelPotentialFunction.LogCompute(System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary>
            Computes the log of the potential function given the specified parameters.
            </summary>
            <param name="previous"></param>
            <param name="state"></param>
            <param name="observations">The observations.</param>
            <param name="index">The index for the current observation.</param>
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.HiddenMarkovModelPotentialFunction.States">
            <summary>
              Gets the number of model states assumed by this function.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.HiddenMarkovModelPotentialFunction.Symbols">
            <summary>
              Gets the number of symbols assumed by this function.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.HiddenMarkovModelPotentialFunction.Weights">
            <summary>
              Gets or sets the set of weights for each feature function.
            </summary>
            <value>The weights for each of the feature functions.</value>
        </member>
        <member name="P:Accord.Statistics.Models.Fields.Functions.HiddenMarkovModelPotentialFunction.Features">
            <summary>
            Gets the feature functions composing this potential function.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Features.TransitionFeature">
            <summary>
              Edge feature for Hidden Markov Model state transition probabilities.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Features.EdgeFeature">
            <summary>
              Abstract class for CRF's Edge features.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Features.IFeature">
            <summary>
              Common interface for CRF feature functions.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.IFeature.Compute(System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary>
              Computes the feature for the given parameters.
            </summary>
            <param name="previous">The previous state.</param>
            <param name="current">The current state.</param>
            <param name="observations">The observations.</param>
            <param name="index">The index of the current observation.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.EdgeFeature.Compute(System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary>
              Computes the edge feature for the given edge parameters.
            </summary>
            <param name="previous">The originating state.</param>
            <param name="current">The destination state.</param>
            <param name="observations">The observations.</param>
            <param name="index">The index for the current observation.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.TransitionFeature.#ctor(System.Int32)">
            <summary>
              Constructs a initial state transition feature.
            </summary>
            <param name="state">The destination state.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.TransitionFeature.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs a state transition feature.
            </summary>
            <param name="previous">The previous state.</param>
            <param name="next">The next state.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.TransitionFeature.Compute(System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary>
            Computes the state transition feature for the given edge parameters.
            </summary>
            <param name="previous">The originating state.</param>
            <param name="current">The destination state.</param>
            <param name="observations">The observations.</param>
            <param name="index">The index for the current observation.</param>
        </member>
        <member name="T:Accord.Statistics.Filters.LinearScalingFilter">
            <summary>
              Linear Scaling Filter
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.BaseFilter`1">
            <summary>
              Base abstract class for the Data Table preprocessing filters.
            </summary>
            <typeparam name="T">The column options type.</typeparam>
            
        </member>
        <member name="M:Accord.Statistics.Filters.BaseFilter`1.#ctor">
            <summary>
              Creates a new DataTable Filter Base.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Filters.BaseFilter`1.Apply(System.Data.DataTable)">
            <summary>
              Applies the Filter to a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="data">The source <see cref="T:System.Data.DataTable"/>.</param>
            <returns>The processed <see cref="T:System.Data.DataTable"/>.</returns>
        </member>
        <member name="M:Accord.Statistics.Filters.BaseFilter`1.ProcessFilter(System.Data.DataTable)">
            <summary>
              Processes the current filter.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Filters.BaseFilter`1.Active">
            <summary>
              Gets or sets whether this filter is active. An inactive
              filter will repass the input table as output unchanged.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Filters.BaseFilter`1.Columns">
            <summary>
              Gets the collection of filter options.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.IAutoConfigurableFilter">
            <summary>
              Indicates that a filter supports automatic initialization.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.IAutoConfigurableFilter.Detect(System.Data.DataTable)">
            <summary>
              Auto detects the filter options by analyzing a given <see cref="T:System.Data.DataTable"/>.
            </summary> 
            
        </member>
        <member name="M:Accord.Statistics.Filters.LinearScalingFilter.#ctor">
            <summary>
              Creates a new Linear Scaling Filter.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Filters.LinearScalingFilter.#ctor(System.String[])">
            <summary>
              Creates a new Linear Scaling Filter.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Filters.LinearScalingFilter.ProcessFilter(System.Data.DataTable)">
            <summary>
              Applies the filter to the DataTable.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Filters.LinearScalingFilter.Detect(System.Data.DataTable)">
            <summary>
              Auto detects the filter options by analyzing a given <see cref="T:System.Data.DataTable"/>.
            </summary>  
        </member>
        <member name="T:Accord.Statistics.Filters.LinearScalingFilter.Options">
            <summary>
              Options for the Linear Scaling filter.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Filters.ColumnOptionsBase">
            <summary>
              Column options for filter which have per-column settings.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.ColumnOptionsBase.#ctor(System.String)">
            <summary>
              Constructs the base class for Column Options.
            </summary>
            <param name="column">Column's name.</param>
        </member>
        <member name="M:Accord.Statistics.Filters.ColumnOptionsBase.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Accord.Statistics.Filters.ColumnOptionsBase.Column">
            <summary>
              Gets or sets the name of the column that the options will apply to.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Filters.LinearScalingFilter.Options.#ctor(System.String)">
            <summary>
              Creates a new column options.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Filters.LinearScalingFilter.Options.#ctor">
            <summary>
              Constructs a new Options object.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Filters.LinearScalingFilter.Options.SourceRange">
            <summary>
              Range of the input values
            </summary>
        </member>
        <member name="P:Accord.Statistics.Filters.LinearScalingFilter.Options.OutputRange">
            <summary>
              Target range of the output values after scaling.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.AnalysisMethod">
            <summary>
              Determines the method to be used in a statistical analysis.
            </summary>
        </member>
        <member name="F:Accord.Statistics.Analysis.AnalysisMethod.Center">
            <summary>
              By choosing Center, the method will be run on the mean-centered data.
            </summary>
            <remarks>
              In Principal Component Analysis this means the method will operate
              on the Covariance matrix of the given data.
            </remarks>
             
        </member>
        <member name="F:Accord.Statistics.Analysis.AnalysisMethod.Standardize">
            <summary>
               By choosing Standardize, the method will be run on the mean-centered and
               standardized data.
            </summary>
            <remarks>
               In Principal Component Analysis this means the method
               will operate on the Correlation matrix of the given data. One should always
               choose to standardize when dealing with different units of variables.
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Testing.Hypothesis">
            <summary>
              Test type
            </summary>
            
        </member>
        <member name="F:Accord.Statistics.Testing.Hypothesis.OneUpper">
            <summary>
              The test considers the upper tail from a probability distribution.
            </summary>
        </member>
        <member name="F:Accord.Statistics.Testing.Hypothesis.OneLower">
            <summary>
              The test considers the lower tail from a probability distribution.
            </summary>
        </member>
        <member name="F:Accord.Statistics.Testing.Hypothesis.TwoTail">
            <summary>
              The test considers the two tails from a probability distribution.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Testing.HypothesisTest">
            <summary>
              Base class for Hypothesis Tests
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Testing.HypothesisTest.ToString(System.String,System.IFormatProvider)">
            <summary>
              Converts the numeric P-Value of this test to its equivalent string representation.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Testing.HypothesisTest.ToString">
            <summary>
              Converts the numeric P-Value of this test to its equivalent string representation.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Testing.HypothesisTest.Threshold">
            <summary>
              Gets the significance threshold. Default value is 0.05 (5%).
            </summary>
        </member>
        <member name="P:Accord.Statistics.Testing.HypothesisTest.Significant">
            <summary>
              Gets whether the null hypothesis can be accepted or should be rejected.
            </summary>
            <remarks>
              The term significant is seductive, and it is easy to misinterpret it.
              A result is said to be statistically significant when the result would
              be surprising if the populations were really identical. A result is
              said to be statistically significant when the P value is less than a
              preset threshold value.
            </remarks>
        </member>
        <member name="P:Accord.Statistics.Testing.HypothesisTest.PValue">
            <summary>
              Gets the P-value associated with this test.
            </summary>
            <remarks>
              In statistical hypothesis testing, the p-value is the probability of
              obtaining a test statistic at least as extreme as the one that was
              actually observed, assuming that the null hypothesis is true.
              
              The lower the p-value, the less likely the result, assuming the null
              hypothesis, so the more "significant" the result, in the sense of
              statistical significance.
            </remarks>
        </member>
        <member name="P:Accord.Statistics.Testing.HypothesisTest.Statistic">
            <summary>
              Gets the test statistic.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Testing.HypothesisTest.Hypothesis">
            <summary>
              Gets the test type.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Sparse.SparsePolynomial">
            <summary>
              Sparse Polynomial Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparsePolynomial.#ctor(System.Int32,System.Double)">
            <summary>
              Constructs a new Sparse Polynomial kernel of a given degree.
            </summary>
            <param name="degree">The polynomial degree for this kernel.</param>
            <param name="constant">The polynomial constant for this kernel. Default is 1.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparsePolynomial.#ctor(System.Int32)">
            <summary>
              Constructs a new Polynomial kernel of a given degree.
            </summary>
            <param name="degree">The polynomial degree for this kernel.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparsePolynomial.Function(System.Double[],System.Double[])">
            <summary>
              Polynomial kernel function.
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparsePolynomial.Distance(System.Double[],System.Double[])">
            <summary>
              Computes the distance in input space
              between two points given in feature space.
            </summary>
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            <returns>Distance between <c>x</c> and <c>y</c> in input space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Sparse.SparsePolynomial.Degree">
            <summary>
              Gets or sets the kernel's polynomial degree.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Kernels.Sparse.SparsePolynomial.Constant">
            <summary>
              Gets or sets the kernel's polynomial constant term.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Linear">
            <summary>
              Linear Kernel.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.IDistance">
             <summary>
               Kernel space distance interface.
             </summary>
             <remarks>
               Kernels which implement this interface can be used to solve the pre-
               image problem in <see cref="T:Accord.Statistics.Analysis.KernelPrincipalComponentAnalysis">Kernel
               Principal Component Analyis</see> and other methods based in Multi-
               Dimensional Scaling.
             </remarks>
            
             <seealso cref="T:Accord.Statistics.Kernels.IKernel"/>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.IDistance.Distance(System.Double[],System.Double[])">
            <summary>
              Computes the distance in input space
              between two points given in feature space.
            </summary>
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            <returns>Distance between <c>x</c> and <c>y</c> in input space.</returns>
        </member>
        <member name="M:Accord.Statistics.Kernels.Linear.#ctor(System.Double)">
            <summary>
              Constructs a new Linear kernel.
            </summary>
            <param name="constant">A constant intercept term.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Linear.#ctor">
            <summary>
              Constructs a new Linear Kernel.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Kernels.Linear.Function(System.Double[],System.Double[])">
            <summary>
              Linear kernel function.
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="M:Accord.Statistics.Kernels.Linear.Distance(System.Double[],System.Double[])">
            <summary>
              Computes the distance in input space
              between two points given in feature space.
            </summary>
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            <returns>Distance between <c>x</c> and <c>y</c> in input space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Linear.Constant">
            <summary>
              Gets or sets the kernel's intercept term.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Features.EmissionFeature">
            <summary>
              State feature for Hidden Markov Model symbol emission probabilities.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Features.StateFeature">
            <summary>
              Abstract class for CRF's State features.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.StateFeature.Accord#Statistics#Models#Fields#Features#IFeature#Compute(System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary>
            Computes the feature for the given parameters.
            </summary>
            <param name="previous">The previous state.</param>
            <param name="current">The current state.</param>
            <param name="observations">The observations.</param>
            <param name="index">The index of the current observation.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.StateFeature.Compute(System.Int32,System.Int32[],System.Int32)">
            <summary>
            Computes the state feature for the given state parameters.
            </summary>
            <param name="currentState">The current state.</param>
            <param name="observations">The observations.</param>
            <param name="index">The index for the current observation.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.EmissionFeature.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs a new symbol emission feature.
            </summary>
            <param name="state">The state for the emission.</param>
            <param name="symbol">The emission symbol.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Features.EmissionFeature.Compute(System.Int32,System.Int32[],System.Int32)">
            <summary>
            Computes the state feature for the given state parameters.
            </summary>
            <param name="currentState">The current state.</param>
            <param name="observations">The observations.</param>
            <param name="index">The index for the current observation.</param>
        </member>
        <member name="T:Accord.Statistics.Models.Fields.ConditionalRandomField">
            <summary>
              Linear-Chain Conditional Random Field (experimental).
            </summary>
            <remarks>
              <para>A conditional random field (CRF) is a type of discriminative undirected
              probabilistic graphical model. It is most often used for labeling or parsing
              of sequential data, such as natural language text or biological sequences
              and computer vision.</para>
              
              <para>This implementation is currently experimental.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ConditionalRandomField.#ctor(System.Int32,Accord.Statistics.Models.Fields.Functions.IPotentialFunction)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Models.Fields.ConditionalRandomField"/> class.
            </summary>
            <param name="states">The number of states for the model.</param>
            <param name="function">The potential function to be used by the model.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ConditionalRandomField.Partition(System.Int32[])">
            <summary>
              Computes the partition function, as known as Z(x),
              for the specified observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ConditionalRandomField.LogPartition(System.Int32[])">
            <summary>
              Computes the Log of the partition function.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ConditionalRandomField.Likelihood(System.Int32[],System.Int32[])">
            <summary>
              Computes the likelihood of the model for the given observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ConditionalRandomField.LogLikelihood(System.Int32[],System.Int32[])">
            <summary>
              Computes the log-likelihood of the model for the given observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ConditionalRandomField.Compute(System.Int32[],System.Double@)">
            <summary>
              Computes the most likely state labels for the given observations,
              returning the overall sequence probability for this model.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ConditionalRandomField.Likelihood(System.Int32[][],System.Int32[][])">
            <summary>
              Computes the most likely state labels for the given observations,
              returning the overall sequence probability for this model.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ConditionalRandomField.LogLikelihood(System.Int32[][],System.Int32[][])">
            <summary>
              Computes the most likely state labels for the given observations,
              returning the overall sequence log-likelihood for this model.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Fields.ConditionalRandomField.States">
            <summary>
              Gets the number of states in this
              linear-chain Conditional Random Field.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Fields.ConditionalRandomField.Function">
            <summary>
              Gets the potential function encompassing
              all feature functions for this model.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Filters.SelectionFilter">
            <summary>
              Relational-algebra selection filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.SelectionFilter.#ctor(System.String,System.String)">
            <summary>
              Constructs a new Selection Filter.
            </summary>
            <param name="expression">The filtering criteria.</param>
            <param name="orderBy">The desired sort order.</param>
        </member>
        <member name="M:Accord.Statistics.Filters.SelectionFilter.#ctor(System.String)">
            <summary>
              Constructs a new Selection Filter.
            </summary>
            <param name="expression">The filtering criteria.</param>
        </member>
        <member name="M:Accord.Statistics.Filters.SelectionFilter.#ctor">
            <summary>
              Constructs a new Selection Filter.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Filters.SelectionFilter.Apply(System.Data.DataTable)">
            <summary>
              Applies the filter to the current data.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Filters.SelectionFilter.Expression">
            <summary>
              Gets or sets the eSQL filter expression for the filter.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Filters.SelectionFilter.OrderBy">
            <summary>
              Gets or sets the ordering to apply for the filter.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Filters.DiscretizationFilter">
            <summary>
              Value discretization preprocessing filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.DiscretizationFilter.#ctor">
            <summary>
              Creates a new Discretization filter.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Filters.DiscretizationFilter.#ctor(System.String[])">
            <summary>
              Creates a new Discretization filter.
            </summary>
            <param name="columns"></param>
        </member>
        <member name="M:Accord.Statistics.Filters.DiscretizationFilter.ProcessFilter(System.Data.DataTable)">
            <summary>
              Processes the current filter.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Filters.DiscretizationFilter.Detect(System.Data.DataTable)">
            <summary>
              Auto detects the filter options by analyzing a given <see cref="T:System.Data.DataTable"/>.
            </summary> 
            
        </member>
        <member name="T:Accord.Statistics.Filters.DiscretizationFilter.Options">
            <summary>
              Options for the discretization filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.DiscretizationFilter.Options.#ctor(System.String)">
            <summary>
              Constructs a new Options class for the discretization filter.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Accord.Statistics.Filters.DiscretizationFilter.Options.#ctor">
            <summary>
              Constructs a new Options object.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Filters.DiscretizationFilter.Options.Threshold">
            <summary>
              Gets or sets the threshold for the discretization filter.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Filters.DiscretizationFilter.Options.Symmetric">
            <summary>
              Gets or sets whether the discretization threshold is symmetric.
            </summary>
            <remarks>
              If a symmetric threshold of 0.4 is used, for example, a real value of
              0.5 will be rounded to 1.0 and a real value of -0.5 will be rounded to
              -1.0. 
              
              If a non-symmetric threshold of 0.4 is used, a real value of 0.5
              will be rounded towards 1.0, but a real value of -0.5 will be rounded
              to 0.0 (because |-0.5| is higher than the threshold of 0.4).
            </remarks>
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.PoissonDistribution">
            <summary>
              Poisson probability distribution.
            </summary>
            <remarks>
              <para>The Poisson distribution is a discrete probability distribution that
              expresses the probability of a number of events occurring in a fixed
              period of time if these events occur with a known average rate and
              independently of the time since the last event. (The Poisson distribution
              can also be used for the number of events in other specified intervals
              such as distance, area or volume.)</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Poisson_distribution">
                  http://en.wikipedia.org/wiki/Poisson_distribution</a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PoissonDistribution.#ctor(System.Double)">
            <summary>
              Creates a new Poisson distribution with the given lambda.
            </summary>
            <param name="lambda">The Poisson's lambda parameter.</param>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PoissonDistribution.DistributionFunction(System.Int32)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              the this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range.</param>
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PoissonDistribution.ProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range.</param>
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PoissonDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
            Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">The array of observations to fit the model against. The array
            elements can be either of type double (for univariate data) or
            type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            <remarks>
            Although both double[] and double[][] arrays are supported,
            providing a double[] for a multivariate distribution or a
            double[][] for a univariate distribution may have a negative
            impact in performance.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.PoissonDistribution.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PoissonDistribution.Mean">
            <summary>
            Gets the mean for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PoissonDistribution.Variance">
            <summary>
            Gets the variance for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.PoissonDistribution.Entropy">
            <summary>
            Gets the entropy for this distribution.
            </summary>
            <remarks>
              A closed form expression for the entropy of a Poisson
              distribution is unknown. This property returns an approximation
              for large lambda.
            </remarks>
        </member>
        <member name="T:Accord.Statistics.Testing.ZTest">
            <summary>
              Z-Test (One-sample location test)
            </summary>
            
            <remarks>
            <para>
              The term Z-test is often used to refer specifically to the one-sample
              location test comparing the mean of a set of measurements to a given
              constant.</para>
            <para>
              If the observed data X1, ..., Xn are (i) uncorrelated, (ii) have a common
              mean μ, and (iii) have a common variance σ², then the sample average X has
              mean μ and variance σ² / n. If our null hypothesis is that the mean value
              of the population is a given number μ0, we can use X −μ0 as a test-statistic,
              rejecting the null hypothesis if X −μ0 is large.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ZTest.#ctor(System.Double[],System.Double,Accord.Statistics.Testing.Hypothesis)">
            <summary>
              Constructs a Z test.
            </summary>
            <param name="samples">The data samples from which the test will be performed.</param>
            <param name="x">The constant to be compared with the samples.</param>
            <param name="hypothesis">The hypothesis to test.</param>
        </member>
        <member name="M:Accord.Statistics.Testing.ZTest.#ctor(System.Double,System.Double,System.Double,System.Int32,Accord.Statistics.Testing.Hypothesis)">
            <summary>
              Constructs a Z test.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Testing.ZTest.#ctor(System.Double,Accord.Statistics.Testing.Hypothesis)">
            <summary>
              Constructs a Z test.
            </summary>
            <param name="statistic">The test statistic, as given by (x-μ)/SE.</param>
            <param name="hypothesis">The hypothesis type for the test.</param>
        </member>
        <member name="T:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis">
            <summary>
              Backward Stepwise Logistic Regression Analysis.
            </summary>
            <remarks>
            <para>
              The Backward Stepwise regression is an exploratory analysis procedure,
              where the analysis begins with a full (saturated) model and at each step
              variables are eliminated from the model in a iterative fashion.</para>
            <para>
              Significance tests are performed after each removal to track which of
              the variables can be discarded safely without implying in degradation.</para>
            <para>
              When no more variables can be removed from the model without causing
              a significative loss in the model likelihood, the method can stop.</para>  
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IRegressionAnalysis">
            <summary>
              Common interface for regression analysis.
            </summary>
            
            <remarks>
            <para>
              Regression analysis attempt to express one numerical dependent variable
              as a combinations of other features or measurements.</para>
            <para>
              When the dependent variable is a category label, the class of analysis methods
              is known as <see cref="T:Accord.Statistics.Analysis.IDiscriminantAnalysis">discriminant analysis</see>.</para>  
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IRegressionAnalysis.Outputs">
            <summary>
              Gets the the dependent variable value
              for each of the source input points.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.#ctor(System.Double[][],System.Double[],System.String[],System.String)">
            <summary>
              Constructs a Stepwise Logistic Regression Analysis.
            </summary>
            <param name="inputs">The input data for the analysis.</param>
            <param name="outputs">The output data for the analysis.</param>
            <param name="inputNames">The names for the input variables.</param>
            <param name="outputName">The name for the output variable.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Compute">
            <summary>
              Computes the Stepwise Logistic Regression.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.DoStep">
            <summary>
              Computes one step of the Stepwise Logistic Regression Analysis.
            </summary>
            <returns>
              Returns the index of the variable discarded in the step or -1
              in case no variable could be discarded.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.fit(Accord.Statistics.Models.Regression.LogisticRegression,System.Double[][],System.Double[])">
            <summary>
              Fits a logistic regression model to data until convergence.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Source">
            <summary>
            Source data used in the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Outputs">
            <summary>
            Gets the the dependent variable value
            for each of the source input points.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Result">
            <summary>
              Gets the resulting probabilities obtained
              by the most likely logistic regression model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Current">
            <summary>
              Gets the current nested model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Nested">
            <summary>
              Gets the collection of nested models obtained after 
              a step of the backward stepwise procedure.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Inputs">
            <summary>
              Gets the name of the input variables.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Output">
            <summary>
              Gets the name of the output variables.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Threshold">
            <summary>
              Gets or sets the significance threshold used to
              determine if a nested model is significant or not.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis.Variables">
            <summary>
              Gets the final set of input variables indices
              as selected by the stepwise procedure.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel">
            <summary>
              Stepwise Logistic Regression Nested Model.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.#ctor(Accord.Statistics.Analysis.StepwiseLogisticRegressionAnalysis,Accord.Statistics.Models.Regression.LogisticRegression,System.Int32[],Accord.Statistics.Testing.ChiSquareTest)">
            <summary>
              Constructs a new Logistic regression model.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.Analysis">
            <summary>
              Gets the Stepwise Logistic Regression Analysis
              from which this model belongs to.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.Regression">
            <summary>
              Gets the regression model.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.Variables">
            <summary>
              Gets the subset of the original variables used by the model.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.ChiSquare">
            <summary>
              Gets the Chi-Square Likelihood Ratio test for the model.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.StepwiseLogisticRegressionModel.Names">
            <summary>
              Gets the subset of the original variables used by the model.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.StepwiseLogisticRegressionModelCollection">
            <summary>
              Stepwise Logistic Regression Nested Model collection.
              This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.DescriptiveAnalysis">
             <summary>
               Descriptive statistics analysis.
             </summary>
             <remarks>
               Descriptive statistics are used to describe the basic features of the data
               in a study. They provide simple summaries about the sample and the measures.
               Together with simple graphics analysis, they form the basis of virtually
               every quantitative analysis of data.
             </remarks>
            
             <seealso cref="T:Accord.Statistics.Tools"/>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DescriptiveAnalysis.#ctor(System.Double[0:,0:])">
            <summary>
              Constructs the Descriptive Analysis.
            </summary>
            <param name="data">The source data to perform analysis.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.DescriptiveAnalysis.#ctor(System.Double[0:,0:],System.String[])">
            <summary>
              Constructs the Descriptive Analysis.
            </summary>
            <param name="data">The source data to perform analysis.</param>
            <param name="columnNames">Names for the analyzed variables.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.DescriptiveAnalysis.Compute">
            <summary>
              Computes the analysis using given source data and parameters.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Source">
            <summary>
              Gets the source matrix from which the analysis was run.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.ColumnNames">
            <summary>
              Gets the column names from the variables in the data.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.DeviationScores">
            <summary>
            Gets the mean subtracted data.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.StandardScores">
            <summary>
            Gets the mean subtracted and deviation divided data. Also known as Z-Scores.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.CovarianceMatrix">
            <summary>
            Gets the Covariance Matrix
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.CorrelationMatrix">
            <summary>
            Gets the Correlation Matrix
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Means">
            <summary>
            Gets a vector containing the Mean of each column of data.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.StandardDeviations">
            <summary>
            Gets a vector containing the Standard Deviation of each column of data.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.StandardErrors">
            <summary>
            Gets a vector containing the Standard Error of the Mean of each column of data.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Modes">
            <summary>
            Gets a vector containing the Mode of each column of data.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Medians">
            <summary>
            Gets a vector containing the Median of each column of data.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Variances">
            <summary>
            Gets a vector containing the Variance of each column of data.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Ranges">
            <summary>
            Gets an array containing the Ranges of each column of data.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Sums">
            <summary>
            Gets an array containing the sum of each column of data.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Skewness">
            <summary>
            Gets an array containing the skewness for of each column of data.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Kurtosis">
            <summary>
            Gets an array containing the kurtosis for of each column of data.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Samples">
            <summary>
              Gets the number of samples (or observations) in the data.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Variables">
            <summary>
              Gets the number of variables (or features) in the data.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveAnalysis.Measures">
            <summary>
            Gets a collection of DescriptiveMeasures objects that can be bound to a DataGridView.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.DescriptiveMeasures">
            <summary>
              Descriptive measures for a variable.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Index">
            <summary>
              Gets the variable's index.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Name">
            <summary>
              Gets the variable's name
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Mean">
            <summary>
              Gets the variable's mean.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.StandardDeviation">
            <summary>
              Gets the variable's standard deviation.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Median">
            <summary>
              Gets the variable's median.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Mode">
            <summary>
              Gets the variable's mode.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Variance">
            <summary>
              Gets the variable's variance.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Skewness">
            <summary>
              Gets the variable's skewness.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Kurtosis">
            <summary>
              Gets the variable's kurtosis.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.StandardError">
            <summary>
              Gets the variable's standard error of the mean.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Max">
            <summary>
              Gets the variable's maximum value.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Min">
            <summary>
              Gets the variable's minimum value.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Length">
            <summary>
              Gets the variable's length.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DescriptiveMeasures.Samples">
            <summary>
              Gets the variable's observations.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.DescriptiveMeasureCollection">
            <summary>
              Collection of descriptive measures.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression">
            <summary>
              Multiple Linear Regression.
            </summary>
            <remarks>
              In linear regression, the model specification is that the dependent
              variable, y_i is a linear combination of the parameters (but need not
              be linear in the independent x_i variables). As the linear regression
              has a closed form solution, the regression coefficients can be
              efficiently computed by calling the Regress method only once.
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Models.Regression.Linear.ILinearRegression">
            <summary>
              Common interface for Linear Regression Models.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.ILinearRegression.Compute(System.Double[])">
            <summary>
              Computes the model output for a given input.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.#ctor(System.Int32)">
            <summary>
              Creates a new Multiple Linear Regression.
            </summary>
            <param name="inputs">The number of inputs for the regression.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.#ctor(System.Int32,System.Boolean)">
            <summary>
              Creates a new Multiple Linear Regression.
            </summary>
            <param name="inputs">The number of inputs for the regression.</param>
            <param name="intercept">True to use an intercept term, false otherwise. Default is false.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.Regress(System.Double[][],System.Double[])">
            <summary>
              Performs the regression using the input vectors and output
              data, returning the sum of squared errors of the fit.
            </summary>
            <param name="inputs">The input vectors to be used in the regression.</param>
            <param name="outputs">The output values for each input vector.</param>
            <returns>The Sum-Of-Squares error of the regression.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.CoefficientOfDetermination(System.Double[][],System.Double[])">
            <summary>
              Gets the coefficient of determination, as known as R² (r-squared).
            </summary>
            <remarks>
              <para>
               The coefficient of determination is used in the context of statistical models
               whose main purpose is the prediction of future outcomes on the basis of other
               related information. It is the proportion of variability in a data set that
               is accounted for by the statistical model. It provides a measure of how well
               future outcomes are likely to be predicted by the model.</para>
              <para>
               The R² coefficient of determination is a statistical measure of how well the
               regression line approximates the real data points. An R² of 1.0 indicates
               that the regression line perfectly fits the data.</para> 
            </remarks>
            <returns>The R² (r-squared) coefficient for the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.CoefficientOfDetermination(System.Double[][],System.Double[],System.Boolean)">
            <summary>
              Gets the coefficient of determination, as known as R² (r-squared).
            </summary>
            <remarks>
              <para>
               The coefficient of determination is used in the context of statistical models
               whose main purpose is the prediction of future outcomes on the basis of other
               related information. It is the proportion of variability in a data set that
               is accounted for by the statistical model. It provides a measure of how well
               future outcomes are likely to be predicted by the model.</para>
              <para>
               The R² coefficient of determination is a statistical measure of how well the
               regression line approximates the real data points. An R² of 1.0 indicates
               that the regression line perfectly fits the data.</para> 
            </remarks>
            <returns>The R² (r-squared) coefficient for the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.Compute(System.Double[])">
            <summary>
              Computes the Multiple Linear Regression for an input vector.
            </summary>
            <param name="input">The input vector.</param>
            <returns>The calculated output.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.Compute(System.Double[][])">
            <summary>
              Computes the Multiple Linear Regression for input vectors.
            </summary>
            <param name="input">The input vector data.</param>
            <returns>The calculated outputs.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.ToString">
            <summary>
              Returns a System.String representing the regression.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.Coefficients">
            <summary>
              Gets the coefficients used by the regression model. If the model
              contains an intercept term, it will be in the end of the vector.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.MultipleLinearRegression.Inputs">
            <summary>
              Gets the number of inputs for the regression model.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Topology.Forward">
             <summary>
               Forward Topology for Hidden Markov Models.
             </summary>
             
             <remarks>
              <para>
              Forward topologies are commonly used to initialize models in which
              training sequences can be organized in samples, such as in the recognition
              of spoken words. In spoken word recognition, several examples of a single
              word can (and should) be used to train a single model, to achieve the most
              general model able to generalize over a great number of word samples.</para>
              
              <para>
              Forward models can typically have a large number of states.</para>
              
              <para>
               References:
               <list type="bullet">
                 <item><description>
                   Alexander Schliep, "Learning Hidden Markov Model Topology".</description></item>
                 <item><description>
                   Richard Hughey and Anders Krogh, "Hidden Markov models for sequence analysis: 
                   extension and analysis of the basic method", CABIOS 12(2):95-107, 1996. Available in:
                   http://compbio.soe.ucsc.edu/html_format_papers/hughkrogh96/cabios.html</description></item>
               </list></para>
             </remarks>
             
             <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Topology.ITopology"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Topology.Ergodic"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Topology.Custom"/>
            
             
             <example>
              <para>
               In the following example, we will create a Forward-only
               discrete-density hidden Markov model.</para>
               
               <code>
               // Create a new Forward-only hidden Markov model with
               // three forward-only states and four sequence symbols.
               var model = new HiddenMarkovModel(new Forward(3), 4);
            
               // After creation, the state transition matrix for the model
               // should be given by:
               //
               //       { 0.33, 0.33, 0.33 }
               //       { 0.00, 0.50, 0.50 }
               //       { 0.00, 0.00, 1.00 }
               //       
               // in which no backward transitions are allowed (have zero probability).
               </code>
             </example>
             
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Topology.ITopology">
            <summary>
              Hidden Markov model topology (architecture) specification.
            </summary>
            
            <remarks>
             <para>
              An Hidden Markov Model Topology specifies how many states and which
              initial probabilities a Markov model should have. Two common topologies
              can be discussed in terms of transition state probabilities and are
              available to construction through the <see cref="T:Accord.Statistics.Models.Markov.Topology.Ergodic"/> and
              <see cref="T:Accord.Statistics.Models.Markov.Topology.Forward"/> classes implementing this interface.</para>
              
             <para>Topology specification is important with regard to both learning and
              performance: A model with too many states (and thus too many settable
              parameters) will require too much training data while an model with an
              insufficient number of states will prohibit the HMM from capturing subtle
              statistical patterns.</para>
            
            
             <para>
              References:
              <list type="bullet">
                <item><description>
                  Alexander Schliep, "Learning Hidden Markov Model Topology".</description></item>
                <item><description>
                  Richard Hughey and Anders Krogh, "Hidden Markov models for sequence analysis: 
                  extension and analysis of the basic method", CABIOS 12(2):95-107, 1996. Available in:
                  http://compbio.soe.ucsc.edu/html_format_papers/hughkrogh96/cabios.html</description></item>
              </list></para>
              
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel"/>
            <seealso cref="T:Accord.Statistics.Models.Markov.Topology.Ergodic"/>
            <seealso cref="T:Accord.Statistics.Models.Markov.Topology.Forward"/>
            <seealso cref="T:Accord.Statistics.Models.Markov.Topology.Custom"/>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.ITopology.Create(System.Double[0:,0:]@,System.Double[]@)">
            <summary>
              Creates the state transitions matrix and the 
              initial state probabilities for this topology.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.ITopology.States">
            <summary>
              Gets the number of states in this topology.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Forward.#ctor(System.Int32)">
            <summary>
              Creates a new Forward topology for a given number of states.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Forward.#ctor(System.Int32,System.Int32)">
            <summary>
              Creates a new Forward topology for a given number of states.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Forward.#ctor(System.Int32,System.Boolean)">
            <summary>
              Creates a new Forward topology for a given number of states.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Forward.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
              Creates a new Forward topology for a given number of states.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Forward.Create(System.Double[0:,0:]@,System.Double[]@)">
            <summary>
              Creates the state transitions matrix and the
              initial state probabilities for this topology.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.Forward.States">
            <summary>
              Gets the number of states in this topology.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.Forward.Deepness">
            <summary>
              Gets or sets the maximum deepness level allowed
              for the forward state transition chains.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.Forward.Random">
            <summary>
              Gets or sets whether the transition matrix
              should be initialized with random probabilities
              or not. Default is false.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.Forward.Initial">
            <summary>
              Gets the initial state probabilities.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Sparse.SparseCauchy">
            <summary>
              Sparse Cauchy Kernel.
            </summary>
            <remarks>
              The Cauchy kernel comes from the Cauchy distribution (Basak, 2008). It is a
              long-tailed kernel and can be used to give long-range influence and sensitivity
              over the high dimension space.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseCauchy.#ctor(System.Double)">
            <summary>
              Constructs a new Sparse Cauchy Kernel.
            </summary>
            <param name="sigma">The value for sigma.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseCauchy.Function(System.Double[],System.Double[])">
            <summary>
              Cauchy Kernel Function
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Sparse.SparseCauchy.Sigma">
            <summary>
              Gets or sets the kernel's sigma value.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.RationalQuadratic">
            <summary>
              Rational Quadratic Kernel.
            </summary>
            <remarks>
              The Rational Quadratic kernel is less computationally intensive than
              the Gaussian kernel and can be used as an alternative when using the
              Gaussian becomes too expensive.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.RationalQuadratic.#ctor(System.Double)">
            <summary>
              Constructs a new Rational Quadratic Kernel.
            </summary>
            <param name="constant">The constant term theta.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.RationalQuadratic.Function(System.Double[],System.Double[])">
            <summary>
              Rational Quadratic Kernel Function
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.RationalQuadratic.Constant">
            <summary>
              Gets or sets the kernel's constant term.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Fields.ForwardBackwardAlgorithm">
            <summary>
              Forward-Backward algorithms for Conditional Random Fields.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ForwardBackwardAlgorithm.Forward(Accord.Statistics.Models.Fields.Functions.IPotentialFunction,System.Int32[])">
            <summary>
              Computes Forward probabilities for a given potential function and a set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.ForwardBackwardAlgorithm.Backward(Accord.Statistics.Models.Fields.Functions.IPotentialFunction,System.Int32[])">
            <summary>
              Computes Backward probabilities for a given potential function and a set of observations.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.NormalDistribution">
            <summary>
              Multivariate Normal (Gaussian) distribution.
            </summary>
            <remarks>
            <para>
              The Gaussian is the most widely used distribution for continuous
              variables. In the case of many variables, it is governed by two
              parameters, the mean vector and the variance-covariance matrix.</para>
            <para>
              When a covariance matrix given to the class constructor is not positive
              definite, the distribution is degenerate and this may be an indication
              indication that it may be entirely contained in a r-dimensional subspace.
              Applying a rotation to an orthogonal basis to recover a non-degenerate
              r-dimensional distribution may help in this case.</para>
            <para>  
              - http://www.aiaccess.net/English/Glossaries/GlosMod/e_gm_positive_definite_matrix.htm
            </para>
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution">
            <summary>
              Abstract class for Multivariate Probability Distributions.
            </summary>
            <remarks>
            <para>
              A probability distribution identifies either the probability of each value of an
              unidentified random variable (when the variable is discrete), or the probability
              of the value falling within a particular interval (when the variable is continuous).</para>
            <para>
              The probability distribution describes the range of possible values that a random
              variable can attain and the probability that the value of the random variable is
              within any (measurable) subset of that range.</para>  
            <para>
              The function describing the probability that a given value will occur is called
              the probability function (or probability density function, abbreviated PDF), and
              the function describing the cumulative probability that a given value or any value
              smaller than it will occur is called the distribution function (or cumulative
              distribution function, abbreviated CDF).</para>  
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Probability_distribution">
                  http://en.wikipedia.org/wiki/Probability_distribution</a></description></item>
                <item><description><a href="http://mathworld.wolfram.com/StatisticalDistribution.html">
                  http://mathworld.wolfram.com/StatisticalDistribution.html</a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.IMultivariateDistribution">
            <summary>
              Common interface for multivariate probability distributions.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IMultivariateDistribution.Dimension">
            <summary>
              Gets the number of variables for the distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IMultivariateDistribution.Mean">
            <summary>
              Gets the Mean vector for the distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IMultivariateDistribution.Variance">
            <summary>
              Gets the Variance vector for the distribution.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.IMultivariateDistribution.Covariance">
            <summary>
              Gets the Variance-Covariance matrix for the distribution.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.#ctor(System.Int32)">
            <summary>
              Constructs a new MultivariateDistribution class.
            </summary>
            <param name="dimension">The number of dimensions in the distribution.</param>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#ProbabilityFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array,System.Double[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array,Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array,System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.DistributionFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.ProbabilityDensityFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Fit(System.Double[][])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Fit(System.Double[][],System.Double[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Fit(System.Double[][],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Dimension">
            <summary>
              Gets the number of variables for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateContinuousDistribution.Covariance">
            <summary>
              Gets the variance-covariance matrix for this distribution.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.NormalDistribution.#ctor(System.Int32)">
            <summary>
              Constructs a multivariate Gaussian distribution
              with zero mean vector and unitary variance matrix.
            </summary>
            <param name="dimension">The number of dimensions in the distribution.</param>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.NormalDistribution.#ctor(System.Double[],System.Double[0:,0:])">
            <summary>
              Constructs a multivariate Gaussian distribution
              with given mean vector and covariance matrix.
            </summary>
            <param name="mean">The mean of the distribution.</param>
            <param name="covariance">The covariance for the distribution.</param>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.NormalDistribution.DistributionFunction(System.Double[])">
            <summary>
              This method is not supported.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.NormalDistribution.ProbabilityDensityFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">A single point in the distribution range. For a
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.NormalDistribution.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
            Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">The array of observations to fit the model against. The array
            elements can be either of type double (for univariate data) or
            type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            <remarks>
            Although both double[] and double[][] arrays are supported,
            providing a double[] for a multivariate distribution or a
            double[][] for a univariate distribution may have a negative
            impact in performance.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.NormalDistribution.Estimate(System.Double[][])">
            <summary>
              Estimates a new Normal distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.NormalDistribution.Estimate(System.Double[][],Accord.Statistics.Distributions.Fitting.NormalOptions)">
            <summary>
              Estimates a new Normal distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.NormalDistribution.Estimate(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.NormalOptions)">
            <summary>
              Estimates a new Normal distribution from a given set of observations.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.NormalDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.NormalDistribution.Generate(System.Int32)">
            <summary>
              Generates a random vector of observations from the current distribution.
            </summary>
            <param name="samples">The number of samples to generate.</param>
            <returns>A random vector of observations drawn from this distribution.</returns>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.NormalDistribution.Mean">
            <summary>
              Gets the Mean vector for the Gaussian distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.NormalDistribution.Variance">
            <summary>
              Gets the Variance vector for the Gaussian distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.NormalDistribution.Covariance">
            <summary>
              Gets the variance-covariance matrix for the Gaussian distribution.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Testing.WaldTest">
            <summary>
              Wald's Test using the Normal distribution.
            </summary>
            
            <remarks>
              Under the Wald statistical test, the maximum likelihood estimate of the
              parameter(s) of interest θ is compared with the proposed value θ', with
              the assumption that the difference between the two will be approximately
              normal.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Testing.WaldTest.#ctor(System.Double)">
            <summary>
              Constructs a Wald's test.
            </summary>
            <param name="statistic">The test statistic, as given by (θ-θ')/SE.</param>
        </member>
        <member name="M:Accord.Statistics.Testing.WaldTest.#ctor(System.Double,System.Double,System.Double)">
            <summary>
              Constructs a Wald's test.
            </summary>
            <param name="estimated">The estimated value θ.</param>
            <param name="proposed">The proposed value θ'.</param>
            <param name="standardError">The standard error.</param>
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Topology.Custom">
             <summary>
               Custom Topology for Hidden Markov Model.
             </summary>
             
             <remarks>
              <para>
               An Hidden Markov Model Topology specifies how many states and which
               initial probabilities a Markov model should have. Two common topologies
               can be discussed in terms of transition state probabilities and are
               available to construction through the <see cref="T:Accord.Statistics.Models.Markov.Topology.Ergodic"/> and
               <see cref="T:Accord.Statistics.Models.Markov.Topology.Forward"/> classes implementing the <see cref="T:Accord.Statistics.Models.Markov.Topology.ITopology"/>
               interface.</para>
               
              <para>Topology specification is important with regard to both learning and
               performance: A model with too many states (and thus too many settable
               parameters) will require too much training data while an model with an
               insufficient number of states will prohibit the HMM from capturing subtle
               statistical patterns.</para>
               
              <para>This custom implementation allows for arbitrarily specification of
               the state transition matrix and initial state probabilities for
               <see cref="T:Accord.Statistics.Models.Markov.IHiddenMarkovModel">hidden Markov models</see>.</para>
               
             </remarks>
               
             <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Topology.ITopology"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Topology.Ergodic"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Topology.Forward"/>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Custom.#ctor(System.Double[0:,0:],System.Double[])">
            <summary>
              Creates a new custom topology with user-defined
              transition matrix and initial state probabilities.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Custom.Create(System.Double[0:,0:]@,System.Double[]@)">
            <summary>
              Creates the state transitions matrix and the
              initial state probabilities for this topology.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.Custom.States">
            <summary>
              Gets the number of states in this topology.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.Custom.Initial">
            <summary>
              Gets the initial state probabilities.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.Custom.Transitions">
            <summary>
              Gets the state-transitions matrix.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.TStudent">
            <summary>
              Generalized T-Student Kernel.
            </summary>
            <remarks>
              The Generalized T-Student Kernel is a Mercel Kernel and thus forms
              a positive semi-definite Kernel matrix (Boughorbel, 2004). It has
              a similar form to the <see cref="T:Accord.Statistics.Kernels.Multiquadric">Inverse Multiquadric Kernel.</see>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.TStudent.#ctor(System.Int32)">
            <summary>
              Constructs a new Generalized T-Student Kernel.
            </summary>
            <param name="degree">The kernel's degree.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.TStudent.Function(System.Double[],System.Double[])">
            <summary>
              Generalized T-Student Kernel function.
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.TStudent.Degree">
            <summary>
              Gets or sets the degree of this kernel.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Sparse.SparseGaussian">
            <summary>
              Sparse Gaussian Kernel.
            </summary>
            <remarks>
            <para>
              The Gaussian kernel requires tuning for the proper value of σ. Manual tuning or brute
              force search are alternative approaches. An brute force technique could involve
              stepping through a range of values for σ, perhaps in a gradient ascent optimization,
              seeking optimal performance of a model with training data.</para>
            <para>
              Regardless of the method utilized to find a proper value for σ, this type of model
              validation is common and necessary when using the gaussian kernel. Although this 
              approach is feasible with supervised learning, it is much more difficult to tune σ
              for unsupervised learning methods.</para>
               
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://people.revoledu.com/kardi/tutorial/Regression/KernelRegression/Kernel.htm">
                   http://people.revoledu.com/kardi/tutorial/Regression/KernelRegression/Kernel.htm</a></description></item>
               </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseGaussian.#ctor(System.Double)">
            <summary>
              Constructs a new Sparse Gaussian Kernel
            </summary>
            <param name="sigma">The standard deviation for the Gaussian distribution.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseGaussian.Function(System.Double[],System.Double[])">
            <summary>
            Gaussian Kernel function.
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseGaussian.Distance(System.Double[],System.Double[])">
            <summary>
            Computes the distance in input space
            between two points given in feature space.
            </summary>
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            <returns>
            Distance between <c>x</c> and <c>y</c> in input space.
            </returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Sparse.SparseGaussian.Sigma">
            <summary>
              Gets or sets the sigma value for the kernel. When setting
              sigma, gamma gets updated accordingly (gamma = 0.5*/sigma^2).
            </summary>
        </member>
        <member name="P:Accord.Statistics.Kernels.Sparse.SparseGaussian.Gamma">
            <summary>
              Gets or sets the gamma value for the kernel. When setting
              gamma, sigma gets updated accordingly (gamma = 0.5*/sigma^2).
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Multiquadric">
            <summary>
              Multiquadric (and inverse multiquadric) Kernel.
            </summary>
            <remarks>
              The multiquadric kernel is only positive semi-definite.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Multiquadric.#ctor(System.Boolean,System.Double)">
            <summary>
              Constructs a new Multiquadric Kernel.
            </summary>
            <param name="inverse">True for the Inverse Multiquadric Kernel, false otherwise.</param>
            <param name="constant">The constant term theta.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Multiquadric.#ctor">
            <summary>
              Constructs a new Multiquadric Kernel.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Kernels.Multiquadric.Function(System.Double[],System.Double[])">
            <summary>
              (Inverse) Multiquadric Kernel function.
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Multiquadric.Constant">
            <summary>
              Gets or sets the kernel's constant value.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Kernels.Multiquadric.Inverse">
            <summary>
              Gets or sets whether this is a standard
              or inverse multi-quadric kernel.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Gaussian">
            <summary>
              Gaussian Kernel.
            </summary>
            <remarks>
            <para>
              The Gaussian kernel requires tuning for the proper value of σ. Manual tuning or brute
              force search are alternative approaches. An brute force technique could involve
              stepping through a range of values for σ, perhaps in a gradient ascent optimization,
              seeking optimal performance of a model with training data.</para>
            <para>
              Regardless of the method utilized to find a proper value for σ, this type of model
              validation is common and necessary when using the gaussian kernel. Although this 
              approach is feasible with supervised learning, it is much more difficult to tune σ
              for unsupervised learning methods.</para>
               
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://people.revoledu.com/kardi/tutorial/Regression/KernelRegression/Kernel.htm">
                   http://people.revoledu.com/kardi/tutorial/Regression/KernelRegression/Kernel.htm</a></description></item>
               </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.#ctor(System.Double)">
            <summary>
              Constructs a new Gaussian Kernel
            </summary>
            <param name="sigma">The standard deviation for the Gaussian distribution.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.Function(System.Double[],System.Double[])">
            <summary>
              Gaussian Kernel function.
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.Distance(System.Double[],System.Double[])">
            <summary>
              Computes the distance in input space
              between two points given in feature space.
            </summary>
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            <returns>Distance between <c>x</c> and <c>y</c> in input space.</returns>
        </member>
        <member name="M:Accord.Statistics.Kernels.Gaussian.Distance(System.Double)">
            <summary>
              Computes the distance in input space given
              a distance computed in feature space.
            </summary>
            <param name="df">Distance in feature space.</param>
            <returns>Distance in input space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Gaussian.Sigma">
            <summary>
              Gets or sets the sigma value for the kernel. When setting
              sigma, gamma gets updated accordingly (gamma = 0.5*/sigma^2).
            </summary>
        </member>
        <member name="P:Accord.Statistics.Kernels.Gaussian.Gamma">
            <summary>
              Gets or sets the gamma value for the kernel. When setting
              gamma, sigma gets updated accordingly (gamma = 0.5*/sigma^2).
            </summary>
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.NormalOptions">
            <summary>
              Normal distribution estimation options.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.NormalOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.NormalOptions"/> class.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.NormalOptions.Regularization">
            <summary>
              Gets or sets the regularization step to
              avoid singular or non-positive definite
              covariance matrices. Default is 0.
            </summary>
            <value>The regularization step.</value>
        </member>
        <member name="T:Accord.Statistics.Distributions.Fitting.MixtureOptions">
            <summary>
              Mixture distribution estimation options.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.MixtureOptions.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.MixtureOptions"/> class.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.MixtureOptions.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.MixtureOptions"/> class.
            </summary>
            <param name="threshold">The convergence criterion for the
              Expectation-Maximization algorithm. Default is 1e-3.</param>
        </member>
        <member name="M:Accord.Statistics.Distributions.Fitting.MixtureOptions.#ctor(System.Double,Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Fitting.MixtureOptions"/> class.
            </summary>
            <param name="threshold">The convergence criterion for the
              Expectation-Maximization algorithm. Default is 1e-3.</param>
            <param name="innerOptions">The fitting options for the inner
              component distributions of the mixture density.</param>
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.MixtureOptions.Threshold">
            <summary>
              Gets or sets the convergence criterion for the
              Expectation-Maximization algorithm. Default is 1e-3.
            </summary>
            <value>The convergence threshold.</value>
        </member>
        <member name="P:Accord.Statistics.Distributions.Fitting.MixtureOptions.InnerOptions">
            <summary>
              Gets or sets the fitting options for the inner
              component distributions of the mixture density.
            </summary>
            <value>The fitting options for inner distributions.</value>
        </member>
        <member name="T:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic">
            <summary>
              Receiver Operating Characteristic (ROC) Curve.
            </summary>
            <remarks>
            <para>
              In signal detection theory, a receiver operating characteristic (ROC), or simply
              ROC curve, is a graphical plot of the sensitivity vs. (1 − specificity) for a 
              binary classifier system as its discrimination threshold is varied. </para>
            <para>
              This package does not attempt to fit a curve to the obtained points. It just
              computes the area under the ROC curve directly using the trapezoidal rule.</para>  
            <para>
              Also note that the curve construction algorithm uses the convention that a 
              higher test value represents a positive for a condition while computing
              sensitivity and specificity values.</para>  
             
            <para>
              References: 
              <list type="bullet">
                <item><description>
                  http://en.wikipedia.org/wiki/Receiver_operating_characteristic</description></item>
                <item><description>
                  http://www.anaesthetist.com/mnm/stats/roc/Findex.htm</description></item>
                <item><description>
                  http://radiology.rsna.org/content/148/3/839.full.pdf</description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.#ctor(System.Double[],System.Double[])">
            <summary>
              Constructs a new Receiver Operating Characteristic model
            </summary>
            <param name="measurement">
              An array of binary values. Typically represented as 0 and 1, or -1 and 1,
              indicating negative and positive cases, respectively. The maximum value
              will be treated as the positive case, and the lowest as the negative.</param>
            <param name="prediction">
              An array of continuous values trying to approximate the measurement array.
            </param>
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Compute(System.Int32)">
            <summary>
              Computes a n-points ROC curve.
            </summary>
            <remarks>
              Each point in the ROC curve will have a threshold increase of
              1/npoints over the previous point, starting at zero.
            </remarks>
            <param name="points">The number of points for the curve.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Compute(System.Double)">
            <summary>
              Computes a ROC curve with 1/increment points
            </summary>
            <param name="increment">The increment over the previous point for each point in the curve.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Compute(System.Double,System.Boolean)">
            <summary>
              Computes a ROC curve with 1/increment points
            </summary>
            <param name="increment">The increment over the previous point for each point in the curve.</param>
            <param name="forceOrigin">True to force the inclusion of the (0,0) point, false otherwise. Default is false.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Compute(System.Double[])">
            <summary>
              Computes a ROC curve with the given increment points
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.ComputePoint(System.Double)">
            <summary>
              Computes a single point of a ROC curve using the given cutoff value.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Compare(Accord.Statistics.Analysis.ReceiverOperatingCharacteristic,System.Double)">
            <summary>
              Compares two ROC curves.
            </summary>
            <param name="curve">The curve to compare against.</param>
            <param name="correlation">The amount of correlation between the two curves.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this curve.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this curve.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.calculateAreaUnderCurve">
            <summary>
              Calculates the area under the ROC curve using the trapezium method.
            </summary>
            <remarks>
              The area under a ROC curve can never be less than 0.50. If the area is first calculated as
              less than 0.50, the definition of abnormal will be reversed from a higher test value to a
              lower test value.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.calculateStandardError">
            <summary>
              Calculates the standard error associated with this curve
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Points">
            <summary>
              Gets the points of the curve.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Positives">
            <summary>
              Gets the number of actual positive cases.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Negatives">
            <summary>
              Gets the number of actual negative cases.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Observations">
            <summary>
              Gets the number of cases (observations) being analyzed.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Area">
            <summary>
             The area under the ROC curve. Also known as AUC-ROC.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristic.Error">
            <summary>
              Calculates the Standard Error associated with this ROC curve.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.ReceiverOperatingCharacteristicPoint">
            <summary>
              Object to hold information about a Receiver Operating Characteristic Curve Point
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.ConfusionMatrix">
             <summary>
               Confusion Matrix.
             </summary>
             <example>
               <code>
               // The correct and expected output values (as confirmed by a Gold
               //  standard rule, actual experiment or true verification)
               int[] expected = { 0, 0, 1, 0, 1, 0, 0, 0, 0, 0 };
               
               // The values as predicted by the decision system or
               //  the test whose performance is being measured.
               int[] predicted = { 0, 0, 0, 1, 1, 0, 0, 0, 0, 1 };
               
               
               // In this test, 1 means positive, 0 means negative
               int positiveValue = 1;
               int negativeValue = 0;
               
               // Create a new confusion matrix using the given parameters
               ConfusionMatrix matrix = new ConfusionMatrix(predicted, expected,
                   positiveValue, negativeValue);
            
               // At this point,
               //   True Positives should be equal to 1;
               //   True Negatives should be equal to 6;
               //   False Negatives should be equal to 1;
               //   False Positives should be equal to 2.
               </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Analysis.ConfusionMatrix.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Constructs a new Confusion Matrix.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.ConfusionMatrix.#ctor(System.Boolean[],System.Boolean[])">
            <summary>
              Constructs a new Confusion Matrix.
            </summary>
            <param name="predicted">The values predicted by the model.</param>
            <param name="expected">The actual, truth values from the data.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.ConfusionMatrix.#ctor(System.Int32[],System.Int32[],System.Int32)">
            <summary>
              Constructs a new Confusion Matrix.
            </summary>
            <param name="predicted">The values predicted by the model.</param>
            <param name="expected">The actual, truth values from the data.</param>
            <param name="positiveValue">The integer label which identifies a value as positive.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.ConfusionMatrix.#ctor(System.Int32[],System.Int32[],System.Int32,System.Int32)">
            <summary>
              Constructs a new Confusion Matrix.
            </summary>
            <param name="predicted">The values predicted by the model.</param>
            <param name="expected">The actual, truth values from the data.</param>
            <param name="positiveValue">The integer label which identifies a value as positive.</param>
            <param name="negativeValue">The integer label which identifies a value as negative.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.ConfusionMatrix.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representing this confusion matrix.
            </summary>
            <returns>
            A <see cref="T:System.String"/> representing this confusion matrix.
            </returns>
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.Observations">
            <summary>
              Gets the number of observations for this matrix
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.ActualPositives">
            <summary>
              Gets the number of actual positives.
            </summary>
            <remarks>
              The number of positives cases can be computed by
              taking the sum of true positives and false negatives.
            </remarks>
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.ActualNegatives">
            <summary>
              Gets the number of actual negatives
            </summary>
            <remarks>
              The number of negatives cases can be computed by
              taking the sum of true negatives and false positives.
            </remarks>
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.PredictedPositives">
            <summary>
              Gets the number of predicted positives.
            </summary>
            <remarks>
              The number of cases predicted as positive by the
              test. This value can be computed by adding the
              true positives and false positives.
            </remarks>
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.PredictedNegatives">
            <summary>
              Gets the number of predicted negatives.
            </summary>
            <remarks>
              The number of cases predicted as negative by the
              test. This value can be computed by adding the
              true negatives and false negatives.
            </remarks>
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.TruePositives">
            <summary>
              Cases correctly identified by the system as positives.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.TrueNegatives">
            <summary>
              Cases correctly identified by the system as negatives.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.FalsePositives">
            <summary>
              Cases incorrectly identified by the system as positives.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.FalseNegatives">
            <summary>
              Cases incorrectly identified by the system as negatives.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.Sensitivity">
            <summary>
              Sensitivity, also known as True Positive Rate
            </summary>
            <remarks>
              The Sensitivity is calculated as <c>TPR = TP / (TP + FN)</c>.
            </remarks>
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.Specificity">
            <summary>
              Specificity, also known as True Negative Rate
            </summary>
            <remarks>
              The Specificity is calculated as <c>TNR = TN / (FP + TN)</c>.
              It can also be calculated as: <c>TNR = (1-False Positive Rate)</c>.
            </remarks>
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.Efficiency">
            <summary>
             Efficiency, the arithmetic mean of sensitivity and specificity
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.Accuracy">
            <summary>
              Accuracy, or raw performance of the system
            </summary>
            <remarks>
              The Accuracy is calculated as 
              <c>ACC = (TP + TN) / (P + N).</c>
            </remarks>
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.PositivePredictiveValue">
            <summary>
              Positive Predictive Value, also known as Positive Precision
            </summary>
            <remarks>
            <para>
              The Positive Predictive Value tells us how likely is 
              that a patient has a disease, given that the test for
              this disease is positive.</para>
            <para>
              The Positive Predictive Rate is calculated as
              <c>PPV = TP / (TP + FP)</c>.</para>
            </remarks>
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.NegativePredictiveValue">
            <summary>
              Negative Predictive Value, also known as Negative Precision
            </summary>
            <remarks>
            <para>
              The Negative Predictive Value tells us how likely it is
              that the disease is NOT present for a patient, given that
              the patient's test for the disease is negative.</para>
            <para>
              The Negative Predictive Value is calculated as 
              <c>NPV = TN / (TN + FN)</c>.</para> 
            </remarks>
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.FalsePositiveRate">
            <summary>
              False Positive Rate, also known as false alarm rate.
            </summary>
            <remarks>
            <para>
              The rate of false alarms in a test.</para>
            <para>
              The False Positive Rate can be calculated as
              <c>FPR = FP / (FP + TN)</c> or <c>FPR = (1-specifity)</c>.
            </para>
            </remarks>
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.FalseDiscoveryRate">
            <summary>
              False Discovery Rate, or the expected false positive rate.
            </summary>
            <remarks>
            <para>
              The False Discovery Rate is actually the expected false positive rate.</para>
            <para>
              For example, if 1000 observations were experimentally predicted to
              be different, and a maximum FDR for these observations was 0.10, then
              100 of these observations would be expected to be false positives.</para>
            <para>
              The False Discovery Rate is calculated as
              <c>FDR = FP / (FP + TP)</c>.</para>
            </remarks>
        </member>
        <member name="P:Accord.Statistics.Analysis.ConfusionMatrix.MatthewsCorrelationCoefficient">
            <summary>
              Matthews Correlation Coefficient, also known as Phi coefficient
            </summary>
            <remarks>
              A coefficient of +1 represents a perfect prediction, 0 an
              average random prediction and −1 an inverse prediction.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristicPoint.#ctor(System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Constructs a new Receiver Operating Characteristic point.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.ReceiverOperatingCharacteristicPoint.ToString">
            <summary>
              Returns a System.String that represents the current ReceiverOperatingCharacteristicPoint.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.ReceiverOperatingCharacteristicPoint.Cutoff">
            <summary>
              Gets the cutoff value (discrimination threshold) for this point.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.ReceiverOperatingCharacteristicPointCollection">
            <summary>
              Represents a Collection of Receiver Operating Characteristic (ROC) Curve points.
              This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.LinearDiscriminantAnalysis">
            <summary>
              Linear Discriminant Analysis (LDA).
            </summary>
            <remarks>
            <para>
              Linear Discriminant Analysis (LDA) is a method of finding such a linear
              combination of variables which best separates two or more classes.</para>
            <para>
              In itself LDA is not a classification algorithm, although it makes use of class
              labels. However, the LDA result is mostly used as part of a linear classifier.
              The other alternative use is making a dimension reduction before using nonlinear
              classification algorithms.</para>
            <para>
              It should be noted that several similar techniques (differing in requirements to the sample)
              go together under the general name of Linear Discriminant Analysis. Described below is one of
              these techniques with only two requirements:</para>  
              <list type="number">
                <item><description>The sample size shall exceed the number of variables, and </description></item>
                <item><description>Classes may overlap, but their centers shall be distant from each other. </description></item>
              </list>
              
            <para>
              Moreover, LDA requires the following assumptions to be true:</para>
              <list type="bullet">
                <item><description>Independent subjects.</description></item>
                <item><description>Normality: the variance-covariance matrix of the
                predictors is the same in all groups.</description></item>
              </list>
              
            <para>
              If the latter assumption is violated, it is common to use quadratic discriminant analysis in
              the same manner as linear discriminant analysis instead.</para>
              
            <para>
               References:
               <list type="bullet">
                 <item><description>
                   http://cmp.felk.cvut.cz/cmp/software/stprtool/manual/linear/extraction/list/lda.html</description></item>
                 <item><description>
                   http://research.cs.tamu.edu/prism/lectures/pr/pr_l10.pdf</description></item>
                </list></para>     
            </remarks>
            
            <example>
              <code>
              // Create some sample input data
            
              // This is the same data used in the example by Gutierrez-Osuna
              // http://research.cs.tamu.edu/prism/lectures/pr/pr_l10.pdf
            
              double[,] inputs = 
              {
                {  4,  1 }, // Class 1
                {  2,  4 },
                {  2,  3 },
                {  3,  6 },
                {  4,  4 },
            
                {  9, 10 }, // Class 2
                {  6,  8 },
                {  9,  5 },
                {  8,  7 },
                { 10,  8 }
              };
            
              int[] output = 
              {
                1, 1, 1, 1, 1, // Class labels for the input vectors
                2, 2, 2, 2, 2
              };
            
              // Create a new Linear Discriminant Analysis object
              var lda = new LinearDiscriminantAnalysis(inputs, output);
            
              // Compute the analysis
              lda.Compute();
            
              // Project the input data into discriminant space
              double[,] projection = lda.Transform(inputs);
              
              </code>
              
            </example>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IDiscriminantAnalysis">
            <summary>
              Common interface for discriminant analysis.
            </summary>
            
            <remarks>
            <para>
              Discriminant analysis attempt to express one categorical dependent variable
              as a combinations of other features or measurements.</para>
            <para>
              When the dependent variable is a numerical quantity, the class of analysis methods
              is known as <see cref="T:Accord.Statistics.Analysis.IRegressionAnalysis">regression analysis</see>.</para>  
            </remarks>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IDiscriminantAnalysis.Classifications">
            <summary>
              Gets the classification labels (the dependent variable)
              for each of the source input points.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.#ctor(System.Double[0:,0:],System.Int32[])">
            <summary>
              Constructs a new Linear Discriminant Analysis object.
            </summary>
            <param name="inputs">The source data to perform analysis. The matrix should contain
            variables as columns and observations of each variable as rows.</param>
            <param name="outputs">The labels for each observation row in the input matrix.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Compute">
            <summary>
              Computes the Multi-Class Linear Discriminant Analysis algorithm.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Transform(System.Double[0:,0:])">
            <summary>Projects a given matrix into discriminant space.</summary>
            <param name="data">The matrix to be projected.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Transform(System.Double[0:,0:],System.Int32)">
            <summary>
              Projects a given matrix into latent discriminant variable space.
            </summary>
            <param name="data">The matrix to be projected.</param>
            <param name="dimensions">
              The number of discriminants to use in the projection.
            </param>
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Transform(System.Double[])">
            <summary>Projects a given point into discriminant space.</summary>
            <param name="data">The point to be projected.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Transform(System.Double[],System.Int32)">
            <summary>Projects a given point into latent discriminant variable space.</summary>
            <param name="data">The point to be projected.</param>
            <param name="discriminants">The number of discriminant variables to use in the projection.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.GetNumberOfDimensions(System.Single)">
            <summary>
              Returns the minimum number of discriminant space dimensions (discriminant
              factors) required to represent a given percentile of the data.
            </summary>
            <param name="threshold">The percentile of the data requiring representation.</param>
            <returns>The minimal number of dimensions required.</returns>
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Classify(System.Double[])">
            <summary>
              Classifies a new instance into one of the available classes.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Classify(System.Double[],System.Double[]@)">
            <summary>
              Classifies a new instance into one of the available classes.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Classify(System.Double[][])">
            <summary>
              Classifies new instances into one of the available classes.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.DiscriminantFunction(System.Int32,System.Double[])">
            <summary>
              Gets the discriminant function output for class c.
            </summary>
            <param name="c">The class index.</param>
            <param name="projection">The projected input.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.CreateDiscriminants">
            <summary>
              Creates additional information about principal components.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Source">
            <summary>Returns the original supplied data to be analyzed.</summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Result">
            <summary>
              Gets the resulting projection of the source data given on
              the creation of the analysis into discriminant space.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Classifications">
            <summary>
              Gets the original classifications (labels) of the source data
              given on the moment of creation of this analysis object.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Means">
            <summary>Gets the mean of the original data given at method construction.</summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.StandardDeviations">
            <summary>Gets the standard mean of the original data given at method construction.</summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.ScatterWithinClass">
            <summary>Gets the Within-Class Scatter Matrix for the data.</summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.ScatterBetweenClass">
            <summary>Gets the Between-Class Scatter Matrix for the data.</summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.ScatterMatrix">
            <summary>Gets the Total Scatter Matrix for the data.</summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.DiscriminantMatrix">
            <summary>
              Gets the Eigenvectors obtained during the analysis,
              composing a basis for the discriminant factor space.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Eigenvalues">
            <summary>
              Gets the Eigenvalues found by the analysis associated
              with each vector of the ComponentMatrix matrix.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.DiscriminantProportions">
            <summary>Gets the level of importance each discriminant factor has in
            discriminant space. Also known as amount of variance explained.</summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.CumulativeProportions">
            <summary>The cumulative distribution of the discriminants factors proportions.
            Also known as the cumulative energy of the first dimensions of the discriminant
            space or as the amount of variance explained by those dimensions.</summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Discriminants">
            <summary>Gets the discriminant factors in a object-oriented fashion.</summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.Classes">
            <summary>
              Gets information about the distinct classes in the analyzed data.
            </summary>
              
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.ClassScatter">
            <summary>
              Gets the Scatter matrix for each class.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.ClassMeans">
            <summary>
              Gets the Mean vector for each class.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.ClassStandardDeviations">
            <summary>
              Gets the Standard Deviation vector for each class.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LinearDiscriminantAnalysis.ClassCount">
            <summary>
              Gets the observation count for each class.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.DiscriminantAnalysisClass">
            <summary>
              Represents a class found during Discriminant Analysis, allowing it to
              be bound to controls like the DataGridView.
              
              This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.DiscriminantAnalysisClass.#ctor(Accord.Statistics.Analysis.LinearDiscriminantAnalysis,System.Int32,System.Int32)">
            <summary>
              Creates a new Class representation
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.DiscriminantAnalysisClass.DiscriminantFunction(System.Double[])">
            <summary>
              Discriminant function for the class.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DiscriminantAnalysisClass.Index">
            <summary>
              Gets the Index of this class on the original analysis collection.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DiscriminantAnalysisClass.Number">
            <summary>
              Gets the number labelling this class.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DiscriminantAnalysisClass.Prevalence">
            <summary>
              Gets the prevalence of the class on the original data set.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DiscriminantAnalysisClass.Mean">
            <summary>
              Gets the class' mean vector.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DiscriminantAnalysisClass.StandardDeviation">
            <summary>
              Gets the class' standard deviation vector.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DiscriminantAnalysisClass.Scatter">
            <summary>
              Gets the Scatter matrix for this class.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DiscriminantAnalysisClass.Indexes">
            <summary>
              Gets the indexes of the rows in the original data which belong to this class.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DiscriminantAnalysisClass.Subset">
            <summary>
              Gets the subset of the original data spawned by this class.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.DiscriminantAnalysisClass.Count">
            <summary>
              Gets the number of observations inside this class.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.Discriminant">
            <summary>
              Represents a discriminant factor found during Discriminant Analysis,
              allowing it to be bound to controls like the DataGridView.
              
              This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.Discriminant.#ctor(Accord.Statistics.Analysis.LinearDiscriminantAnalysis,System.Int32)">
            <summary>
              Creates a new discriminant factor representation.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.Discriminant.Index">
            <summary>
              Gets the index of this discriminant factor
              on the original analysis collection.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.Discriminant.Eigenvector">
            <summary>
              Gets the Eigenvector for this discriminant factor.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.Discriminant.Eigenvalue">
            <summary>
              Gets the Eigenvalue for this discriminant factor.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.Discriminant.Proportion">
            <summary>
              Gets the proportion, or amount of information explained by this discriminant factor.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.Discriminant.CumulativeProportion">
            <summary>
              Gets the cumulative proportion of all discriminant factors until this factor.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.DiscriminantCollection">
            <summary>
              Represents a collection of Discriminants factors found in the Discriminant Analysis.
              
              This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.DiscriminantAnalysisClassCollection">
            <summary>
              Represents a collection of classes found in the Discriminant Analysis.
              
              This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IndependentComponentAlgorithm">
            <summary>
              FastICA's algorithms to be used in Independent Component Analysis.
            </summary>
        </member>
        <member name="F:Accord.Statistics.Analysis.IndependentComponentAlgorithm.Deflation">
            <summary>
              Deflation algorithm.
            </summary>
            <remarks>
              In the deflation algorithm, components are found one
              at a time through a series of sequential operations.
              It is particularly useful when only a small number of
              components should be computed from the input data set.
            </remarks>
        </member>
        <member name="F:Accord.Statistics.Analysis.IndependentComponentAlgorithm.Parallel">
            <summary>
              Symmetric parallel algorithm (default).
            </summary>
            <remarks>
              In the parallel (symmetric) algorithm, all components
              are computed at once. This is the default algorithm for
              <seealso cref="T:Accord.Statistics.Analysis.IndependentComponentAnalysis">Independent
              Component Analysis</seealso>.
            </remarks>
        </member>
        <member name="T:Accord.Statistics.Analysis.IndependentComponentAnalysis">
            <summary>
              Independent component analysis (ICA) is a computational method for separating
              a multivariate signal (or mixture) into its additive subcomponents, supposing
              the mutual statistical independence of the non-Gaussian source signals.
            </summary>
            
            <remarks>
            <para>
              When the independence assumption is correct, blind ICA separation of a mixed
              signal gives very good results. It is also used for signals that are not supposed
              to be generated by a mixing for analysis purposes.</para>  
            <para>
              A simple application of ICA is the "cocktail party problem", where the underlying
              speech signals are separated from a sample data consisting of people talking
              simultaneously in a room. Usually the problem is simplified by assuming no time
              delays or echoes.</para>
            <para>
              An important note to consider is that if N sources are present, at least N
              observations (e.g. microphones) are needed to get the original signals.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Hyvärinen,A (1999). Fast and Robust Fixed-Point Algorithms for Independent Component
                  Analysis. IEEE Transactions on Neural Networks, 10(3),626-634. Available on: 
                  <a href="http://cran.r-project.org/web/packages/fastICA/index.html">
                  http://cran.r-project.org/web/packages/fastICA/index.html</a></description></item>
             </list></para>  
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.#ctor(System.Double[0:,0:])">
            <summary>Constructs a new Independent Component Analysis.</summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.#ctor(System.Double[0:,0:],Accord.Statistics.Analysis.IndependentComponentAlgorithm)">
            <summary>Constructs a new Independent Component Analysis.</summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.#ctor(System.Double[0:,0:],Accord.Statistics.Analysis.AnalysisMethod)">
            <summary>Constructs a new Independent Component Analysis.</summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.#ctor(System.Double[0:,0:],Accord.Statistics.Analysis.AnalysisMethod,Accord.Statistics.Analysis.IndependentComponentAlgorithm)">
            <summary>Constructs a new Independent Component Analysis.</summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.Compute">
            <summary>
              Computes the Independent Component Analysis algorithm.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.Compute(System.Int32)">
            <summary>
              Computes the Independent Component Analysis algorithm.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.Separate(System.Double[0:,0:])">
            <summary>
              Separates a mixture into its components (demixing).
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.Separate(System.Single[][])">
            <summary>
              Separates a mixture into its components (demixing).
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.Combine(System.Double[0:,0:])">
            <summary>
              Combines components into a single mixture (mixing).
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.Combine(System.Single[][])">
            <summary>
              Combines components into a single mixture (mixing).
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.deflation(System.Double[0:,0:],System.Int32,System.Double[0:,0:])">
            <summary>
              Deflation iterative algorithm.
            </summary>
            <returns>
              Returns a matrix in which each row contains
              the mixing coefficients for each component.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.parallel(System.Double[0:,0:],System.Int32,System.Double[0:,0:])">
            <summary>
              Parallel (symmetric) iterative algorithm.
            </summary>
            <returns>
              Returns a matrix in which each row contains
              the mixing coefficients for each component.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.Adjust(System.Double[0:,0:],System.Boolean)">
            <summary>
              Adjusts a data matrix, centering and standardizing its values
              using the already computed column's means and standard deviations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponentAnalysis.Adjust(System.Single[][],System.Boolean)">
            <summary>
              Adjusts a data matrix, centering and standardizing its values
              using the already computed column's means and standard deviations.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.Source">
            <summary>
              Source data used in the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.Iterations">
            <summary>
              Gets or sets the maximum number of iterations 
              to perform. If zero, the method will run until
              convergence.
            </summary>
            <value>The iterations.</value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.Tolerance">
            <summary>
              Gets or sets the maximum absolute change in
              parameters between iterations that determine
              convergence.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.Result">
            <summary>
              Gets the resulting projection of the source
              data given on the creation of the analysis 
              into the space spawned by independent components.
            </summary>
            <value>The resulting projection in independent component space.</value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.MixingMatrix">
            <summary>
              Gets a matrix containing the mixing coefficients for
              the original source data being analyzed. Each column
              corresponds to an independent component.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.DemixingMatrix">
            <summary>
              Gets a matrix containing the unmixing coefficients for
              the original source data being analyzed. Each column
              corresponds to an independent component.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.WhiteningMatrix">
            <summary>
              Gets the whitening matrix used to transform
              the original data to have unit variance.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.Components">
            <summary>
              Gets the Independent Components in a object-oriented structure.
            </summary>
            <value>The collection of independent components.</value>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.Overwrite">
            <summary>
              Gets or sets whether calculations will be performed overwriting
              data in the original source matrix, using less memory.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.Algorithm">
            <summary>
             Gets or sets the <see cref="T:Accord.Statistics.Analysis.IndependentComponentAlgorithm">
             FastICA</see> algorithm used by the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponentAnalysis.Contrast">
            <summary>
              Gets or sets the <see cref="T:Accord.Statistics.Analysis.ContrastFunctions.IContrastFunction">
              Contrast function</see> to be used by the analysis.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.IndependentComponent">
            <summary>
              Represents an Independent Component found in the Independent Component 
              Analysis, allowing it to be directly bound to controls like the DataGridView.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.IndependentComponent.#ctor(Accord.Statistics.Analysis.IndependentComponentAnalysis,System.Int32)">
            <summary>
              Creates an independent component representation.
            </summary>
            <param name="analysis">The analysis to which this component belongs.</param>
            <param name="index">The component index.</param>
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponent.Index">
            <summary>
              Gets the Index of this component on the original component collection.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponent.Analysis">
            <summary>
              Returns a reference to the parent analysis object.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponent.MixingVector">
            <summary>
              Gets the mixing vector for the current independent component.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponent.DemixingVector">
            <summary>
              Gets the unmixing vector for the current independent component.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.IndependentComponent.WhiteningVector">
            <summary>
              Gets the whitening factor for the current independent component.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.IndependentComponentCollection">
            <summary>
              Represents a Collection of Independent Components found in the
              Independent Component Analysis. This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.ContrastFunctions.IContrastFunction">
            <summary>
              Common interface for contrast functions.
            </summary>
            <remarks>
              Contrast functions are used as objective functions in
              neg-entropy calculations.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ContrastFunctions.IContrastFunction.Evaluate(System.Double[],System.Double[],System.Double[])">
            <summary>
              Contrast function.
            </summary>
            <param name="x">The vector of observations.</param>
            <param name="output">At method's return, this parameter
              should contain the evaluation of function over the vector
              of observations <paramref name="x"/>.</param>
            <param name="derivative">At method's return, this parameter
              should contain the evaluation of function derivative over 
              the vector of observations <paramref name="x"/>.</param>
        </member>
        <member name="T:Accord.Statistics.Analysis.ContrastFunctions.Exponential">
            <summary>
              Exponential contrast function.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.ContrastFunctions.Exponential.#ctor(System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Analysis.ContrastFunctions.Exponential"/> class.
            </summary>
            <param name="alpha">The exponential alpha constant. Default is 1.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.ContrastFunctions.Exponential.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.Statistics.Analysis.ContrastFunctions.Exponential"/> class.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.ContrastFunctions.Exponential.Evaluate(System.Double[],System.Double[],System.Double[])">
            <summary>
            Contrast function.
            </summary>
            <param name="x">The vector of observations.</param>
            <param name="output">At method's return, this parameter
            should contain the evaluation of function over the vector
            of observations <paramref name="x"/>.</param>
            <param name="derivative">At method's return, this parameter
            should contain the evaluation of function derivative over
            the vector of observations <paramref name="x"/>.</param>
        </member>
        <member name="P:Accord.Statistics.Analysis.ContrastFunctions.Exponential.Alpha">
            <summary>
              Gets the exponential alpha constant.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.ContrastFunctions.Logcosh">
            <summary>
              Log-cosh (Hyperbolic Tangent) contrast function.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.ContrastFunctions.Logcosh.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.Statistics.Analysis.ContrastFunctions.Logcosh"/> class.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.ContrastFunctions.Logcosh.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.Statistics.Analysis.ContrastFunctions.Logcosh"/> class.
            </summary>
            <param name="alpha">The log-cosh alpha constant. Default is 1.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.ContrastFunctions.Logcosh.Evaluate(System.Double[],System.Double[],System.Double[])">
            <summary>
            Contrast function.
            </summary>
            <param name="x">The vector of observations.</param>
            <param name="output">At method's return, this parameter
            should contain the evaluation of function over the vector
            of observations <paramref name="x"/>.</param>
            <param name="derivative">At method's return, this parameter
            should contain the evaluation of function derivative over
            the vector of observations <paramref name="x"/>.</param>
        </member>
        <member name="P:Accord.Statistics.Analysis.ContrastFunctions.Logcosh.Alpha">
            <summary>
              Gets the exponential log-cosh constant.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.ContrastFunctions.Kurtosis">
            <summary>
              Kurtosis contrast function.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.ContrastFunctions.Kurtosis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.Statistics.Analysis.ContrastFunctions.Kurtosis"/> class.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.ContrastFunctions.Kurtosis.Evaluate(System.Double[],System.Double[],System.Double[])">
            <summary>
            Contrast function.
            </summary>
            <param name="x">The vector of observations.</param>
            <param name="output">At method's return, this parameter
            should contain the evaluation of function over the vector
            of observations <paramref name="x"/>.</param>
            <param name="derivative">At method's return, this parameter
            should contain the evaluation of function derivative over
            the vector of observations <paramref name="x"/>.</param>
        </member>
        <member name="T:Accord.Statistics.Moving.MovingNormalStatistics">
            <summary>
              Moving-window statistics.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Moving.IMovingStatistics">
            <summary>
              Common interface for moving-window statistics.
            </summary>
            <remarks>
              Moving-window statistics such as moving average and moving variance,
              are a type of finite impulse response filters used to analyze a set
              of data points by creating a series of averages of different subsets
              of the full data set.
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Running.IRunningStatistics">
            <summary>
              Common interface for running statistics.
            </summary>
            <remarks>
              Running statistics are measures computed as data becomes available.
              When using running statistics, there is no need to know the number of
              samples a priori, such as in the case of the direct <see cref="M:Accord.Statistics.Tools.Mean(System.Double[])"/>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Running.IRunningStatistics.Push(System.Double)">
            <summary>
              Registers the occurance of a value.
            </summary>
            <param name="value">The value to be registered.</param>
            
        </member>
        <member name="M:Accord.Statistics.Running.IRunningStatistics.Clear">
            <summary>
              Clears all measures previously computed.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Running.IRunningStatistics.Mean">
            <summary>
              Gets the current mean of the gathered values.
            </summary>
            <value>The mean of the values.</value>
            
        </member>
        <member name="P:Accord.Statistics.Running.IRunningStatistics.Variance">
            <summary>
              Gets the current variance of the gathered values.
            </summary>
            <value>The variance of the values.</value>
            
        </member>
        <member name="P:Accord.Statistics.Running.IRunningStatistics.StandardDeviation">
            <summary>
              Gets the current standard deviation of the gathered values.
            </summary>
            <value>The standard deviation of the values.</value>
            
        </member>
        <member name="P:Accord.Statistics.Moving.IMovingStatistics.Window">
            <summary>
              Gets the size of the window.
            </summary>
            <value>The window's size.</value>
        </member>
        <member name="P:Accord.Statistics.Moving.IMovingStatistics.Count">
            <summary>
              Gets the number of samples within the window.
            </summary>
            <value>The number of samples within the window.</value>
        </member>
        <member name="M:Accord.Statistics.Moving.MovingNormalStatistics.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Moving.MovingNormalStatistics"/> class.
            </summary>
            <param name="windowSize">The size of the moving window.</param>
        </member>
        <member name="M:Accord.Statistics.Moving.MovingNormalStatistics.Push(System.Double)">
            <summary>
              Pushes a value into the window.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Moving.MovingNormalStatistics.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Moving.MovingNormalStatistics.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Moving.MovingNormalStatistics.Clear">
            <summary>
              Removes all elements from the window and resets statistics.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Moving.MovingNormalStatistics.Sum">
            <summary>
            Gets the sum the values within the window.
            </summary>
            <value>The sum of values within the window.</value>
        </member>
        <member name="P:Accord.Statistics.Moving.MovingNormalStatistics.SumOfSquares">
            <summary>
            Gets the sum of squared values within the window.
            </summary>
            <value>The sum of squared values.</value>
        </member>
        <member name="P:Accord.Statistics.Moving.MovingNormalStatistics.Window">
            <summary>
            Gets the size of the window.
            </summary>
            <value>The window's size.</value>
        </member>
        <member name="P:Accord.Statistics.Moving.MovingNormalStatistics.Count">
            <summary>
            Gets the number of samples within the window.
            </summary>
            <value>The number of samples within the window.</value>
        </member>
        <member name="P:Accord.Statistics.Moving.MovingNormalStatistics.Mean">
            <summary>
            Gets the mean of the values within the window.
            </summary>
            <value>The mean of the values.</value>
        </member>
        <member name="P:Accord.Statistics.Moving.MovingNormalStatistics.Variance">
            <summary>
            Gets the variance of the values within the window.
            </summary>
            <value>The variance of the values.</value>
        </member>
        <member name="P:Accord.Statistics.Moving.MovingNormalStatistics.StandardDeviation">
            <summary>
            Gets the standard deviation of the values within the window.
            </summary>
            <value>The standard deviation of the values.</value>
        </member>
        <member name="T:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm">
            <summary>
              Forward-Backward algorithms for Hidden Markov Models.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Forward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[],System.Double[]@)">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Forward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[],System.Double@)">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Forward(Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel,System.Double[][],System.Double[]@)">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Forward(Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel,System.Double[][],System.Double@)">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Forward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[])">
            <summary>
              Computes Forward probabilities for a given hidden Markov model and a set of observations (no scaling).
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Backward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[],System.Double[])">
            <summary>
              Computes Backward probabilities for a given hidden Markov model and a set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Backward(Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel,System.Double[][],System.Double[])">
            <summary>
              Computes Backward probabilities for a given hidden Markov model and a set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ForwardBackwardAlgorithm.Backward(Accord.Statistics.Models.Markov.HiddenMarkovModel,System.Int32[])">
            <summary>
              Computes Backward probabilities for a given hidden Markov model and a set of observations (no scaling).
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Wave">
            <summary>
              Wave Kernel.
            </summary>
            <remarks>
              The Wave kernel is symmetric positive semi-definite (Huang, 2008).
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Wave.#ctor(System.Double)">
            <summary>
              Constructs a new Wave Kernel.
            </summary>
            <param name="sigma">Value for sigma.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Wave.Function(System.Double[],System.Double[])">
            <summary>
              Wave Kernel Function
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Wave.Sigma">
            <summary>
              Gets or sets the kernel's sigma value.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Precomputed">
            <summary>
              Precomputed Gram Matrix Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Precomputed.#ctor(System.Double[0:,0:])">
            <summary>
              Constructs a new Precomputed Matrix Kernel.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Kernels.Precomputed.Function(System.Double[],System.Double[])">
            <summary>
              Kernel function.
            </summary>
            <param name="x">An array containing a first element with the index for input vector <c>x</c>.</param>
            <param name="y">An array containing a first element with the index for input vector <c>y</c>.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Precomputed.Matrix">
            <summary>
              Gets or sets the precomputed Gram matrix for this kernel.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution">
            <summary>
              Multinomial probability distribution.
            </summary>
            <remarks>
              <para>The multinomial distribution is a generalization of the binomial
              distribution. The binomial distribution is the probability distribution
              of the number of "successes" in <c>n</c> independent 
              <see cref="T:Accord.Statistics.Distributions.Univariate.BernoulliDistribution">Bernoulli</see>
              trials, with the same probability of "success" on each trial.</para>
              
              <para>In a multinomial distribution, the analog of the
              <see cref="T:Accord.Statistics.Distributions.Univariate.BernoulliDistribution">Bernoulli distribution</see> is the
              <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution">categorical distribution</see>,
              where each trial results in exactly one of some fixed finite number
              <c>k</c> of possible outcomes, with probabilities <c>p1, ..., pk</c>
              and there are <c>n</c> independent trials.</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Multinomial_distribution">
                  http://en.wikipedia.org/wiki/Multinomial_distribution</a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution">
            <summary>
              Abstract class for multivariate discrete probability distributions.
            </summary>
            <remarks>
            <para>
              A probability distribution identifies either the probability of each value of an
              unidentified random variable (when the variable is discrete), or the probability
              of the value falling within a particular interval (when the variable is continuous).</para>
            <para>
              The probability distribution describes the range of possible values that a random
              variable can attain and the probability that the value of the random variable is
              within any (measurable) subset of that range.</para>  
            <para>
              The function describing the probability that a given discrete value will
              occur is called the probability function (or probability mass function,
              abbreviated PMF), and the function describing the cumulative probability
              that a given value or any value smaller than it will occur is called the
              distribution function (or cumulative distribution function, abbreviated CDF).</para>  
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Probability_distribution">
                  http://en.wikipedia.org/wiki/Probability_distribution</a></description></item>
                <item><description><a href="http://mathworld.wolfram.com/StatisticalDistribution.html">
                  http://mathworld.wolfram.com/StatisticalDistribution.html</a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.#ctor(System.Int32)">
            <summary>
              Constructs a new MultivariateDiscreteDistribution class.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Accord#Statistics#Distributions#IDistribution#DistributionFunction(System.Double[])">
            <summary>
            Gets the cumulative distribution function (cdf) for
            the this distribution evaluated at point <c>x</c>.
            </summary>
            <remarks>
            The Cumulative Distribution Function (CDF) describes the cumulative
            probability that a given value or any value smaller than it will occur.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Accord#Statistics#Distributions#IDistribution#ProbabilityFunction(System.Double[])">
            <summary>
              Gets the probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array,System.Double[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array,Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Accord#Statistics#Distributions#IDistribution#Fit(System.Array,System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.DistributionFunction(System.Int32[])">
            <summary>
              Gets the cumulative distribution function (cdf) for
              the this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range.</param>
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.ProbabilityMassFunction(System.Int32[])">
            <summary>
              Gets the probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range.</param>
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Fit(System.Double[][])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Fit(System.Double[][],System.Double[])">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Fit(System.Double[][],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">
              The array of observations to fit the model against. The array
              elements can be either of type double (for univariate data) or
              type double[] (for multivariate data).
            </param>
            <param name="weights">
              The weight vector containing the weight for each of the samples.</param>
            <param name="options">
              Optional arguments which may be used during fitting, such
              as regularization constants and additional parameters.</param>
            <remarks>
              Although both double[] and double[][] arrays are supported,
              providing a double[] for a multivariate distribution or a
              double[][] for a univariate distribution may have a negative
              impact in performance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Dimension">
            <summary>
              Gets the number of variables for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Variance">
            <summary>
              Gets the mean for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultivariateDiscreteDistribution.Covariance">
            <summary>
              Gets the variance for this distribution.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.#ctor(System.Int32,System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution"/> class.
            </summary>
            <param name="numberOfTrials">The total number of trials N.</param>
            <param name="probabilities">A vector containing the probabilities of seeing each of possible outcomes.</param>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.DistributionFunction(System.Int32[])">
            <summary>
            Gets the cumulative distribution function (cdf) for
            the this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">A single point in the distribution range.</param>
            <returns></returns>
            <remarks>
            The Cumulative Distribution Function (CDF) describes the cumulative
            probability that a given value or any value smaller than it will occur.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.ProbabilityMassFunction(System.Int32[])">
            <summary>
            Gets the probability mass function (pmf) for
            this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">A single point in the distribution range.</param>
            <returns>
            The probability of <c>x</c> occurring
            in the current distribution.
            </returns>
            <remarks>
            The Probability Mass Function (PMF) describes the
            probability that a given value <c>x</c> will occur.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
            Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">The array of observations to fit the model against. The array
            elements can be either of type double (for univariate data) or
            type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            <remarks>
            Although both double[] and double[][] arrays are supported,
            providing a double[] for a multivariate distribution or a
            double[][] for a univariate distribution may have a negative
            impact in performance.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.Probabilities">
            <summary>
              Gets the event probabilities associated with the trials.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.NumberOfTrials">
            <summary>
              Gets the number of Bernoulli trials N.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.Mean">
            <summary>
            Gets the mean for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.Variance">
            <summary>
            Gets the variance vector for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.MultinomialDistribution.Covariance">
            <summary>
            Gets the variance-covariance matrix for this distribution.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Circular">
            <summary>
              Set of statistics functions operating over a circular space.
            </summary>
            
            <remarks>
              This class represents collection of common functions used in
              statistics. The values are handled as belonging to a distribution
              defined over a circle, such as the <see cref="T:Accord.Statistics.Distributions.Univariate.VonMisesDistribution"/>.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Circular.Mean(System.Double[])">
            <summary>
              Computes the Mean of the given angles.
            </summary>
            <param name="angles">A double array containing the angles in radians.</param>
            <returns>The mean of the given angles.</returns>
        </member>
        <member name="M:Accord.Statistics.Circular.Variance(System.Double[])">
            <summary>
              Computes the Variance of the given angles.
            </summary>
            <param name="angles">A double array containing the angles in radians.</param>
            <returns>The variance of the given angles.</returns>
        </member>
        <member name="M:Accord.Statistics.Circular.Concentration(System.Double[])">
            <summary>
              Concentrations the Concentration of the given angles.
            </summary>
            <param name="angles">A double array containing the angles in radians.</param>
            <returns>
              The concentration (kappa) parameter of the <see cref="T:Accord.Statistics.Distributions.Univariate.VonMisesDistribution"/>
              for the given data.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Circular.Concentration(System.Double[],System.Double)">
            <summary>
              Concentrations the Concentration of the given angles.
            </summary>
            <param name="angles">A double array containing the angles in radians.</param>
            <param name="mean">The mean of the angles, if already known.</param>
            <returns>
              The concentration (kappa) parameter of the <see cref="T:Accord.Statistics.Distributions.Univariate.VonMisesDistribution"/>
              for the given data.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Circular.WeightedMean(System.Double[],System.Double[])">
            <summary>
              Computes the Weighted Mean of the given angles.
            </summary>
            <param name="angles">A double array containing the angles in radians.</param>
            <param name="weights">An unit vector containing the importance of each angle
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <returns>The mean of the given angles.</returns>
        </member>
        <member name="M:Accord.Statistics.Circular.WeightedConcentration(System.Double[],System.Double[])">
            <summary>
              Computes the Weighted Concentration of the given angles.
            </summary>
            <param name="angles">A double array containing the angles in radians.</param>
            <param name="weights">An unit vector containing the importance of each angle
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <returns>The mean of the given angles.</returns>
        </member>
        <member name="M:Accord.Statistics.Circular.WeightedConcentration(System.Double[],System.Double[],System.Double)">
            <summary>
              Computes the Weighted Concentration of the given angles.
            </summary>
            <param name="angles">A double array containing the angles in radians.</param>
            <param name="weights">An unit vector containing the importance of each angle
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <param name="mean">The mean of the angles, if already known.</param>
            <returns>The mean of the given angles.</returns>
        </member>
        <member name="M:Accord.Statistics.Circular.a1inv(System.Double)">
            <summary>
             Computes an approximation of the inverse modified Bessel
             function ratio <c>A(x) = I1(x)/I0(x)</c>.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.LogisticRegressionAnalysis">
            <summary>
              Logistic Regression Analysis
            </summary>
            <remarks>
            <para>
              The Logistic Regression Analysis tries to extract useful
              information about a logistic regression model. </para>
            
            <para>
              References:
              <list type="bullet">
                <item><description>
                  http://www.cs.cmu.edu/~ggordon/IRLS-example/logistic.m</description></item>
                <item><description>
                  http://userwww.sfsu.edu/~efc/classes/biol710/logistic/logisticreg.htm</description></item>
                <item><description>
                  http://www.stat.cmu.edu/~cshalizi/350/lectures/26/lecture-26.pdf</description></item>
                <item><description>
                  http://www.inf.ed.ac.uk/teaching/courses/lfd/lectures/logisticlearn-print.pdf</description></item>
              </list></para>  
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LogisticRegressionAnalysis.#ctor(System.Double[][],System.Double[])">
            <summary>
              Constructs a Logistic Regression Analysis.
            </summary>
            <param name="inputs">The input data for the analysis.</param>
            <param name="outputs">The output data for the analysis.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.LogisticRegressionAnalysis.#ctor(System.Double[][],System.Double[],System.String[],System.String)">
            <summary>
              Constructs a Logistic Regression Analysis.
            </summary>
            <param name="inputs">The input data for the analysis.</param>
            <param name="outputs">The output, binary data for the analysis.</param>
            <param name="inputNames">The names of the input variables.</param>
            <param name="outputName">The name of the output variable.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.LogisticRegressionAnalysis.GetLikelihoodRatio(Accord.Statistics.Models.Regression.LogisticRegression)">
            <summary>
              Gets the Log-Likelihood Ratio between this model and another model.
            </summary>
            <param name="model">Another logistic regression model.</param>
            <returns>The Likelihood-Ratio between the two models.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Compute">
            <summary>
              Computes the Logistic Regression Analysis.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Compute(System.Double)">
            <summary>
              Computes the Logistic Regression Analysis.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Compute(System.Double,System.Int32)">
            <summary>
              Computes the Logistic Regression Analysis.
            </summary>
            <remarks>The likelihood surface for the
              logistic regression learning is convex, so there will be only one
              peak. Any local maxima will be also a global maxima.
            </remarks>
            <param name="limit">
              The difference between two iterations of the regression algorithm
              when the algorithm should stop. If not specified, the value of
              10e-4 will be used. The difference is calculated based on the largest
              absolute parameter change of the regression.
            </param>
            <param name="maxIterations">
              The maximum number of iterations to be performed by the regression
              algorithm.
            </param>
            <returns>
              True if the model converged, false otherwise.
            </returns>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Source">
            <summary>
            Source data used in the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Outputs">
            <summary>
            Gets the the dependent variable value
            for each of the source input points.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Result">
            <summary>
              Gets the resulting probabilities obtained
              by the logistic regression model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Regression">
            <summary>
              Gets the Logistic Regression model created
              and evaluated by this analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Coefficients">
            <summary>
              Gets the collection of coefficients of the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.LogLikelihood">
            <summary>
              Gets the Log-Likelihood for the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.ChiSquare">
            <summary>
              Gets the Chi-Square (Likelihood Ratio) Test for the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Deviance">
            <summary>
              Gets the Deviance of the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Inputs">
            <summary>
              Gets the name of the input variables for the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Output">
            <summary>
              Gets the name of the output variable for the model.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.OddsRatios">
            <summary>
              Gets the Odds Ratio for each coefficient
              found during the logistic regression.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.StandardErrors">
            <summary>
              Gets the Standard Error for each coefficient
              found during the logistic regression.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.WaldTests">
            <summary>
              Gets the Wald Tests for each coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.LikelihoodRatioTests">
            <summary>
              Gets the Likelihood-Ratio Tests for each coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.CoefficientValues">
            <summary>
              Gets the value of each coefficient.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticRegressionAnalysis.Confidences">
            <summary>
              Gets the 95% Confidence Intervals (C.I.)
              for each coefficient found in the regression.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.LogisticCoefficient">
            <summary>
              Represents a Logistic Regression Coefficient found in the Logistic Regression,
              allowing it to be bound to controls like the DataGridView. This class cannot
              be instantiated outside the LogisticRegressionAnalysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticCoefficient.Name">
            <summary>
              Gets the name for the current coefficient.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticCoefficient.OddsRatio">
            <summary>
              Gets the Odds ratio for the current coefficient.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticCoefficient.StandardError">
            <summary>
              Gets the Standard Error for the current coefficient.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticCoefficient.Confidence">
            <summary>
              Gets the 95% confidence interval (CI) for the current coefficient.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticCoefficient.ConfidenceUpper">
            <summary>
              Gets the upper limit for the 95% confidence interval.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticCoefficient.ConfidenceLower">
            <summary>
              Gets the lower limit for the 95% confidence interval.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticCoefficient.Value">
            <summary>
              Gets the coefficient value.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticCoefficient.Wald">
            <summary>
              Gets the Wald's test performed for this coefficient.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.LogisticCoefficient.LikelihoodRatio">
            <summary>
              Gets the Likelihood-Ratio test performed for this coefficient.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.LogisticCoefficientCollection">
            <summary>
              Represents a collection of Logistic Coefficients found in the
              Logistic Regression Analysis. This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Topology.Ergodic">
             <summary>
               Ergodic (fully-connected) Topology for Hidden Markov Models.
             </summary>
             
             <remarks>
              <para>
               Ergodic models are commonly used to represent models in which a single
               (large) sequence of observations is used for training (such as when a
               training sequence does not have well defined starting and ending points
               and can potentially be infinitely long).</para>
               
              <para>Models starting with an ergodic transition-state topology typically
               have only a small number of states.</para>
               
              <para>
               References:
               <list type="bullet">
                 <item><description>
                   Alexander Schliep, "Learning Hidden Markov Model Topology".</description></item>
                 <item><description>
                   Richard Hughey and Anders Krogh, "Hidden Markov models for sequence analysis: 
                   extension and analysis of the basic method", CABIOS 12(2):95-107, 1996. Available in:
                   http://compbio.soe.ucsc.edu/html_format_papers/hughkrogh96/cabios.html</description></item>
               </list></para>
             </remarks>
             
             <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Topology.ITopology"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Topology.Forward"/>
             <seealso cref="T:Accord.Statistics.Models.Markov.Topology.Custom"/>
             
             <example>
              <para>
               In a second example, we will create an Ergodic (fully connected)
               discrete-density hidden Markov model with uniform probabilities.</para>
               
               <code>
               // Create a new Ergodic hidden Markov model with three
               //   fully-connected states and four sequence symbols.
               var model = new HiddenMarkovModel(new Ergodic(3), 4);
            
               // After creation, the state transition matrix for the model
               // should be given by:
               //
               //       { 0.33, 0.33, 0.33 }
               //       { 0.33, 0.33, 0.33 }
               //       { 0.33, 0.33, 0.33 }
               //       
               // in which all state transitions are allowed.
               </code>
             
             </example>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Ergodic.#ctor(System.Int32)">
            <summary>
              Creates a new Ergodic topology for a given number of states.
            </summary>
            <param name="states">The number of states in the model.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Ergodic.#ctor(System.Int32,System.Boolean)">
            <summary>
              Creates a new Ergodic topology for a given number of states.
            </summary>
            <param name="states">The number of states in the model.</param>
            <param name="random">True to use random initial values, false
            to use a uniform distribution.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Topology.Ergodic.Create(System.Double[0:,0:]@,System.Double[]@)">
            <summary>
              Creates the state transitions matrix and the
              initial state probabilities for this topology.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.Ergodic.States">
            <summary>
              Gets the number of states in this topology.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.Ergodic.Random">
            <summary>
              Gets or sets whether the transition matrix
              should be initialized with random probabilities
              or not. Default is false.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Topology.Ergodic.Initial">
            <summary>
              Gets the initial state probabilities.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.ContinuousSequenceClassifierLearning">
             <summary>
               Continuous-density hidden Markov Sequence Classifier learning algorithm.
             </summary>
             
             <example>
               <para>
               The following example creates a continuous-density hidden Markov model sequence
               classifier to recognize two classes of univariate sequence of observations.</para>
               
               <code>
               // Create a Continuous density Hidden Markov Model Sequence Classifier
               // to detect a univariate sequence and the same sequence backwards.
               double[][] sequences = new double[][] 
               {
                   new double[] { 0,1,2,3,4 }, // This is the first  sequence with label = 0
                   new double[] { 4,3,2,1,0 }, // This is the second sequence with label = 1
               };
               
               // Labels for the sequences
               int[] labels = { 0, 1 };
            
               // Creates a new Continuous-density Hidden Markov Model Sequence Classifier
               //  containing 2 hidden Markov Models with 2 states and an underlying Normal
               //  distribution as the continuous probability density.
               NormalDistribution density = new NormalDistribution();
               var classifier = new ContinuousSequenceClassifier(2, new Ergodic(2), density);
            
               // Create a new learning algorithm to train the sequence classifier
               var teacher = new ContinuousSequenceClassifierLearning(classifier,
            
                   // Train each model until the log-likelihood changes less than 0.001
                   modelIndex => new ContinuousBaumWelchLearning(classifier.Models[modelIndex])
                   {
                       Tolerance = 0.0001,
                       Iterations = 0
                   }
               );
               
               // Train the sequence classifier using the algorithm
               teacher.Run(sequences, labels);
               
               
               // Calculate the probability that the given
               //  sequences originated from the model
               double likelihood;
               
               // Try to classify the first sequence (output should be 0)
               int c1 = classifier.Compute(sequences[0], out likelihood);
               
               // Try to classify the second sequence (output should be 1)
               int c2 = classifier.Compute(sequences[1], out likelihood);
               </code>
               
               <para>
               The following example creates a continuous-density hidden Markov model sequence
               classifier to recognize two classes of multivariate sequence of observations.</para>
               
               <code>
               // Create a Continuous density Hidden Markov Model Sequence Classifier
               // to detect a multivariate sequence and the same sequence backwards.
               double[][][] sequences = new double[][][]
               {
                   new double[][] 
                   { 
                       // This is the first  sequence with label = 0
                       new double[] { 0 },
                       new double[] { 1 },
                       new double[] { 2 },
                       new double[] { 3 },
                       new double[] { 4 },
                   }, 
                   
                   new double[][]
                   {
                       // This is the second sequence with label = 1
                       new double[] { 4 },
                       new double[] { 3 },
                       new double[] { 2 },
                       new double[] { 1 },
                       new double[] { 0 },
                   }
               };
               
               // Labels for the sequences
               int[] labels = { 0, 1 };
               
               // Creates a sequence classifier containing 2 hidden Markov Models
               //  with 2 states and an underlying Normal distribution as density.
               NormalDistribution density = new NormalDistribution(1);
               var classifier = new ContinuousSequenceClassifier(2, new Ergodic(2), density);
               
               // Configure the learning algorithms to train the sequence classifier
               var teacher = new ContinuousSequenceClassifierLearning(classifier,
            
                  // Train each model until the log-likelihood changes less than 0.001
                  modelIndex => new ContinuousBaumWelchLearning(classifier.Models[modelIndex])
                  {
                       Tolerance = 0.0001,
                       Iterations = 0
                  {
               );
               
               // Train the sequence classifier using the algorithm
               double logLikelihood = teacher.Run(sequences, labels);
               
                
               // Calculate the probability that the given
               //  sequences originated from the model
               double likelihood1, likelihood2;
               
               // Try to classify the first sequence (output should be 0)
               int c1 = classifier.Compute(sequences[0], out likelihood1);
            
               // Try to classify the second sequence (output should be 1)
               int c2 = classifier.Compute(sequences[1], out likelihood2);
               </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ContinuousSequenceClassifierLearning.#ctor(Accord.Statistics.Models.Markov.ContinuousSequenceClassifier,Accord.Statistics.Models.Markov.Learning.ClassifierLearningAlgorithmConfiguration)">
            <summary>
              Creates a new instance of the learning algorithm for a given 
              Markov sequence classifier using the specified configuration
              function.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ContinuousSequenceClassifierLearning.Run(System.Array[],System.Int32[])">
            <summary>
              Trains each model to recognize each of the output labels.
            </summary>
            <returns>The sum log-likelihood for all models after training.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.ContinuousSequenceClassifierLearning.Threshold">
            <summary>
              Creates a new <see cref="M:Accord.Statistics.Models.Markov.Learning.ContinuousSequenceClassifierLearning.Threshold">threshold model</see>
              for the current set of Markov models in this sequence classifier.
            </summary>
            <returns>
              A <see cref="M:Accord.Statistics.Models.Markov.Learning.ContinuousSequenceClassifierLearning.Threshold">threshold Markov model</see>.
            </returns>
        </member>
        <member name="T:Accord.Statistics.Kernels.Spline">
            <summary>
              Infinite Spline Kernel function.
            </summary>
            <remarks>
              The Spline kernel is given as a piece-wise cubic
              polynomial, as derived in the works by Gunn (1998).
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Spline.#ctor">
            <summary>
              Constructs a new Spline Kernel.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Kernels.Spline.Function(System.Double[],System.Double[])">
            <summary>
              Spline Kernel Function
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="T:Accord.Statistics.Kernels.Spherical">
            <summary>
              Spherical Kernel.
            </summary>
            <remarks>
              The spherical kernel comes from a statistics perspective. It is an example
              of an isotropic stationary kernel and is positive definite in R^3.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Spherical.#ctor(System.Double)">
            <summary>
              Constructs a new Spherical Kernel.
            </summary>
            <param name="sigma">Value for sigma.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Spherical.Function(System.Double[],System.Double[])">
            <summary>
              Spherical Kernel Function
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Spherical.Sigma">
            <summary>
              Gets or sets the kernel's sigma value.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Sparse.SparseLaplacian">
            <summary>
              Sparse Laplacian Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseLaplacian.#ctor(System.Double)">
            <summary>
              Constructs a new Sparse Laplacian Kernel
            </summary>
            <param name="sigma">The sigma slope value.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseLaplacian.Function(System.Double[],System.Double[])">
            <summary>
              Laplacian Kernel function.
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseLaplacian.Distance(System.Double[],System.Double[])">
            <summary>
              Computes the distance in input space
              between two points given in feature space.
            </summary>
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            <returns>Distance between <c>x</c> and <c>y</c> in input space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Sparse.SparseLaplacian.Sigma">
            <summary>
              Gets or sets the sigma value for the kernel.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Markov.SequenceClassifier">
             <summary>
               Discrete-density Hidden Markov Model Set for Sequence Classification.
             </summary>
             
             <remarks>
               This class uses a set of hidden Markov models to classify integer sequences.
               Each model will try to learn and recognize each of the different output classes.
             </remarks>
             
             <example>
               <code>
               // Declare some testing data
               int[][] inputs = new int[][]
               {
                   new int[] { 0,1,1,0 },   // Class 0
                   new int[] { 0,0,1,0 },   // Class 0
                   new int[] { 0,1,1,1,0 }, // Class 0
                   new int[] { 0,1,0 },     // Class 0
               
                   new int[] { 1,0,0,1 },   // Class 1
                   new int[] { 1,1,0,1 },   // Class 1
                   new int[] { 1,0,0,0,1 }, // Class 1
                   new int[] { 1,0,1 },     // Class 1
               };
               
               int[] outputs = new int[]
               {
                   0,0,0,0, // First four sequences are of class 0
                   1,1,1,1, // Last four sequences are of class 1
               };
               
               
               // We are trying to predict two different classes
               int classes = 2;
            
               // Each sequence may have up to two symbols (0 or 1)
               int symbols = 2;
            
               // Nested models will have two states each
               int[] states = new int[] { 2, 2 };
            
               // Creates a new Hidden Markov Model Sequence Classifier with the given parameters
               SequenceClassifier classifier = new SequenceClassifier(classes, states, symbols);
               
               // Create a new learning algorithm to train the sequence classifier
               var teacher = new SequenceClassifierLearning(classifier,
               
                   // Train each model until the log-likelihood changes less than 0.001
                   modelIndex => new BaumWelchLearning(classifier.Models[modelIndex])
                   {
                       Tolerance = 0.001,
                       Iterations = 0
                   }
               );
               
               // Train the sequence classifier using the algorithm
               double likelihood = teacher.Run(inputs, outputs);
               
               </code>
             </example>
             
        </member>
        <member name="T:Accord.Statistics.Models.Markov.SequenceClassifierBase`1">
            <summary>
              Base class for (HMM) Sequence Classifiers. This class cannot
              be instantiated.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.ISequenceClassifier">
            <summary>
              Common interface for sequence classifiers using <see cref="T:Accord.Statistics.Models.Markov.IHiddenMarkovModel">
              hidden Markov models</see>.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ISequenceClassifier.Compute(System.Array,System.Double[]@)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.ISequenceClassifier.Classes">
            <summary>
              Gets the number of classes which can be recognized by this classifier.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.SequenceClassifierBase`1.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Models.Markov.SequenceClassifierBase`1"/> class.
            </summary>
            <param name="classes">The number of classes in the classification problem.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.SequenceClassifierBase`1.#ctor(`0[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Models.Markov.SequenceClassifierBase`1"/> class.
            </summary>
            <param name="models">The models specializing in each of the classes of the classification problem.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.SequenceClassifierBase`1.Compute(System.Array)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.SequenceClassifierBase`1.Compute(System.Array,System.Double@)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.SequenceClassifierBase`1.Compute(System.Array,System.Double[]@)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
            <returns>Return the label of the given sequence, or -1 if it has
            been rejected by the <see cref="P:Accord.Statistics.Models.Markov.SequenceClassifierBase`1.Threshold">threshold model</see>.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.SequenceClassifierBase`1.Accord#Statistics#Models#Markov#ISequenceClassifier#Compute(System.Array,System.Double[]@)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.SequenceClassifierBase`1.Threshold">
            <summary>
              Gets or sets the threshold model.
            </summary>
            <remarks>
            <para>
              For gesture spotting, Lee and Kim introduced a threshold model which is
              composed of parts of the models in a hidden Markov sequence classifier.</para>
            <para>
              The threshold model acts as a baseline for decision rejection. If none of
              the classifiers is able to produce a higher likelihood than the threshold
              model, the decision is rejected.</para>
            <para>
              In the original Lee and Kim publication, the threshold model is constructed
              by creating a fully connected ergodic model by removing all outgoing transitions
              of states in all gesture models and fully connecting those states.</para>
            <para>
              References:
              <list type="bullet">
                <item><description>
                   H. Lee, J. Kim, An HMM-based threshold model approach for gesture
                   recognition, IEEE Trans. Pattern Anal. Mach. Intell. 21 (10) (1999)
                   961–973.</description></item>
              </list></para>
            </remarks>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.SequenceClassifierBase`1.Models">
            <summary>
              Gets the collection of models specialized in each class
              of the sequence classification problem.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.SequenceClassifierBase`1.Item(System.Int32)">
            <summary>
              Gets the <see cref="T:Accord.Statistics.Models.Markov.IHiddenMarkovModel">Hidden Markov
              Model</see> implementation responsible for recognizing
              each of the classes given the desired class label.
            </summary>
            <param name="label">The class label of the model to get.</param>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.SequenceClassifierBase`1.Classes">
            <summary>
              Gets the number of classes which can be recognized by this classifier.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.SequenceClassifier.#ctor(System.Int32,Accord.Statistics.Models.Markov.Topology.ITopology,System.Int32,System.String[])">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.SequenceClassifier.#ctor(System.Int32,Accord.Statistics.Models.Markov.Topology.ITopology,System.Int32)">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.SequenceClassifier.#ctor(System.Int32,System.Int32[],System.Int32,System.String[])">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.SequenceClassifier.#ctor(System.Int32,System.Int32[],System.Int32)">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.SequenceClassifier.Compute(System.Int32[])">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.SequenceClassifier.Compute(System.Int32[],System.Double@)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.SequenceClassifier.Compute(System.Int32[],System.Double[]@)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Markov.IHiddenMarkovModel">
            <summary>
              Common interface for Hidden Markov Models.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.IHiddenMarkovModel.Decode(System.Array,System.Double@)">
            <summary>
              Calculates the most likely sequence of hidden states
              that produced the given observation sequence.
            </summary>
            <remarks>
              Decoding problem. Given the HMM M = (A, B, pi) and  the observation sequence 
              O = {o1,o2, ..., oK}, calculate the most likely sequence of hidden states Si
              that produced this observation sequence O. This can be computed efficiently
              using the Viterbi algorithm.
            </remarks>
            <param name="observations">
              A sequence of observations.</param>
            <param name="probability">
              The state optimized probability.</param>
            <returns>
              The sequence of states that most likely produced the sequence.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.IHiddenMarkovModel.Decode(System.Array,System.Boolean,System.Double@)">
            <summary>
              Calculates the most likely sequence of hidden states
              that produced the given observation sequence. </summary>
            <remarks>
              Decoding problem. Given the HMM M = (A, B, pi) and  the observation sequence 
              O = {o1,o2, ..., oK}, calculate the most likely sequence of hidden states Si
              that produced this observation sequence O. This can be computed efficiently
              using the Viterbi algorithm. </remarks>
            <param name="observations">
              A sequence of observations. </param>
            <param name="probability">
              The state optimized probability.</param>
            <param name="logarithm">
              True to return the log-likelihood, false to return the likelihood.
              Default is false (default is to return the likelihood). </param>
            <returns>
              The sequence of states that most likely produced the sequence.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.IHiddenMarkovModel.Evaluate(System.Array)">
            <summary>
              Calculates the probability that this model has generated the given sequence.
            </summary>
            <remarks>
              Evaluation problem. Given the HMM  M = (A, B, pi) and  the observation
              sequence O = {o1, o2, ..., oK}, calculate the probability that model
              M has generated sequence O. This can be computed efficiently using the
              Forward algorithm. </remarks>
            <param name="observations">
              A sequence of observations. </param>
            <returns>
              The probability that the given sequence has been generated by this model.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.IHiddenMarkovModel.Evaluate(System.Array,System.Boolean)">
            <summary>
              Calculates the probability that this model has generated the given sequence.
            </summary>
            <remarks>
              Evaluation problem. Given the HMM  M = (A, B, pi) and  the observation
              sequence O = {o1, o2, ..., oK}, calculate the probability that model
              M has generated sequence O. This can be computed efficiently using the
              Forward algorithm. </remarks>
            <param name="observations">
              A sequence of observations. </param>
            <param name="logarithm">
              True to return the log-likelihood, false to return the likelihood.
              Default is false (default is to return the likelihood). </param>
            <returns>
              The probability that the given sequence has been generated by this model.
            </returns>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.IHiddenMarkovModel.States">
            <summary>
              Gets the number of states of this model.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.IHiddenMarkovModel.Probabilities">
            <summary>
              Gets the initial probabilities for this model.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.IHiddenMarkovModel.Transitions">
            <summary>
              Gets the Transition matrix (A) for this model.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.IHiddenMarkovModel.Tag">
            <summary>
              Gets or sets a user-defined tag.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Sparse.SparseSigmoid">
            <summary>
              Sparse Sigmoid Kernel.
            </summary>
            <remarks>
              Sigmoid kernels are not positive definite and therefore do not induce
              a reproducing kernel Hilbert space. However, they have been successfully
              used in practice (Scholkopf and Smola, 2002).
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseSigmoid.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a Sparse Sigmoid kernel.
            </summary>
            <param name="alpha">Alpha parameter.</param>
            <param name="constant">Constant parameter.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseSigmoid.Function(System.Double[],System.Double[])">
            <summary>
              Sigmoid kernel function.
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Sparse.SparseSigmoid.Gamma">
            <summary>
              Gets or sets the kernel's gamma parameter.
            </summary>
            <remarks>
              In a sigmoid kernel, gamma is a inner product
              coefficient for the hyperbolic tangent function.
            </remarks>
        </member>
        <member name="P:Accord.Statistics.Kernels.Sparse.SparseSigmoid.Constant">
            <summary>
              Gets or sets the kernel's constant term.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Polynomial">
            <summary>
              Polynomial Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Polynomial.#ctor(System.Int32,System.Double)">
            <summary>
              Constructs a new Polynomial kernel of a given degree.
            </summary>
            <param name="degree">The polynomial degree for this kernel.</param>
            <param name="constant">The polynomial constant for this kernel. Default is 1.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Polynomial.#ctor(System.Int32)">
            <summary>
              Constructs a new Polynomial kernel of a given degree.
            </summary>
            <param name="degree">The polynomial degree for this kernel.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Polynomial.Function(System.Double[],System.Double[])">
            <summary>
              Polynomial kernel function.
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="M:Accord.Statistics.Kernels.Polynomial.Distance(System.Double[],System.Double[])">
            <summary>
              Computes the distance in input space
              between two points given in feature space.
            </summary>
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            <returns>Distance between <c>x</c> and <c>y</c> in input space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Polynomial.Degree">
            <summary>
              Gets or sets the kernel's polynomial degree.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Kernels.Polynomial.Constant">
            <summary>
              Gets or sets the kernel's polynomial constant term.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Laplacian">
            <summary>
              Laplacian Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Laplacian.#ctor(System.Double)">
            <summary>
              Constructs a new Laplacian Kernel
            </summary>
            <param name="sigma">The sigma slope value.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Laplacian.Function(System.Double[],System.Double[])">
            <summary>
              Laplacian Kernel function.
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="M:Accord.Statistics.Kernels.Laplacian.Distance(System.Double[],System.Double[])">
            <summary>
              Computes the distance in input space
              between two points given in feature space.
            </summary>
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            <returns>Distance between <c>x</c> and <c>y</c> in input space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Laplacian.Sigma">
            <summary>
              Gets or sets the sigma value for the kernel.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Cauchy">
            <summary>
              Cauchy Kernel.
            </summary>
            <remarks>
              The Cauchy kernel comes from the Cauchy distribution (Basak, 2008). It is a
              long-tailed kernel and can be used to give long-range influence and sensitivity
              over the high dimension space.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Cauchy.#ctor(System.Double)">
            <summary>
              Constructs a new Cauchy Kernel.
            </summary>
            <param name="sigma">The value for sigma.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Cauchy.Function(System.Double[],System.Double[])">
            <summary>
              Cauchy Kernel Function
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Cauchy.Sigma">
            <summary>
              Gets or sets the kernel's sigma value.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Filters.NormalizationFilter">
            <summary>
              Data normalization preprocessing filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.NormalizationFilter.#ctor">
            <summary>
              Creates a new data normalization filter.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Filters.NormalizationFilter.#ctor(System.String[])">
            <summary>
              Creates a new data normalization filter.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Filters.NormalizationFilter.ProcessFilter(System.Data.DataTable)">
            <summary>
              Processes the current filter.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Filters.NormalizationFilter.Detect(System.Data.DataTable)">
            <summary>
              Auto detects the filter options by analyzing a given <see cref="T:System.Data.DataTable"/>.
            </summary>        
        </member>
        <member name="T:Accord.Statistics.Filters.NormalizationFilter.Options">
             <summary>
               Options for normalizing a column.
             </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.NormalizationFilter.Options.#ctor">
            <summary>
              Constructs a new Options object.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Filters.NormalizationFilter.Options.#ctor(System.String)">
            <summary>
              Constructs a new Options object for the given column.
            </summary>
            <param name="name">
              The name of the column to create this options for.
            </param>
        </member>
        <member name="M:Accord.Statistics.Filters.NormalizationFilter.Options.#ctor(System.String,System.Double,System.Double)">
            <summary>
              Constructs a new Options object for the given column.
            </summary>
            <param name="name">
              The name of the column to create this options for.
            </param>
            <param name="mean">The mean value for normalization.</param>
            <param name="standardDeviation">The standard deviation value for standardization.</param>
        </member>
        <member name="P:Accord.Statistics.Filters.NormalizationFilter.Options.Mean">
            <summary>
              Gets or sets the mean of the data contained in the column.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Filters.NormalizationFilter.Options.StandardDeviation">
            <summary>
              Gets or sets the standard deviation of the data contained in the column.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Filters.NormalizationFilter.Options.Standardize">
            <summary>
              Gets or sets if the column's data should be standardized to Z-Scores.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Filters.ColumnOptionCollection`1">
            <summary>
              Column option collection.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.ColumnOptionCollection`1.GetKeyForItem(`0)">
            <summary>
              Extracts the key from the specified element.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Accord.Statistics.Moving.MovingCircularStatistics">
            <summary>
              Moving-window circular statistics.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Moving.MovingCircularStatistics.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Moving.MovingCircularStatistics"/> class.
            </summary>
            <param name="windowSize">The size of the moving window.</param>
        </member>
        <member name="M:Accord.Statistics.Moving.MovingCircularStatistics.Push(System.Double)">
            <summary>
            Registers the occurance of a value.
            </summary>
            <param name="value">The value to be registered.</param>
        </member>
        <member name="M:Accord.Statistics.Moving.MovingCircularStatistics.Clear">
            <summary>
            Clears all measures previously computed.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Moving.MovingCircularStatistics.SumOfSines">
            <summary>
              Gets the sum of the sines of the angles within the window.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Moving.MovingCircularStatistics.SumOfCosines">
            <summary>
              Gets the sum of the cosines of the angles within the window.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Moving.MovingCircularStatistics.Window">
            <summary>
            Gets the size of the window.
            </summary>
            <value>The window's size.</value>
        </member>
        <member name="P:Accord.Statistics.Moving.MovingCircularStatistics.Count">
            <summary>
            Gets the number of samples within the window.
            </summary>
            <value>The number of samples within the window.</value>
        </member>
        <member name="P:Accord.Statistics.Moving.MovingCircularStatistics.Mean">
            <summary>
              Gets the mean of the angles within the window.
            </summary>
            <value>The mean.</value>
        </member>
        <member name="P:Accord.Statistics.Moving.MovingCircularStatistics.Variance">
            <summary>
              Gets the variance of the angles within the window.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Moving.MovingCircularStatistics.StandardDeviation">
            <summary>
              Gets the standard deviation of the angles within the window.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression">
            <summary>
              Simple Linear Regression of the form y = Ax + B.
            </summary>
            <remarks>
              In linear regression, the model specification is that the dependent
              variable, y is a linear combination of the parameters (but need not
              be linear in the independent variables). As the linear regression
              has a closed form solution, the regression coefficients can be
              efficiently computed using the Regress method of this class.
            </remarks>
            <example>
              <code>
              // Declare some example data
              double[] inputs =  { 80, 60, 10, 20, 30 };
              double[] outputs = { 20, 40, 30, 50, 60 };
                
              // Create a new Simple Linear Regression
              SimpleLinearRegression linreg = new SimpleLinearRegression();
                
              // Perform the linear regression
              linreg.Regress(inputs, outputs);
                
              // Compute the output for a given input
              double y = linreg.Compute(85);
              </code>
            </example>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.#ctor">
            <summary>
              Creates a new Simple Linear Regression of the form y = Ax + B.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.Regress(System.Double[],System.Double[])">
            <summary>
              Performs the regression using the input and output
              data, returning the sum of squared errors of the fit.
            </summary>
            <param name="inputs">The input data.</param>
            <param name="outputs">The output data.</param>
            <returns>The regression Sum-of-Squares error.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.Compute(System.Double[])">
            <summary>
              Computes the regression output for a given input.
            </summary>
            <param name="input">An array of input values.</param>
            <returns>The array of calculated output values.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.Compute(System.Double)">
            <summary>
              Computes the regression for a single input.
            </summary>
            <param name="input">The input value.</param>
            <returns>The calculated output.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.CoefficientOfDetermination(System.Double[],System.Double[],System.Boolean)">
            <summary>
              Gets the coefficient of determination, as known as R² (r-squared).
            </summary>
            <remarks>
              <para>
               The coefficient of determination is used in the context of statistical models
               whose main purpose is the prediction of future outcomes on the basis of other
               related information. It is the proportion of variability in a data set that
               is accounted for by the statistical model. It provides a measure of how well
               future outcomes are likely to be predicted by the model.</para>
              <para>
               The R² coefficient of determination is a statistical measure of how well the
               regression line approximates the real data points. An R² of 1.0 indicates
               that the regression line perfectly fits the data.</para> 
            </remarks>
            <returns>The R² (r-squared) coefficient for the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.CoefficientOfDetermination(System.Double[],System.Double[])">
            <summary>
              Gets the coefficient of determination, or R² (r-squared).
            </summary>
            <remarks>
              <para>
               The coefficient of determination is used in the context of statistical models
               whose main purpose is the prediction of future outcomes on the basis of other
               related information. It is the proportion of variability in a data set that
               is accounted for by the statistical model. It provides a measure of how well
               future outcomes are likely to be predicted by the model.</para>
              <para>
               The R² coefficient of determination is a statistical measure of how well the
               regression line approximates the real data points. An R² of 1.0 indicates
               that the regression line perfectly fits the data.</para> 
            </remarks>
            <returns>The R² (r-squared) coefficient for the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.ToString">
            <summary>
              Returns a System.String representing the regression.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.Accord#Statistics#Models#Regression#Linear#ILinearRegression#Compute(System.Double[])">
            <summary>
              Computes the model output for a given input.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.Slope">
            <summary>
              Angular coefficient (Slope).
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.SimpleLinearRegression.Intercept">
            <summary>
              Linear coefficient (Intercept).
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">
            <summary>
              Discrete-density Hidden Markov Model.
            </summary>
            
            <remarks>
            <para>
              Hidden Markov Models (HMM) are stochastic methods to model temporal and sequence
              data. They are especially known for their application in temporal pattern recognition
              such as speech, handwriting, gesture recognition, part-of-speech tagging, musical
              score following, partial discharges and bioinformatics.</para>
            <para>
              Dynamical systems of discrete nature assumed to be governed by a Markov chain emits
              a sequence of observable outputs. Under the Markov assumption, it is also assumed that
              the latest output depends only on the current state of the system. Such states are often
              not known from the observer when only the output values are observable.</para>
              
            <para>
              Hidden Markov Models attempt to model such systems and allow, among other things,
              <list type="number">
                <item><description>
                  To infer the most likely sequence of states that produced a given output sequence,</description></item>
                <item><description>
                  Infer which will be the most likely next state (and thus predicting the next output),</description></item>
                <item><description>
                  Calculate the probability that a given sequence of outputs originated from the system
                  (allowing the use of hidden Markov models for sequence classification).</description></item>
                </list></para>
                
            <para>     
              The “hidden” in Hidden Markov Models comes from the fact that the observer does not
              know in which state the system may be in, but has only a probabilistic insight on where
              it should be.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  http://en.wikipedia.org/wiki/Hidden_Markov_model</description></item>
                <item><description>
                  http://www.shokhirev.com/nikolai/abc/alg/hmm/hmm.html</description></item>
                <item><description>
                  P396-397 “Spoken Language Processing” by X. Huang </description></item>
                <item><description>
                  Dawei Shen. Some mathematics for HMMs, 2008. Available in:
                  http://courses.media.mit.edu/2010fall/mas622j/ProblemSets/ps4/tutorial.pdf</description></item>
                <item><description>
                  http://www.stanford.edu/class/cs262/presentations/lecture7.pdf</description></item>
                <item><description>
                  http://cs.oberlin.edu/~jdonalds/333/lecture11.html</description></item>
              </list></para>
            </remarks>
            
            <seealso cref="T:Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel">Continuous-density Hidden Markov Model.</seealso>
            
            <example>
              <code>
              // We will try to create a Hidden Markov Model which
              //  can detect if a given sequence starts with a zero
              //  and has any number of ones after that.
              int[][] sequences = new int[][] 
              {
                  new int[] { 0,1,1,1,1,0,1,1,1,1 },
                  new int[] { 0,1,1,1,0,1,1,1,1,1 },
                  new int[] { 0,1,1,1,1,1,1,1,1,1 },
                  new int[] { 0,1,1,1,1,1         },
                  new int[] { 0,1,1,1,1,1,1       },
                  new int[] { 0,1,1,1,1,1,1,1,1,1 },
                  new int[] { 0,1,1,1,1,1,1,1,1,1 },
              };
              
              // Creates a new Hidden Markov Model with 3 states for
              //  an output alphabet of two characters (zero and one)
              HiddenMarkovModel hmm = new HiddenMarkovModel(3, 2);
              
              // Try to fit the model to the data until the difference in
              //  the average log-likelihood changes only by as little as 0.0001
              var teacher = new BaumWelchLearning(hmm) { Tolerance = 0.0001, Iterations = 0 };
              double ll = teacher.Run(sequences);
              
              // Calculate the probability that the given
              //  sequences originated from the model
              double l1 = hmm.Evaluate(new int[] { 0, 1 });       // 0.999
              double l2 = hmm.Evaluate(new int[] { 0, 1, 1, 1 }); // 0.916
              
              // Sequences which do not start with zero have much lesser probability.
              double l3 = hmm.Evaluate(new int[] { 1, 1 });       // 0.000
              double l4 = hmm.Evaluate(new int[] { 1, 0, 0, 0 }); // 0.000
              
              // Sequences which contains few errors have higher probabability
              //  than the ones which do not start with zero. This shows some
              //  of the temporal elasticity and error tolerance of the HMMs.
              double l5 = hmm.Evaluate(new int[] { 0, 1, 0, 1, 1, 1, 1, 1, 1 }); // 0.034
              double l6 = hmm.Evaluate(new int[] { 0, 1, 1, 1, 1, 1, 1, 0, 1 }); // 0.034
              </code>
            </example>
            
        </member>
        <member name="T:Accord.Statistics.Models.Markov.HiddenMarkovModelBase">
            <summary>
              Base class for Hidden Markov Models. This class cannot
              be instantiated.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModelBase.#ctor(Accord.Statistics.Models.Markov.Topology.ITopology)">
            <summary>
              Constructs a new Hidden Markov Model.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.HiddenMarkovModelBase.States">
            <summary>
              Gets the number of states of this model.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.HiddenMarkovModelBase.Probabilities">
            <summary>
              Gets the initial probabilities for this model.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.HiddenMarkovModelBase.Transitions">
            <summary>
              Gets the Transition matrix (A) for this model.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.HiddenMarkovModelBase.Tag">
            <summary>
              Gets or sets a user-defined tag.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.#ctor(Accord.Statistics.Models.Markov.Topology.ITopology,System.Double[0:,0:])">
            <summary>
              Constructs a new Hidden Markov Model.
            </summary>
            <param name="topology">
              A <see cref="N:Accord.Statistics.Models.Markov.Topology"/> object specifying the initial values of the matrix of transition 
              probabilities <c>A</c> and initial state probabilities <c>pi</c> to be used by this model.
            </param>
            <param name="emissions">The emissions matrix B for this model.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.#ctor(Accord.Statistics.Models.Markov.Topology.ITopology,System.Int32)">
            <summary>
              Constructs a new Hidden Markov Model.
            </summary>
            <param name="topology">
              A <see cref="N:Accord.Statistics.Models.Markov.Topology"/> object specifying the initial values of the matrix of transition 
              probabilities <c>A</c> and initial state probabilities <c>pi</c> to be used by this model.
            </param>
            <param name="symbols">The number of output symbols used for this model.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.#ctor(System.Double[0:,0:],System.Double[0:,0:],System.Double[])">
            <summary>
              Constructs a new Hidden Markov Model.
            </summary>
            <param name="transitions">The transitions matrix A for this model.</param>
            <param name="emissions">The emissions matrix B for this model.</param>
            <param name="initial">The initial state probabilities for this model.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs a new Hidden Markov Model.
            </summary>
            <param name="states">The number of states for this model.</param>
            <param name="symbols">The number of output symbols used for this model.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Decode(System.Int32[],System.Double@)">
            <summary>
              Calculates the most likely sequence of hidden states
              that produced the given observation sequence.
            </summary>
            <remarks>
              Decoding problem. Given the HMM M = (A, B, pi) and  the observation sequence 
              O = {o1,o2, ..., oK}, calculate the most likely sequence of hidden states Si
              that produced this observation sequence O. This can be computed efficiently
              using the Viterbi algorithm.
            </remarks>
            <param name="observations">A sequence of observations.</param>
            <param name="probability">The state optimized probability.</param>
            <returns>The sequence of states that most likely produced the sequence.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Decode(System.Int32[],System.Boolean,System.Double@)">
            <summary>
              Calculates the most likely sequence of hidden states
              that produced the given observation sequence.
            </summary>
            <remarks>
              Decoding problem. Given the HMM M = (A, B, pi) and  the observation sequence 
              O = {o1,o2, ..., oK}, calculate the most likely sequence of hidden states Si
              that produced this observation sequence O. This can be computed efficiently
              using the Viterbi algorithm.
            </remarks>
            <param name="observations">A sequence of observations.</param>
            <param name="probability">The state optimized probability.</param>
            <param name="logarithm">True to return the log-likelihood, false to return
            the likelihood. Default is false (default is to return the likelihood).</param>
            <returns>The sequence of states that most likely produced the sequence.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Evaluate(System.Int32[])">
            <summary>
              Calculates the probability that this model has generated the given sequence.
            </summary>
            <remarks>
              Evaluation problem. Given the HMM  M = (A, B, pi) and  the observation
              sequence O = {o1, o2, ..., oK}, calculate the probability that model
              M has generated sequence O. This can be computed efficiently using the
              either the Viterbi or the Forward algorithms.
            </remarks>
            <param name="observations">
              A sequence of observations.
            </param>
            <returns>
              The probability that the given sequence has been generated by this model.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Evaluate(System.Int32[],System.Boolean)">
            <summary>
              Calculates the probability that this model has generated the given sequence.
            </summary>
            <remarks>
              Evaluation problem. Given the HMM  M = (A, B, pi) and  the observation
              sequence O = {o1, o2, ..., oK}, calculate the probability that model
              M has generated sequence O. This can be computed efficiently using the
              either the Viterbi or the Forward algorithms.
            </remarks>
            <param name="observations">
              A sequence of observations.
            </param>
            <param name="logarithm">
              True to return the log-likelihood, false to return
              the likelihood. Default is false.
            </param>
            <returns>
              The probability that the given sequence has been generated by this model.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Predict(System.Int32[],System.Int32,System.Double@)">
            <summary>
              Predicts next observations occurring after a given observation sequence.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Predict(System.Int32[],System.Int32)">
            <summary>
              Predicts next observations occurring after a given observation sequence.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Predict(System.Int32[],System.Int32,System.Double[][]@)">
            <summary>
              Predicts next observations occurring after a given observation sequence.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Predict(System.Int32[],System.Double[]@)">
            <summary>
              Predicts the next observation occurring after a given observation sequence.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.Predict(System.Int32[],System.Int32,System.Boolean,System.Double@,System.Double[][]@)">
            <summary>
              Predicts the next observations occurring after a given observation sequence.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.ToContinuousModel">
            <summary>
              Converts this <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">Discrete density Hidden Markov Model</see>
              into a <see cref="T:Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel">Continuous density model</see>.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.HiddenMarkovModel.op_Explicit(Accord.Statistics.Models.Markov.HiddenMarkovModel)~Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel">
            <summary>
              Converts this <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">Discrete density Hidden Markov Model</see>
              to a <see cref="T:Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel">Continuous density model</see>.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.HiddenMarkovModel.Symbols">
            <summary>
              Gets the number of symbols in the alphabet of this model.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.HiddenMarkovModel.Emissions">
            <summary>
              Gets the Emission matrix (B) for this model.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Markov.ContinuousSequenceClassifier">
             <summary>
               Continuous-density Hidden Markov Model Set for Sequence Classification.
             </summary>
             
             <remarks>
               This class uses a set of hidden Markov models to classify sequences of
               real (double-precision floating point) numbers or arrays of those numbers.
               Each model will try to learn and recognize each of the different output classes.
             </remarks>
             
             <example>
               <para>
               The following example creates a continuous-density hidden Markov model sequence
               classifier to recognize two classes of univariate sequence of observations.</para>
               
               <code>
               // Create a Continuous density Hidden Markov Model Sequence Classifier
               // to detect a univariate sequence and the same sequence backwards.
               double[][] sequences = new double[][] 
               {
                   new double[] { 0,1,2,3,4 }, // This is the first  sequence with label = 0
                   new double[] { 4,3,2,1,0 }, // This is the second sequence with label = 1
               };
               
               // Labels for the sequences
               int[] labels = { 0, 1 };
            
               // Creates a new Continuous-density Hidden Markov Model Sequence Classifier
               //  containing 2 hidden Markov Models with 2 states and an underlying Normal
               //  distribution as the continuous probability density.
               NormalDistribution density = new NormalDistribution();
               var classifier = new ContinuousSequenceClassifier(2, new Ergodic(2), density);
            
               // Create a new learning algorithm to train the sequence classifier
               var teacher = new ContinuousSequenceClassifierLearning(classifier,
            
                   // Train each model until the log-likelihood changes less than 0.001
                   modelIndex => new ContinuousBaumWelchLearning(classifier.Models[modelIndex])
                   {
                       Tolerance = 0.0001,
                       Iterations = 0
                   }
               );
               
               // Train the sequence classifier using the algorithm
               teacher.Run(sequences, labels);
               
               
               // Calculate the probability that the given
               //  sequences originated from the model
               double likelihood;
               
               // Try to classify the first sequence (output should be 0)
               int c1 = classifier.Compute(sequences[0], out likelihood);
               
               // Try to classify the second sequence (output should be 1)
               int c2 = classifier.Compute(sequences[1], out likelihood);
               </code>
               
               <para>
               The following example creates a continuous-density hidden Markov model sequence
               classifier to recognize two classes of multivariate sequence of observations.</para>
               
               <code>
               // Create a Continuous density Hidden Markov Model Sequence Classifier
               // to detect a multivariate sequence and the same sequence backwards.
               double[][][] sequences = new double[][][]
               {
                   new double[][] 
                   { 
                       // This is the first  sequence with label = 0
                       new double[] { 0 },
                       new double[] { 1 },
                       new double[] { 2 },
                       new double[] { 3 },
                       new double[] { 4 },
                   }, 
                   
                   new double[][]
                   {
                       // This is the second sequence with label = 1
                       new double[] { 4 },
                       new double[] { 3 },
                       new double[] { 2 },
                       new double[] { 1 },
                       new double[] { 0 },
                   }
               };
               
               // Labels for the sequences
               int[] labels = { 0, 1 };
               
               // Creates a sequence classifier containing 2 hidden Markov Models
               //  with 2 states and an underlying Normal distribution as density.
               NormalDistribution density = new NormalDistribution(1);
               var classifier = new ContinuousSequenceClassifier(2, new Ergodic(2), density);
               
               // Configure the learning algorithms to train the sequence classifier
               var teacher = new ContinuousSequenceClassifierLearning(classifier,
            
                  // Train each model until the log-likelihood changes less than 0.001
                  modelIndex => new ContinuousBaumWelchLearning(classifier.Models[modelIndex])
                  {
                       Tolerance = 0.0001,
                       Iterations = 0
                  {
               );
               
               // Train the sequence classifier using the algorithm
               double logLikelihood = teacher.Run(sequences, labels);
               
                
               // Calculate the probability that the given
               //  sequences originated from the model
               double likelihood1, likelihood2;
               
               // Try to classify the first sequence (output should be 0)
               int c1 = classifier.Compute(sequences[0], out likelihood1);
            
               // Try to classify the second sequence (output should be 1)
               int c2 = classifier.Compute(sequences[1], out likelihood2);
               </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ContinuousSequenceClassifier.#ctor(System.Int32,Accord.Statistics.Models.Markov.Topology.ITopology,Accord.Statistics.Distributions.IDistribution)">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ContinuousSequenceClassifier.#ctor(System.Int32,Accord.Statistics.Models.Markov.Topology.ITopology,Accord.Statistics.Distributions.IDistribution,System.String[])">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ContinuousSequenceClassifier.#ctor(System.Int32,Accord.Statistics.Models.Markov.Topology.ITopology[],Accord.Statistics.Distributions.IDistribution[],System.String[])">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ContinuousSequenceClassifier.#ctor(Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel[])">
            <summary>
              Creates a new Sequence Classifier with the given number of classes.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ContinuousSequenceClassifier.Compute(System.Array)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ContinuousSequenceClassifier.Compute(System.Array,System.Double@)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ContinuousSequenceClassifier.Compute(System.Array,System.Double[]@)">
            <summary>
              Computes the most likely class for a given sequence.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Power">
            <summary>
              Power Kernel, also known as the (Unrectified) Triangular Kernel.
            </summary>
            <remarks>
              The Power kernel is also known as the (unrectified) triangular kernel.
              It is an example of scale-invariant kernel (Sahbi and Fleuret, 2004) 
              and is also only conditionally positive definite.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Power.#ctor(System.Int32)">
            <summary>
              Constructs a new Power Kernel.
            </summary>
            <param name="degree">The kernel's degree.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Power.Function(System.Double[],System.Double[])">
            <summary>
              Power Kernel Function
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Power.Degree">
            <summary>
              Gets or sets the kernel's degree.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Circular">
            <summary>
              Circular Kernel.
            </summary>
            <remarks>
              The circular kernel comes from a statistics perspective. It is an example
              of an isotropic stationary kernel and is positive definite in R^2.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Circular.#ctor(System.Double)">
            <summary>
              Constructs a new Circular Kernel.
            </summary>
            <param name="sigma">Value for sigma.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Circular.Function(System.Double[],System.Double[])">
            <summary>
              Circular Kernel Function
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Circular.Sigma">
            <summary>
              Gets or sets the kernel's sigma value.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.BSpline">
            <summary>
              B-Spline Kernel.
            </summary>
            <remarks>
            <para>
              The B-Spline kernel is defined only in the interval [−1, 1]. It is 
              also a member of the Radial Basis Functions family of kernels.</para>
            <para>  
              References:
              <list type="bullet">
                <item><description>
                  Bart Hamers, ftp://ftp.esat.kuleuven.ac.be/pub/SISTA/hamers/PhD_bhamers.pdf
                </description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.BSpline.#ctor(System.Int32)">
            <summary>
              Constructs a new B-Spline Kernel.
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:Accord.Statistics.Kernels.BSpline.Function(System.Double[],System.Double[])">
            <summary>
              B-Spline Kernel Function
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.BSpline.Order">
            <summary>
              Gets or sets the B-Spline order.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel">
             <summary>
               Continuous-density Hidden Markov Model.
             </summary>
             
             <remarks>
             <para>
               Hidden Markov Models (HMM) are stochastic methods to model temporal and sequence
               data. They are especially known for their application in temporal pattern recognition
               such as speech, handwriting, gesture recognition, part-of-speech tagging, musical
               score following, partial discharges and bioinformatics.</para>
             <para>
               Dynamical systems of discrete nature assumed to be governed by a Markov chain emits
               a sequence of observable outputs. Under the Markov assumption, it is also assumed that
               the latest output depends only on the current state of the system. Such states are often
               not known from the observer when only the output values are observable.</para>
               
             <para>
               Hidden Markov Models attempt to model such systems and allow, among other things,
               <list type="number">
                 <item><description>
                   To infer the most likely sequence of states that produced a given output sequence,</description></item>
                 <item><description>
                   Infer which will be the most likely next state (and thus predicting the next output),</description></item>
                 <item><description>
                   Calculate the probability that a given sequence of outputs originated from the system
                   (allowing the use of hidden Markov models for sequence classification).</description></item>
                 </list></para>
                 
              <para>     
               The “hidden” in Hidden Markov Models comes from the fact that the observer does not
               know in which state the system may be in, but has only a probabilistic insight on where
               it should be.</para>
               
              <para>
               The continuous Hidden Markov Model uses a continuous probability density function (such
               as <see cref="T:Accord.Statistics.Distributions.Univariate.NormalDistribution">Gaussian</see>
               <see cref="T:Accord.Statistics.Distributions.Univariate.Mixture`1">Mixture Model</see>)
               for computing the state probability. In other words, in a continuous HMM the matrix of emission
               probabilities B is replaced by an array of continuous probability density functions.</para>
              
              <para>
               If a <see cref="T:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution">general
               discrete distribution</see> is used as the underlying probability density function, the
               model becomes equivalent to the <see cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">discrete Hidden Markov Model</see>.
              </para>
               
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   http://en.wikipedia.org/wiki/Hidden_Markov_model</description></item>
               </list></para>
             </remarks>
            
             <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel">Discrete-density Hidden Markov Model</seealso>
             
             <example>
               In the following example, we will create a Continuous Hidden Markov Model
               using a Generic Discrete Probability Distribution to reproduce the same
               code example given in <seealso cref="T:Accord.Statistics.Models.Markov.HiddenMarkovModel"/> documentation.
               <code>
               // Continuous Markov Models can operate using any
               // probability distribution, including discrete ones. 
               
               // In the follwing example, we will try to create a
               // Continuous Hidden Markov Model using a discrete
               // distribution to detect if a given sequence starts
               // with a zero and has any number of ones after that.
               
               double[][] sequences = new double[][] 
               {
                   new double[] { 0,1,1,1,1,0,1,1,1,1 },
                   new double[] { 0,1,1,1,0,1,1,1,1,1 },
                   new double[] { 0,1,1,1,1,1,1,1,1,1 },
                   new double[] { 0,1,1,1,1,1         },
                   new double[] { 0,1,1,1,1,1,1       },
                   new double[] { 0,1,1,1,1,1,1,1,1,1 },
                   new double[] { 0,1,1,1,1,1,1,1,1,1 },
               };
               
               // Create a new Hidden Markov Model with 3 states and
               //  a generic discrete distribution with two symbols
               ContinuousHiddenMarkovModel hmm = new ContinuousHiddenMarkovModel(3, 2);
               
               // Try to fit the model to the data until the difference in
               //  the average log-likelihood changes only by as little as 0.0001
               var teacher = new ContinuousBaumWelchLearning(hmm) { Tolerance = 0.0001, Iterations = 0 };
               double ll = teacher.Run(sequences);
               
               // Calculate the probability that the given
               //  sequences originated from the model
               double l1 = hmm.Evaluate(new double[] { 0, 1 });       // 0.999
               double l2 = hmm.Evaluate(new double[] { 0, 1, 1, 1 }); // 0.916
               
               // Sequences which do not start with zero have much lesser probability.
               double l3 = hmm.Evaluate(new double[] { 1, 1 });       // 0.000
               double l4 = hmm.Evaluate(new double[] { 1, 0, 0, 0 }); // 0.000
               
               // Sequences which contains few errors have higher probabability
               //  than the ones which do not start with zero. This shows some
               //  of the temporal elasticity and error tolerance of the HMMs.
               double l5 = hmm.Evaluate(new double[] { 0, 1, 0, 1, 1, 1, 1, 1, 1 }); // 0.034
               double l6 = hmm.Evaluate(new double[] { 0, 1, 1, 1, 1, 1, 1, 0, 1 }); // 0.034
               </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel.#ctor(Accord.Statistics.Models.Markov.Topology.ITopology,Accord.Statistics.Distributions.IDistribution)">
            <summary>
              Constructs a new Hidden Markov Model with discrete state probabilities.
            </summary>
            <param name="topology">
              A <see cref="N:Accord.Statistics.Models.Markov.Topology"/> object specifying the initial values of the matrix of transition 
              probabilities <c>A</c> and initial state probabilities <c>pi</c> to be used by this model.
            </param>
            <param name="emissions">
              The initial emission probability distribution to be used by each of the states.
            </param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel.#ctor(Accord.Statistics.Models.Markov.Topology.ITopology,System.Int32)">
            <summary>
              Constructs a new Hidden Markov Model with discrete state probabilities.
            </summary>
            <param name="topology">
              A <see cref="N:Accord.Statistics.Models.Markov.Topology"/> object specifying the initial values of the matrix of transition 
              probabilities <c>A</c> and initial state probabilities <c>pi</c> to be used by this model.
            </param>
            <param name="symbols">The number of output symbols used for this model.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel.#ctor(Accord.Statistics.Models.Markov.Topology.ITopology,Accord.Statistics.Distributions.IDistribution[])">
            <summary>
              Constructs a new Hidden Markov Model.
            </summary>
            <param name="topology">
              A <see cref="N:Accord.Statistics.Models.Markov.Topology"/> object specifying the initial values of the matrix of transition 
              probabilities <c>A</c> and initial state probabilities <c>pi</c> to be used by this model.
            </param>
            <param name="emissions">
              The initial emission probability distributions for each state.
            </param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel.#ctor(System.Double[0:,0:],System.Double[0:,0:],System.Double[])">
            <summary>
              Constructs a new Hidden Markov Model.
            </summary>
            <param name="transitions">The transitions matrix A for this model.</param>
            <param name="emissions">The emissions matrix B for this model.</param>
            <param name="probabilities">The initial state probabilities for this model.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel.#ctor(System.Double[0:,0:],Accord.Statistics.Distributions.IDistribution[],System.Double[])">
            <summary>
              Constructs a new Hidden Markov Model.
            </summary>
            <param name="transitions">The transitions matrix A for this model.</param>
            <param name="emissions">The emissions matrix B for this model.</param>
            <param name="probabilities">The initial state probabilities for this model.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs a new Hidden Markov Model with discrete state probabilities.
            </summary>
            <param name="states">The number of states for this model.</param>
            <param name="symbols">The number of output symbols used for this model.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel.#ctor(System.Int32,Accord.Statistics.Distributions.IDistribution)">
            <summary>
              Constructs a new Hidden Markov Model.
            </summary>
            <param name="states">The number of states for the model.</param>
            <param name="emissions">A initial distribution to be copied to all states in the model.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel.Decode(System.Array,System.Double@)">
            <summary>
              Calculates the most likely sequence of hidden states
              that produced the given observation sequence.
            </summary>
            <remarks>
              Decoding problem. Given the HMM M = (A, B, pi) and  the observation sequence 
              O = {o1,o2, ..., oK}, calculate the most likely sequence of hidden states Si
              that produced this observation sequence O. This can be computed efficiently
              using the Viterbi algorithm.
            </remarks>
            <param name="observations">A sequence of observations.</param>
            <param name="probability">The state optimized probability.</param>
            <returns>The sequence of states that most likely produced the sequence.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel.Decode(System.Array,System.Boolean,System.Double@)">
            <summary>
              Calculates the most likely sequence of hidden states
              that produced the given observation sequence.
            </summary>
            <remarks>
              Decoding problem. Given the HMM M = (A, B, pi) and  the observation sequence 
              O = {o1,o2, ..., oK}, calculate the most likely sequence of hidden states Si
              that produced this observation sequence O. This can be computed efficiently
              using the Viterbi algorithm.
            </remarks>
            <param name="observations">A sequence of observations.</param>
            <param name="probability">The state optimized probability.</param>
            <param name="logarithm">True to return the log-likelihood, false to return
            the likelihood. Default is false (default is to return the likelihood).</param>
            <returns>The sequence of states that most likely produced the sequence.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel.Evaluate(System.Array)">
            <summary>
              Calculates the probability that this model has generated the given sequence.
            </summary>
            <remarks>
              Evaluation problem. Given the HMM  M = (A, B, pi) and  the observation
              sequence O = {o1, o2, ..., oK}, calculate the probability that model
              M has generated sequence O. This can be computed efficiently using the
              either the Viterbi or the Forward algorithms.
            </remarks>
            <param name="observations">
              A sequence of observations.
            </param>
            <returns>
              The probability that the given sequence has been generated by this model.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel.Evaluate(System.Array,System.Boolean)">
            <summary>
              Calculates the probability that this model has generated the given sequence.
            </summary>
            <remarks>
              Evaluation problem. Given the HMM  M = (A, B, pi) and  the observation
              sequence O = {o1, o2, ..., oK}, calculate the probability that model
              M has generated sequence O. This can be computed efficiently using the
              either the Viterbi or the Forward algorithms.
            </remarks>
            <param name="observations">
              A sequence of observations.
            </param>
            <param name="logarithm">
              True to return the log-likelihood, false to return
              the likelihood. Default is false.
            </param>
            <returns>
              The probability that the given sequence has been generated by this model.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel.convert(System.Array)">
            <summary>
              Converts a univariate or multivariate array
              of observations into a two-dimensional jagged array.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel.Dimension">
            <summary>
              Gets the number of dimensions in the
              probability distributions for the states.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.ContinuousHiddenMarkovModel.Emissions">
            <summary>
              Gets the Emission matrix (B) for this model.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Wavelet">
            <summary>
              Wavelet Kernel.
            </summary>
            <remarks>
            <para>
              In Wavelet analysis theory, one of the common goals is to express or
              approximate a signal or function using a family of functions generated
              by dilations and translations of a function called the mother wavelet.</para>
            <para>
              The Wavelet kernel uses a mother wavelet function together with dilation
              and translation constants to produce such representations and build a
              inner product which can be used by kernel methods. The default wavalet
              used by this class is the mother function <c>h(x) = cos(1.75x)*exp(-x²/2)</c>.</para>
                
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Li Zhang, Weida Zhou, and Licheng Jiao; Wavelet Support Vector Machine. IEEE
                  Transactions on Systems, Man, and Cybernetics—Part B: Cybernetics, Vol. 34, 
                  No. 1, February 2004.</description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Wavelet.#ctor(System.Boolean)">
            <summary>
              Constructs a new Wavelet kernel.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Kernels.Wavelet.#ctor(System.Boolean,System.Double)">
            <summary>
              Constructs a new Wavelet kernel.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Kernels.Wavelet.#ctor(System.Boolean,System.Double,System.Func{System.Double,System.Double})">
            <summary>
              Constructs a new Wavelet kernel.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Kernels.Wavelet.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a new Wavelet kernel.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Kernels.Wavelet.#ctor(System.Double,System.Double,System.Func{System.Double,System.Double})">
            <summary>
              Constructs a new Wavelet kernel.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Kernels.Wavelet.Function(System.Double[],System.Double[])">
            <summary>
              Wavelet kernel function.
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Wavelet.Mother">
            <summary>
              Gets or sets the Mother wavelet for this kernel.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Kernels.Wavelet.Dilation">
            <summary>
              Gets or sets the wavelet dilation for this kernel.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Kernels.Wavelet.Translation">
            <summary>
              Gets or sets the wavelet translation for this kernel.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Kernels.Wavelet.Invariant">
            <summary>
              Gets or sets whether this is
              an invariant Wavelet kernel.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.ChiSquare">
            <summary>
              Chi-Square Kernel.
            </summary>
            <remarks>
              The Chi-Square kernel comes from the Chi-Square distribution.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.ChiSquare.#ctor">
            <summary>
              Constructs a new Chi-Square kernel.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Kernels.ChiSquare.Function(System.Double[],System.Double[])">
            <summary>
              Chi-Square Kernel Function
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="T:Accord.Statistics.Kernels.Anova">
            <summary>
              ANOVA (ANalysis Of VAriance) Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Anova.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs a new ANOVA Kernel.
            </summary>
            <param name="vectorLength">Length of the input vector.</param>
            <param name="subsequenceLength">Length of the subsequences for the ANOVA decomposition.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Anova.Function(System.Double[],System.Double[])">
            <summary>
              ANOVA Kernel function.
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="T:Accord.Statistics.Tools">
            <summary>
              Set of statistics functions.
            </summary>
            
            <remarks>
              This class represents collection of common functions used in statistics.
              Every Matrix function assumes data is organized in a table-like model,
              where Columns represents variables and Rows represents a observation of
              each variable.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Mean(System.Double[])">
            <summary>
              Computes the Mean of the given values.
            </summary>
            <param name="values">A double array containing the vector members.</param>
            <returns>The mean of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Mean(System.Single[])">
            <summary>
              Computes the Mean of the given values.
            </summary>
            <param name="values">A float array containing the vector members.</param>
            <returns>The mean of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.StandardDeviation(System.Double[])">
            <summary>
              Computes the Standard Deviation of the given values.
            </summary>
            <param name="values">A double array containing the vector members.</param>
            <returns>The standard deviation of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.StandardDeviation(System.Single[])">
            <summary>
              Computes the Standard Deviation of the given values.
            </summary>
            <param name="values">A double array containing the vector members.</param>
            <returns>The standard deviation of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.StandardDeviation(System.Double[],System.Double)">
            <summary>
              Computes the Standard Deviation of the given values.
            </summary>
            <param name="values">A double array containing the vector members.</param>
            <param name="mean">The mean of the vector, if already known.</param>
            <returns>The standard deviation of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.StandardDeviation(System.Single[],System.Single)">
            <summary>
              Computes the Standard Deviation of the given values.
            </summary>
            <param name="values">A float array containing the vector members.</param>
            <param name="mean">The mean of the vector, if already known.</param>
            <returns>The standard deviation of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.StandardError(System.Int32,System.Double)">
            <summary>
              Computes the Standard Error for a sample size, which estimates the
              standard deviation of the sample mean based on the population mean.
            </summary>
            <param name="samples">The sample size.</param>
            <param name="standardDeviation">The sample standard deviation.</param>
            <returns>The standard error for the sample.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.StandardError(System.Double[])">
            <summary>
              Computes the Standard Error for a sample size, which estimates the
              standard deviation of the sample mean based on the population mean.
            </summary>
            <param name="values">A double array containing the samples.</param>
            <returns>The standard error for the sample.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Median(System.Double[])">
            <summary>
              Computes the Median of the given values.
            </summary>
            <param name="values">A double array containing the vector members.</param>
            <returns>The median of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Median(System.Double[],System.Boolean)">
            <summary>
              Computes the Median of the given values.
            </summary>
            <param name="values">An integer array containing the vector members.</param>
            <param name="alreadySorted">A boolean parameter informing if the given values have already been sorted.</param>
            <returns>The median of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Double[])">
            <summary>
              Computes the Variance of the given values.
            </summary>
            <param name="values">A double precision number array containing the vector members.</param>
            <returns>The variance of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Single[])">
            <summary>
              Computes the Variance of the given values.
            </summary>
            <param name="values">A single precision number array containing the vector members.</param>
            <returns>The variance of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Double[],System.Double)">
            <summary>
              Computes the Variance of the given values.
            </summary>
            <param name="values">A number array containing the vector members.</param>
            <param name="mean">The mean of the array, if already known.</param>
            <returns>The variance of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Single[],System.Single)">
            <summary>
              Computes the Variance of the given values.
            </summary>
            <param name="values">A number array containing the vector members.</param>
            <param name="mean">The mean of the array, if already known.</param>
            <returns>The variance of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Mode(System.Double[])">
            <summary>
              Computes the Mode of the given values.
            </summary>
            <param name="values">A number array containing the vector values.</param>
            <returns>The variance of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Covariance(System.Double[],System.Double[])">
            <summary>
              Computes the Covariance between two values arrays.
            </summary>
            <param name="vector1">A number array containing the first vector elements.</param>
            <param name="vector2">A number array containing the second vector elements.</param>
            <returns>The variance of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Skewness(System.Double[])">
            <summary>
              Computes the Skewness for the given values.
            </summary>
            <remarks>
              Skewness characterizes the degree of asymmetry of a distribution
              around its mean. Positive skewness indicates a distribution with
              an asymmetric tail extending towards more positive values. Negative
              skewness indicates a distribution with an asymmetric tail extending
              towards more negative values.
            </remarks>
            <param name="values">A number array containing the vector values.</param>
            <returns>The skewness of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Skewness(System.Double[],System.Double,System.Double)">
            <summary>
              Computes the Skewness for the given values.
            </summary>
            <remarks>
              Skewness characterizes the degree of asymmetry of a distribution
              around its mean. Positive skewness indicates a distribution with
              an asymmetric tail extending towards more positive values. Negative
              skewness indicates a distribution with an asymmetric tail extending
              towards more negative values.
            </remarks>
            <param name="values">A number array containing the vector values.</param>
            <param name="mean">The values' mean, if already known.</param>
            <param name="standardDeviation">The values' standard deviations, if already known.</param>
            <returns>The skewness of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Kurtosis(System.Double[])">
            <summary>
              Computes the Kurtosis for the given values.
            </summary>
            <param name="values">A number array containing the vector values.</param>
            <returns>The kurtosis of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Kurtosis(System.Double[],System.Double,System.Double)">
            <summary>
              Computes the Kurtosis for the given values.
            </summary>
            <param name="values">A number array containing the vector values.</param>
            <param name="mean">The values' mean, if already known.</param>
            <param name="standardDeviation">The values' variance, if already known.</param>
            <returns>The kurtosis of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedMean(System.Double[],System.Double[])">
            <summary>
              Computes the Weighted Mean of the given values.
            </summary>
            <param name="values">A double array containing the vector members.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <returns>The mean of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedStandardDeviation(System.Double[],System.Double[],System.Double)">
            <summary>
              Computes the Standard Deviation of the given values.
            </summary>
            <param name="values">A double array containing the vector members.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <param name="mean">The mean of the vector, if already known.</param>
            <returns>The standard deviation of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[],System.Double[])">
            <summary>
              Computes the weighted Variance of the given values.
            </summary>
            <param name="values">A number array containing the vector members.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <returns>The variance of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedVariance(System.Double[],System.Double[],System.Double)">
            <summary>
              Computes the weighted Variance of the given values.
            </summary>
            <param name="values">A number array containing the vector members.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <param name="mean">The mean of the array, if already known.</param>
            <returns>The variance of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Mean(System.Double[0:,0:])">
            <summary>
              Calculates the matrix Mean vector.
            </summary>
            <param name="matrix">A matrix whose means will be calculated.</param>
            <returns>Returns a row vector containing the column means of the given matrix.</returns>
            <example>
              <code>
              double[,] matrix = 
              {
                 { 2, -1.0, 5 },
                 { 7,  0.5, 9 },
              };
               
              // column means are equal to (4.5, -0.25, 7.0)
              double[] means = Accord.Statistics.Tools.Mean(matrix);
              </code>
            </example>
        </member>
        <member name="M:Accord.Statistics.Tools.Mean(System.Double[0:,0:],System.Int32)">
            <summary>
              Calculates the matrix Mean vector.
            </summary>
            <param name="matrix">A matrix whose means will be calculated.</param>
            <param name="dimension">
              The dimension along which the means will be calculated. Pass
              0 to compute a row vector containing the mean of each column,
              or 1 to compute a column vector containing the mean of each row.
              Default value is 0.
            </param>
            <returns>Returns a vector containing the means of the given matrix.</returns>
            <example>
              <code>
              double[,] matrix = 
              {
                 { 2, -1.0, 5 },
                 { 7,  0.5, 9 },
              };
              
              // column means are equal to (4.5, -0.25, 7.0)
              double[] colMeans = Accord.Statistics.Tools.Mean(matrix, 0);
                
              // row means are equal to (2.0, 5.5)
              double[] rowMeans = Accord.Statistics.Tools.Mean(matrix, 1);
              </code>
            </example>
        </member>
        <member name="M:Accord.Statistics.Tools.Mean(System.Double[][])">
            <summary>
              Calculates the matrix Mean vector.
            </summary>
            <param name="matrix">A matrix whose means will be calculated.</param>
            <returns>Returns a row vector containing the column means of the given matrix.</returns>
            <example>
              <code>
              double[][] matrix = 
              {
                  new double[] { 2, -1.0, 5 },
                  new double[] { 7,  0.5, 9 },
              };
               
              // column means are equal to (4.5, -0.25, 7.0)
              double[] means = Accord.Statistics.Tools.Mean(matrix);
              </code>
            </example>
        </member>
        <member name="M:Accord.Statistics.Tools.Mean(System.Double[][],System.Int32)">
            <summary>
              Calculates the matrix Mean vector.
            </summary>
            <param name="matrix">A matrix whose means will be calculated.</param>
            <param name="dimension">
              The dimension along which the means will be calculated. Pass
              0 to compute a row vector containing the mean of each column,
              or 1 to compute a column vector containing the mean of each row.
              Default value is 0.
            </param>
            <returns>Returns a vector containing the means of the given matrix.</returns>
            <example>
              <code>
              double[][] matrix = 
              {
                  new double[] { 2, -1.0, 5 },
                  new double[] { 7,  0.5, 9 },
              };
              
              // column means are equal to (4.5, -0.25, 7.0)
              double[] colMeans = Accord.Statistics.Tools.Mean(matrix, 0);
                
              // row means are equal to (2.0, 5.5)
              double[] rowMeans = Accord.Statistics.Tools.Mean(matrix, 1);
              </code>
            </example>
        </member>
        <member name="M:Accord.Statistics.Tools.Mean(System.Double[][],System.Double[])">
            <summary>
              Calculates the weighted matrix Mean vector.
            </summary>
            <param name="matrix">A matrix whose means will be calculated.</param>
            <param name="weights">A vector containing the importance of each sample in the matrix.</param>
            <returns>Returns a vector containing the means of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.Mean(System.Double[0:,0:],System.Double[])">
            <summary>
              Calculates the matrix Mean vector.
            </summary>
            <param name="matrix">A matrix whose means will be calculated.</param>
            <param name="sums">The sum vector containing already calculated sums for each column of the matix.</param>
            <returns>Returns a vector containing the means of the given matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.StandardDeviation(System.Double[0:,0:])">
            <summary>
              Calculates the matrix Standard Deviations vector.
            </summary>
            <param name="matrix">A matrix whose deviations will be calculated.</param>
            <returns>Returns a vector containing the standard deviations of the given matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.StandardDeviation(System.Double[0:,0:],System.Double[])">
            <summary>
              Calculates the matrix Standard Deviations vector.
            </summary>
            <param name="matrix">A matrix whose deviations will be calculated.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matix.</param>
            <returns>Returns a vector containing the standard deviations of the given matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.StandardDeviation(System.Double[][],System.Double[])">
            <summary>
              Calculates the matrix Standard Deviations vector.
            </summary>
            <param name="matrix">A matrix whose deviations will be calculated.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matix.</param>
            <returns>Returns a vector containing the standard deviations of the given matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.StandardDeviation(System.Double[][])">
            <summary>
              Calculates the matrix Standard Deviations vector.
            </summary>
            <param name="matrix">A matrix whose deviations will be calculated.</param>
            <returns>Returns a vector containing the standard deviations of the given matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Center(System.Double[])">
            <summary>
              Centers an observation, subtracting the empirical mean from the variable.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Tools.Center(System.Double[],System.Double)">
            <summary>
              Centers an observation, subtracting the empirical mean from the variable.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Double[0:,0:])">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            <param name="matrix">A matrix whose variancees will be calculated.</param>
            <returns>Returns a vector containing the variances of the given matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Double[0:,0:],System.Double[])">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            <param name="matrix">A matrix whose variances will be calculated.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matix.</param>
            <returns>Returns a vector containing the variances of the given matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Double[][])">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            <param name="matrix">A matrix whose variances will be calculated.</param>
            <returns>Returns a vector containing the variances of the given matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Variance(System.Double[][],System.Double[])">
            <summary>
              Calculates the matrix Variance vector.
            </summary>
            <param name="matrix">A matrix whose variances will be calculated.</param>
            <param name="means">The mean vector containing already calculated means for each column of the matix.</param>
            <returns>Returns a vector containing the variances of the given matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Median(System.Double[0:,0:])">
            <summary>
              Calculates the matrix Medians vector.
            </summary>
            <param name="matrix">A matrix whose medians will be calculated.</param>
            <returns>Returns a vector containing the medians of the given matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Median(System.Double[][])">
            <summary>
              Calculates the matrix Medians vector.
            </summary>
            <param name="matrix">A matrix whose medians will be calculated.</param>
            <returns>Returns a vector containing the medians of the given matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Mode(System.Double[0:,0:])">
            <summary>
              Calculates the matrix Modes vector.
            </summary>
            <param name="matrix">A matrix whose modes will be calculated.</param>
            <returns>Returns a vector containing the modes of the given matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Skewness(System.Double[0:,0:])">
            <summary>
              Computes the Skewness for the given values.
            </summary>
            <remarks>
              Skewness characterizes the degree of asymmetry of a distribution
              around its mean. Positive skewness indicates a distribution with
              an asymmetric tail extending towards more positive values. Negative
              skewness indicates a distribution with an asymmetric tail extending
              towards more negative values.
            </remarks>
            <param name="matrix">A number matrix containing the matrix values.</param>
            <returns>The skewness of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Skewness(System.Double[0:,0:],System.Double[],System.Double[])">
            <summary>
              Computes the Skewness vector for the given matrix.
            </summary>
            <remarks>
              Skewness characterizes the degree of asymmetry of a distribution
              around its mean. Positive skewness indicates a distribution with
              an asymmetric tail extending towards more positive values. Negative
              skewness indicates a distribution with an asymmetric tail extending
              towards more negative values.
            </remarks>
            <param name="matrix">A number array containing the vector values.</param>
            <param name="means">The values' mean, if already known.</param>
            <param name="standardDeviations">The values' standard deviations, if already known.</param>
            <returns>The skewness of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Kurtosis(System.Double[0:,0:])">
            <summary>
              Computes the Kurtosis vector for the given matrix.
            </summary>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <returns>The kurtosis vector of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Kurtosis(System.Double[0:,0:],System.Double[],System.Double[])">
            <summary>
              Computes the Kurtosis vector for the given matrix.
            </summary>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The values' mean vector, if already known.</param>
            <param name="standardDeviations">The values' standard deviation vector, if already known.</param>
            <returns>The kurtosis vector of the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.StandardError(System.Double[0:,0:])">
            <summary>
              Computes the Standard Error vector for a given matrix.
            </summary>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <returns>Returns the standard error vector for the matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.StandardError(System.Int32,System.Double[])">
            <summary>
              Computes the Standard Error vector for a given matrix.
            </summary>
            <param name="samples">The number of samples in the matrix.</param>
            <param name="standardDeviations">The values' standard deviation vector, if already known.</param>
            <returns>Returns the standard error vector for the matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Covariance(System.Double[0:,0:])">
            <summary>
              Calculates the covariance matrix of a sample matrix.
            </summary>
            <remarks>
              In statistics and probability theory, the covariance matrix is a matrix of
              covariances between elements of a vector. It is the natural generalization
              to higher dimensions of the concept of the variance of a scalar-valued
              random variable.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Covariance(System.Double[0:,0:],System.Int32)">
            <summary>
              Calculates the covariance matrix of a sample matrix.
            </summary>
            <remarks>
              In statistics and probability theory, the covariance matrix is a matrix of
              covariances between elements of a vector. It is the natural generalization
              to higher dimensions of the concept of the variance of a scalar-valued
              random variable.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="dimension">
              The dimension of the matrix to consider as observations. Pass 0 if the matrix has
              observations as rows and variables as columns, pass 1 otherwise. Default is 0.
            </param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Covariance(System.Double[0:,0:],System.Double[])">
            <summary>
              Calculates the covariance matrix of a sample matrix.
            </summary>        
            <remarks>
              In statistics and probability theory, the covariance matrix is a matrix of
              covariances between elements of a vector. It is the natural generalization
              to higher dimensions of the concept of the variance of a scalar-valued
              random variable.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The values' mean vector, if already known.</param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Scatter(System.Double[0:,0:],System.Double[])">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The values' mean vector, if already known.</param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Scatter(System.Double[0:,0:],System.Double[],System.Double)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The values' mean vector, if already known.</param>
            <param name="divisor">A real number to divide each member of the matrix.</param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Scatter(System.Double[0:,0:],System.Double[],System.Int32)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The values' mean vector, if already known.</param>
            <param name="dimension">
              Pass 0 to if mean vector is a row vector, 1 otherwise. Default value is 0.
            </param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Scatter(System.Double[0:,0:],System.Double[],System.Double,System.Int32)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The values' mean vector, if already known.</param>
            <param name="divisor">A real number to divide each member of the matrix.</param>
            <param name="dimension">
              Pass 0 if the mean vector is a row vector, 1 otherwise. Default value is 0.
            </param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Covariance(System.Double[][])">
            <summary>
              Calculates the covariance matrix of a sample matrix.
            </summary> 
            <remarks>
              In statistics and probability theory, the covariance matrix is a matrix of
              covariances between elements of a vector. It is the natural generalization
              to higher dimensions of the concept of the variance of a scalar-valued
              random variable.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Covariance(System.Double[][],System.Int32)">
            <summary>
              Calculates the covariance matrix of a sample matrix.
            </summary>
            <remarks>
              In statistics and probability theory, the covariance matrix is a matrix of
              covariances between elements of a vector. It is the natural generalization
              to higher dimensions of the concept of the variance of a scalar-valued
              random variable.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="dimension">
              The dimension of the matrix to consider as observations. Pass 0 if the matrix has
              observations as rows and variables as columns, pass 1 otherwise. Default is 0.
            </param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Covariance(System.Double[][],System.Double[])">
            <summary>
              Calculates the covariance matrix of a sample matrix.
            </summary> 
            <remarks>
              In statistics and probability theory, the covariance matrix is a matrix of
              covariances between elements of a vector. It is the natural generalization
              to higher dimensions of the concept of the variance of a scalar-valued
              random variable.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The values' mean vector, if already known.</param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Scatter(System.Double[][],System.Double[])">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The values' mean vector, if already known.</param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Scatter(System.Double[][],System.Double[],System.Double)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The values' mean vector, if already known.</param>
            <param name="divisor">A real number to divide each member of the matrix.</param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Scatter(System.Double[][],System.Double[],System.Int32)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The values' mean vector, if already known.</param>
            <param name="dimension">
              Pass 0 to if mean vector is a row vector, 1 otherwise. Default value is 0.
            </param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Scatter(System.Double[][],System.Double[],System.Double,System.Int32)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The values' mean vector, if already known.</param>
            <param name="divisor">A real number to divide each member of the matrix.</param>
            <param name="dimension">
              Pass 0 to if mean vector is a row vector, 1 otherwise. Default value is 0.
            </param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Correlation(System.Double[0:,0:])">
            <summary>
              Calculates the correlation matrix for a matrix of samples.
            </summary>
            <remarks>
              In statistics and probability theory, the correlation matrix is the same
              as the covariance matrix of the standardized random variables.
            </remarks>
            <param name="matrix">A multi-dimensional array containing the matrix values.</param>
            <returns>The correlation matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Correlation(System.Double[0:,0:],System.Double[],System.Double[])">
            <summary>
              Calculates the correlation matrix for a matrix of samples.
            </summary>
            <remarks>
              In statistics and probability theory, the correlation matrix is the same
              as the covariance matrix of the standardized random variables.
            </remarks>
            <param name="matrix">A multi-dimensional array containing the matrix values.</param>
            <param name="means">The values' mean vector, if already known.</param>
            <param name="standardDeviations">The values' standard deviation vector, if already known.</param>
            <returns>The correlation matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.ZScores(System.Double[0:,0:])">
            <summary>
              Generates the Standard Scores, also known as Z-Scores, from the given data.
            </summary>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <returns>The Z-Scores for the matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.ZScores(System.Double[0:,0:],System.Double[],System.Double[])">
            <summary>
              Generates the Standard Scores, also known as Z-Scores, from the given data.
            </summary>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The values' mean vector, if already known.</param>
            <param name="standardDeviations">The values' standard deviation vector, if already known.</param>
            <returns>The Z-Scores for the matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.ZScores(System.Double[][])">
            <summary>
              Generates the Standard Scores, also known as Z-Scores, from the given data.
            </summary>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <returns>The Z-Scores for the matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.ZScores(System.Double[][],System.Double[],System.Double[])">
            <summary>
              Generates the Standard Scores, also known as Z-Scores, from the given data.
            </summary>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="means">The values' mean vector, if already known.</param>
            <param name="standardDeviations">The values' standard deviation vector, if already known.</param>
            <returns>The Z-Scores for the matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Center(System.Double[0:,0:])">
            <summary>
              Centers column data, subtracting the empirical mean from each variable.
            </summary>
            <param name="matrix">A matrix where each column represent a variable and each row represent a observation.</param>
        </member>
        <member name="M:Accord.Statistics.Tools.Center(System.Double[0:,0:],System.Double[])">
            <summary>
              Centers column data, subtracting the empirical mean from each variable.
            </summary>   
            <param name="matrix">A matrix where each column represent a variable and each row represent a observation.</param>
            <param name="means">The values' mean vector, if already known.</param>
        </member>
        <member name="M:Accord.Statistics.Tools.Center(System.Double[][])">
            <summary>
              Centers column data, subtracting the empirical mean from each variable.
            </summary>
            <param name="matrix">A matrix where each column represent a variable and each row represent a observation.</param>
        </member>
        <member name="M:Accord.Statistics.Tools.Center(System.Double[][],System.Double[])">
            <summary>Centers column data, subtracting the empirical mean from each variable.</summary>
            <param name="matrix">A matrix where each column represent a variable and each row represent a observation.</param>
            <param name="means">The values' mean vector, if already known.</param>
        </member>
        <member name="M:Accord.Statistics.Tools.Standardize(System.Double[0:,0:])">
            <summary>
              Standardizes column data, removing the empirical standard deviation from each variable.
            </summary>
            <param name="matrix">A matrix where each column represent a variable and each row represent a observation.</param>
            <remarks>This method does not remove the empirical mean prior to execution.</remarks>
        </member>
        <member name="M:Accord.Statistics.Tools.Standardize(System.Double[0:,0:],System.Double[])">
            <summary>
              Standardizes column data, removing the empirical standard deviation from each variable.
            </summary>
            <param name="matrix">A matrix where each column represent a variable and each row represent a observation.</param>
            <remarks>This method does not remove the empirical mean prior to execution.</remarks>
            <param name="standardDeviations">The values' standard deviation vector, if already known.</param>
        </member>
        <member name="M:Accord.Statistics.Tools.Standardize(System.Double[][])">
            <summary>
              Standardizes column data, removing the empirical standard deviation from each variable.
            </summary>
            <param name="matrix">A matrix where each column represent a variable and each row represent a observation.</param>
            <remarks>This method does not remove the empirical mean prior to execution.</remarks>
        </member>
        <member name="M:Accord.Statistics.Tools.Standardize(System.Double[][],System.Double[])">
            <summary>
              Standardizes column data, removing the empirical standard deviation from each variable.
            </summary>
            <param name="matrix">A matrix where each column represent a variable and each row represent a observation.</param>
            <remarks>This method does not remove the empirical mean prior to execution.</remarks>
            <param name="standardDeviations">The values' standard deviation vector, if already known.</param>
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedMean(System.Double[][],System.Double[],System.Int32)">
            <summary>
              Calculates the weighted matrix Mean vector.
            </summary>
            <param name="matrix">A matrix whose means will be calculated.</param>
            <param name="weights">A vector containing the importance of each sample in the matrix.</param>
            <param name="dimension">
              The dimension along which the means will be calculated. Pass
              0 to compute a row vector containing the mean of each column,
              or 1 to compute a column vector containing the mean of each row.
              Default value is 0.
            </param>
            <returns>Returns a vector containing the means of the given matrix.</returns>
            
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedCovariance(System.Double[][],System.Double[],System.Double[])">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <param name="means">The values' mean vector, if already known.</param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedCovariance(System.Double[][],System.Double[],System.Int32)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="dimension">
              Pass 0 to if mean vector is a row vector, 1 otherwise. Default value is 0.
            </param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedCovariance(System.Double[][],System.Double[],System.Double[],System.Int32)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <param name="means">The values' mean vector, if already known.</param>
            <param name="dimension">
              Pass 0 to if mean vector is a row vector, 1 otherwise. Default value is 0.
            </param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.WeightedScatter(System.Double[][],System.Double[],System.Double[],System.Double,System.Int32)">
            <summary>
              Calculates the scatter matrix of a sample matrix.
            </summary>
            <remarks>
              By dividing the Scatter matrix by the sample size, we get the population
              Covariance matrix. By dividing by the sample size minus one, we get the
              sample Covariance matrix.
            </remarks>
            <param name="matrix">A number multi-dimensional array containing the matrix values.</param>
            <param name="weights">An unit vector containing the importance of each sample
            in <see param="values"/>. The sum of this array elements should add up to 1.</param>
            <param name="means">The values' mean vector, if already known.</param>
            <param name="divisor">A real number to divide each member of the matrix.</param>
            <param name="dimension">
              Pass 0 to if mean vector is a row vector, 1 otherwise. Default value is 0.
            </param>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Proportions(System.Int32[],System.Int32[])">
            <summary>
              Calculates the prevalence of a class.
            </summary>
            <param name="positives">An array of counts detailing the occurence of the first class.</param>
            <param name="negatives">An array of counts detailing the occurence of the second class.</param>
            <returns>An array containing the proportion of the first class over the total of occurances.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Proportions(System.Int32[][],System.Int32,System.Int32)">
            <summary>
              Calculates the prevalence of a class.
            </summary>
            <param name="data">A matrix containing counted, grouped data.</param>
            <param name="positiveColumn">The index for the column which contains counts for occurence of the first class.</param>
            <param name="negativeColumn">The index for the column which contains counts for occurence of the second class.</param>
            <returns>An array containing the proportion of the first class over the total of occurances.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Group(System.Int32[][],System.Int32,System.Int32)">
            <summary>
              Groups the occurances contained in data matrix of binary (dichotomous) data.
            </summary>
            <param name="data">A data matrix containing at least a column of binary data.</param>
            <param name="labelColumn">Index of the column which contains the group label name.</param>
            <param name="dataColumn">Index of the column which contains the binary [0,1] data.</param>
            <returns>
               A matrix containing the group label in the first column, the number of occurances of the first class
               in the second column and the number of occurances of the second class in the third column.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Extend(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
              Extends a grouped data into a full observation matrix.
            </summary>
            <param name="group">The group labels.</param>
            <param name="positives">
              An array containing he occurence of the positive class
              for each of the groups.</param>
            <param name="negatives">
              An array containing he occurence of the negative class
              for each of the groups.</param>
            <returns>A full sized observation matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Extend(System.Int32[][],System.Int32,System.Int32,System.Int32)">
            <summary>
              Extendes a grouped data into a full observation matrix.
            </summary>
            <param name="data">The grouped data matrix.</param>
            <param name="labelColumn">Index of the column which contains the labels
            in the grouped data matrix. </param>
            <param name="positiveColumn">Index of the column which contains
              the occurances for the first class.</param>
            <param name="negativeColumn">Index of the column which contains
              the occurances for the second class.</param>
            <returns>A full sized observation matrix.</returns>
        </member>
        <member name="M:Accord.Statistics.Tools.Determination(System.Double[],System.Double[])">
            <summary>
              Gets the coefficient of determination, as known as the R-Squared (R²)
            </summary>
            <remarks>
               The coefficient of determination is used in the context of statistical models
               whose main purpose is the prediction of future outcomes on the basis of other
               related information. It is the proportion of variability in a data set that
               is accounted for by the statistical model. It provides a measure of how well
               future outcomes are likely to be predicted by the model.
               
               The R^2 coefficient of determination is a statistical measure of how well the
               regression approximates the real data points. An R^2 of 1.0 indicates that the
               regression perfectly fits the data.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Tools.Random(System.Int32,System.Int32)">
            <summary>
              Returns a random sample of size k from a population of size n.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Tools.Random(System.Int32)">
            <summary>
              Returns a random permutation of size n.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Tools.Shuffle(System.Int32[])">
            <summary>
              Shuffles an array.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Tools.Whitening(System.Double[0:,0:],System.Double[0:,0:]@)">
            <summary>
              Computes the whitening transform for the given data, making
              its covariance matrix equals the identity matrix.
            </summary>
            <param name="value">A matrix where each column represent a
              variable and each row represent a observation.</param>
            <param name="transformMatrix">The base matrix used in the
              transformation.</param>
            <returns>
              The transformed source data (which now has unit variance).
            </returns>
        </member>
        <member name="T:Accord.Statistics.Testing.ChiSquareTest">
            <summary>
              Chi-Square Test (Upper one-tail)
            </summary>
            
            <remarks>
            <para>
              A chi-square test (also chi-squared or χ2  test) is any statistical
              hypothesis test in which the sampling distribution of the test statistic
              is a chi-square distribution when the null hypothesis is true, or any in
              which this is asymptotically true, meaning that the sampling distribution
              (if the null hypothesis is true) can be made to approximate a chi-square
              distribution as closely as desired by making the sample size large enough.</para>
            <para>
              Use the Chi (pronounced KY as in sky) square test to look at whether
              actual data differ from a random distribution.</para>
            <para>
              For example, say you want to find out whether students prefer particular
              T-shirt colors. Assume there are five different colors and each student
              could get one free at registration (there are enough so that everyone
              could choose the same color). If people chose at random, the proportion
              of each color chosen would be equal (about 20% of the total shirts chosen
              would be in each category). You might not be surprised to find 19% of the
              shirts chosen were red and 21% were black, but when do you have enough
              evidence to say people are choosing them non-randomly? This test will
              tell you.</para>
            <para>
              The chi-square goodness of fit is a one-tailed test with the rejection
              region in the right tail.</para>
            <para>
              As a final note, always remember statistical hypotheses can be
              rejected or supported by a test, but not proven.</para>
              
            <para>
              References:
              <list type="bullet">
                <item><description><a href="http://depts.alverno.edu/nsmt/stats.htm">
                  http://depts.alverno.edu/nsmt/stats.htm</a></description></item>
                <item><description><a href="http://www.graphpad.com/articles/pvalue.htm">
                  http://www.graphpad.com/articles/pvalue.htm</a></description></item>
                <item><description><a href="http://www2.lv.psu.edu/jxm57/irp/chisquar.html">
                  http://www2.lv.psu.edu/jxm57/irp/chisquar.html</a></description></item>
                <item><description><a href="http://xudaniel.com/Documents/Chapter13.ppt">
                  http://xudaniel.com/Documents/Chapter13.ppt</a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Testing.ChiSquareTest.#ctor(System.Double,System.Int32,System.Double)">
            <summary>
              Constructs a Chi-Square Test.
            </summary>
            <param name="statistic">The test statistic.</param>
            <param name="degreesOfFreedom">The chi-square distribution degrees of freedom.</param>
            <param name="threshold">The significance threshold. By default, 0.05 will be used.</param>
        </member>
        <member name="M:Accord.Statistics.Testing.ChiSquareTest.#ctor(System.Double,System.Int32)">
            <summary>
              Constructs a Chi-Square Test.
            </summary>
            <param name="statistic">The test statistic.</param>
            <param name="degreesOfFreedom">The chi-square distribution degrees of freedom.</param>
        </member>
        <member name="M:Accord.Statistics.Testing.ChiSquareTest.#ctor(System.Double[],System.Double[],System.Int32,System.Double)">
            <summary>
              Construct a Chi-Square Test.
            </summary>
            <param name="expected">The expected variable values.</param>
            <param name="observed">The observed variable values.</param>
            <param name="degreesOfFreedom">The chi-square distribution degrees of freedom.</param>
            <param name="threshold">The significance threshold. By default, 0.05 will be used.</param>
        </member>
        <member name="P:Accord.Statistics.Testing.ChiSquareTest.DegreesOfFreedom">
            <summary>
              Gets the degrees of freedom for the Chi-Square distribution.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Log">
            <summary>
              Logarithm Kernel.
            </summary>
            <remarks>
              The Log kernel seems to be particularly interesting for
              images, but is only conditionally positive definite.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Log.#ctor(System.Int32)">
            <summary>
              Constructs a new Log Kernel
            </summary>
            <param name="degree">The kernel's degree.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Log.Function(System.Double[],System.Double[])">
            <summary>
              Log Kernel function.
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Log.Degree">
            <summary>
              Gets or sets the kernel's degree.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.DynamicTimeWarping">
            <summary>
              Dynamic Time Warping Sequence Kernel.
            </summary>
            <remarks>
            <para>
              The Dynamic Time Warping Sequence Kernel is a sequence kernel, accepting
              vector sequences of variable size as input. Despite the sequences being
              variable in size, the vectors contained in such sequences should have its
              size fixed and should be informed at the construction of this kernel.</para>
            <para>
              The conversion of the DTW global distance to a dot product uses a combination
              of a technique known as spherical normalization and the polynomial kernel. The
              degree of the polynomial kernel and the alpha for the spherical normalization
              should be given at the construction of the kernel. For more information,
              please see the referenced papers shown below.</para>
              
            <para>
              <list type="bullet">
              References:
                <item><description>
                V. Wan, J. Carmichael; Polynomial Dynamic Time Warping Kernel Support
                Vector Machines for Dysarthric Speech Recognition with Sparse Training
                Data. Interspeech'2005 - Eurospeech - 9th European Conference on Speech
                Communication and Technology. Lisboa, 2005.</description></item>
              </list></para>
            
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.DynamicTimeWarping.#ctor(System.Int32)">
            <summary>
              Constructs a new Dynamic Time Warping kernel.
            </summary>
            <param name="length">
               The length of the feature vectors
               contained in each sequence.
            </param>
        </member>
        <member name="M:Accord.Statistics.Kernels.DynamicTimeWarping.#ctor(System.Int32,System.Double)">
            <summary>
              Constructs a new Dynamic Time Warping kernel.
            </summary>
            <param name="length">
               The length of the feature vectors
               contained in each sequence.
            </param>
            <param name="alpha">
               The hypersphere ratio. Default value is 1.
            </param>
        </member>
        <member name="M:Accord.Statistics.Kernels.DynamicTimeWarping.#ctor(System.Int32,System.Double,System.Int32)">
            <summary>
              Constructs a new Dynamic Time Warping kernel.
            </summary>
            <param name="length">
               The length of the feature vectors
               contained in each sequence.
            </param>
            <param name="alpha">
               The hypersphere ratio. Default value is 1.
            </param>
            <param name="degree">
               The degree of the kernel. Default value is 1 (linear kernel).
            </param>
        </member>
        <member name="M:Accord.Statistics.Kernels.DynamicTimeWarping.Function(System.Double[],System.Double[])">
            <summary>
              Dynamic Time Warping kernel function.
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="M:Accord.Statistics.Kernels.DynamicTimeWarping.D(System.Double[],System.Double[])">
            <summary>
              Global distance D(X,Y) between two sequences of vectors.
            </summary>
            <param name="X">A sequence of vectors.</param>
            <param name="Y">A sequence of vectors.</param>
            <returns>The global distance between X and Y.</returns>
        </member>
        <member name="M:Accord.Statistics.Kernels.DynamicTimeWarping.d(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>
              Local distance d(x,y) between two vectors.
            </summary>
            <param name="X">A sequence of fixed-length vectors X.</param>
            <param name="Y">A sequence of fixed-length vectors Y.</param>
            <param name="ix">The index of the vector in the sequence x.</param>
            <param name="iy">The index of the vector in the sequence y.</param>
            <param name="length">The fixed-length of the vectors in the sequences.</param>
            <returns>The local distance between x and y.</returns>
        </member>
        <member name="M:Accord.Statistics.Kernels.DynamicTimeWarping.snorm(System.Double[])">
            <summary>
              Projects vectors from a sequence of vectors into
              a hypersphere, augmenting their size in one unit
              and normalizing them to be unit vectors.
            </summary>
            <param name="x">A sequence of vectors.</param>
            <returns>A sequence of vector projections.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.DynamicTimeWarping.Length">
            <summary>
              Gets or sets the length for the feature vectors
              contained in each sequence used by the kernel.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Kernels.DynamicTimeWarping.Alpha">
            <summary>
              Gets or sets the hypersphere ratio.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Kernels.DynamicTimeWarping.Degree">
            <summary>
              Gets or sets the polynomial degree for this kernel.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Custom">
            <summary>
              Custom Kernel.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Custom.#ctor(System.Func{System.Double[],System.Double[],System.Double})">
            <summary>
              Constructs a new Custom kernel.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Kernels.Custom.Function(System.Double[],System.Double[])">
            <summary>
              Custom kernel function.
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.VonMisesDistribution">
            <summary>
              von-Mises (Circular Normal) distribution.
            </summary>
            <remarks>
              <para>The von Mises distribution (also known as the circular normal distribution
              or Tikhonov distribution) is a continuous probability distribution on the circle.
              It may be thought of as a close approximation to the wrapped normal distribution,
              which is the circular analogue of the normal distribution.</para>
              
              <para>The wrapped normal distribution describes the distribution of an angle that
              is the result of the addition of many small independent angular deviations, such as
              target sensing, or grain orientation in a granular material. The von Mises distribution
              is more mathematically tractable than the wrapped normal distribution and is the
              preferred distribution for many applications.</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Von_Mises_distribution">
                  http://en.wikipedia.org/wiki/Von_Mises_distribution</a></description></item>
                <item><description><a href="http://cran.r-project.org/web/packages/CircStats/CircStats.pdf">
                  C. Agostinelli. Circular Statistics Reference Manual. 2009. Available on:
                  http://cran.r-project.org/web/packages/CircStats/CircStats.pdf</a></description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a multivariate Gaussian distribution
              with zero mean vector and unitary variance matrix.
            </summary>
            <param name="mean">The mean of the distribution.</param>
            <param name="concentration">The concentration value (kappa) for the distribution.</param>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.DistributionFunction(System.Double)">
            <summary>
              Not supported. The distribution function for the
              von-Mises distribution is not analytic and no
              approximation has been provided yet.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">A single point in the distribution range.</param>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
            Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">The array of observations to fit the model against. The array
            elements can be either of type double (for univariate data) or
            type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            <remarks>
            Although both double[] and double[][] arrays are supported,
            providing a double[] for a multivariate distribution or a
            double[][] for a univariate distribution may have a negative
            impact in performance.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Estimate(System.Double[])">
            <summary>
              Estimates a new von-Mises distribution from a given set of angles.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Estimate(System.Double[],Accord.Statistics.Distributions.Fitting.VonMisesOptions)">
            <summary>
              Estimates a new von-Mises distribution from a given set of angles.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Estimate(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.VonMisesOptions)">
            <summary>
              Estimates a new von-Mises distribution from a given set of angles.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Concentration">
            <summary>
              Gets the concentration (the kappa value) for this distribution.
            </summary>
            <value>The concentration.</value>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.VonMisesDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.FDistribution">
            <summary>
              F (Fisher-Snedecor) distribution.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FDistribution.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs a F-distribution with
              the given degrees of freedom.
            </summary>
            <param name="degrees1">The first degree of freedom.</param>
            <param name="degrees2">The second degree of freedom.</param>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              the F-distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">A single point in the distribution range.</param>
            <returns></returns>
            <remarks>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              the F-distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">A single point in the distribution range.</param>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
              Not available.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.FDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.FDistribution.DegreesOfFreedom1">
            <summary>
              Gets the first degree of freedom.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.FDistribution.DegreesOfFreedom2">
            <summary>
              Gets the second degree of freedom.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.FDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.FDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.FDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.KernelDiscriminantAnalysis">
            <summary>
              Kernel (Fisher) Discriminant Analysis.
            </summary>
            <remarks>
            <para>
              Kernel (Fisher) discriminant analysis (kernel FDA) is a non-linear generalization
              of linear discriminant analysis (LDA) using techniques of kernel methods. Using a
              kernel, the originally linear operations of LDA are done in a reproducing kernel
              Hilbert space with a non-linear mapping.</para>
            <para>
              The algorithm used is a multi-class generalization of the original algorithm by
              Mika et al. in Fisher discriminant analysis with kernels (1999).</para>  
              
            <para>
              References:
              <list type="bullet">
                <item><description>
                  Mika et al, Fisher discriminant analysis with kernels (1999). Available on
                  <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.35.9904">
                  http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.35.9904 </a></description></item>
             </list></para>  
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelDiscriminantAnalysis.#ctor(System.Double[0:,0:],System.Int32[],Accord.Statistics.Kernels.IKernel)">
            <summary>
              Constructs a new Kernel Discriminant Analysis object.
            </summary>
            <param name="inputs">The source data to perform analysis. The matrix should contain
            variables as columns and observations of each variable as rows.</param>
            <param name="output">The labels for each observation row in the input matrix.</param>
            <param name="kernel">The kernel to be used in the analysis.</param>
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelDiscriminantAnalysis.Compute">
            <summary>
              Computes the Multi-Class Kernel Discriminant Analysis algorithm.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelDiscriminantAnalysis.Transform(System.Double[0:,0:],System.Int32)">
            <summary>
              Projects a given matrix into discriminant space.
            </summary>
            <param name="data">The matrix to be projected.</param>
            <param name="dimensions">
              The number of discriminant dimensions to use in the projection.
            </param>
        </member>
        <member name="M:Accord.Statistics.Analysis.KernelDiscriminantAnalysis.DiscriminantFunction(System.Int32,System.Double[])">
            <summary>
              Gets the discriminant function output for class c.
            </summary>
            <param name="i">The class index.</param>
            <param name="projection">The projected input.</param>
        </member>
        <member name="P:Accord.Statistics.Analysis.KernelDiscriminantAnalysis.Kernel">
            <summary>
              Gets the Kernel used in the analysis.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.KernelDiscriminantAnalysis.Regularization">
            <summary>
              Gets or sets the regularization parameter to
              avoid non-singularities at the solution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.KernelDiscriminantAnalysis.Threshold">
            <summary>
              Gets or sets the minimum variance proportion needed to keep a
              discriminant component. If set to zero, all components will be
              kept. Default is 0.001 (all components which contribute less
              than 0.001 to the variance in the data will be discarded).
            </summary>
        </member>
        <member name="T:Accord.Statistics.Visualizations.BinAdjustmentRule">
            <summary>
              Optimum histogram bin size adjustment rule.
            </summary>
        </member>
        <member name="F:Accord.Statistics.Visualizations.BinAdjustmentRule.None">
            <summary>
              Does not attempts to automatically calculate 
              an optimum bin width and preserves the current
              histogram organization.
            </summary>
        </member>
        <member name="F:Accord.Statistics.Visualizations.BinAdjustmentRule.Scott">
            <summary>
              Calculates the optimum bin width as 3.49σN, where σ 
              is the sample standard deviation and N is the number
              of samples.
            </summary>
            <remarks>
              Scott, D. 1979. On optimal and data-based histograms. Biometrika, 66:605-610.
            </remarks>
        </member>
        <member name="F:Accord.Statistics.Visualizations.BinAdjustmentRule.Sturges">
            <summary>
              Calculates the optimum bin width as ceiling( log2(N) + 1 )m
              where N is the number of samples. The rule implicitly bases
              the bin sizes on the range of the data, and can perform poorly
              if n &lt; 30.
            </summary>
        </member>
        <member name="F:Accord.Statistics.Visualizations.BinAdjustmentRule.SquareRoot">
            <summary>
              Calculates the optimum bin width as the square root of the
              number of samples. This is the same rule used by Microsoft (c)
              Excel and many others.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Visualizations.Histogram">
            <summary>
              Histogram.
            </summary>
            
            <remarks>
             <para>
              In a more general mathematical sense, a histogram is a mapping Mi
              that counts the number of observations that fall into various 
              disjoint categories (known as bins).</para>
             <para>
              This class represents a Histogram mapping of Discrete or Continuous
              data. To use it as a discrete mapping, pass a bin size (length) of 1.
              To use it as a continuous mapping, pass any real number instead.</para>
             <para>
              Currently, only a constant bin width is supported.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.#ctor">
            <summary>
              Constructs an empty histogram
            </summary>
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.#ctor(System.String)">
            <summary>
              Constructs an empty histogram
            </summary>
            <param name="title">The title of this histogram.</param>
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.Compute(System.Double[],System.Double)">
            <summary>
              Computes (populates) an Histogram mapping with values from a sample. 
            </summary>
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.Compute(System.Double[],System.Int32)">
            <summary>
              Computes (populates) an Histogram mapping with values from a sample. 
            </summary>
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.Compute(System.Double[],System.Int32,System.Boolean)">
            <summary>
              Computes (populates) an Histogram mapping with values from a sample. 
            </summary>
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.Compute(System.Double[],System.Int32,System.Double)">
            <summary>
              Computes (populates) an Histogram mapping with values from a sample. 
            </summary>
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.Compute(System.Double[])">
            <summary>
              Computes (populates) an Histogram mapping with values from a sample. 
            </summary>
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.initialize(System.Int32)">
            <summary>
              Initializes the histogram's bins.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.initialize(System.Double,System.Double)">
            <summary>
              Sets the histogram's bin ranges (edges).
            </summary>
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.compute(System.Double[])">
            <summary>
              Actually computes the histogram.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.computeNumberOfBins(System.Double[],AForge.DoubleRange,Accord.Statistics.Visualizations.BinAdjustmentRule)">
            <summary>
              Computes the optimum number of bins based on a <see cref="T:Accord.Statistics.Visualizations.BinAdjustmentRule"/>.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.op_Implicit(Accord.Statistics.Visualizations.Histogram)~System.Int32[]">
            <summary>
              Integer array implicit conversion.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Visualizations.Histogram.ToArray">
            <summary>
              Converts this histogram into an integer array representation.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Visualizations.Histogram.Item(System.Int32)">
            <summary>Gets the Bin values of this Histogram.</summary>
            <param name="index">Bin index.</param>
            <returns>The number of hits of the selected bin.</returns>
        </member>
        <member name="P:Accord.Statistics.Visualizations.Histogram.Title">
            <summary>Gets the name for this Histogram.</summary>
        </member>
        <member name="P:Accord.Statistics.Visualizations.Histogram.Values">
            <summary>Gets the Bin values for this Histogram.</summary>
        </member>
        <member name="P:Accord.Statistics.Visualizations.Histogram.Range">
            <summary>Gets the Range of the values in this Histogram.</summary>
        </member>
        <member name="P:Accord.Statistics.Visualizations.Histogram.Edges">
            <summary>Gets the edges of each bin in this Histogram.</summary>
        </member>
        <member name="P:Accord.Statistics.Visualizations.Histogram.Bins">
            <summary>Gets the collection of bins of this Histogram.</summary>
        </member>
        <member name="P:Accord.Statistics.Visualizations.Histogram.Cumulative">
            <summary>
              Gets or sets whether this histogram represents a cumulative distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Visualizations.Histogram.AutoAdjustmentRule">
            <summary>
              Gets or sets the bin size auto adjustment rule
              to be used when computing this histogram from
              new data. Default is <see cref="F:Accord.Statistics.Visualizations.BinAdjustmentRule.SquareRoot"/>.
            </summary>
            <value>The bin size auto adjustment rule.</value>
        </member>
        <member name="P:Accord.Statistics.Visualizations.Histogram.InclusiveUpperBound">
            <summary>
              Gets or sets a value indicating whether the last bin
              should have an inclusive upper bound. Default is <c>true</c>.
            </summary>
            <remarks>
              If set to <c>false</c>, the last bin's range will be defined
              as Edge[i] &lt;= x &lt; Edge[i+1]. If set to <c>true</c>, the
              last bin will have an inclusive upper bound and be defined as
              Edge[i] &lt;= x &lt;= Edge[i+1] instead.
            </remarks>
            <value>
              <c>true</c> if the last bin should have an inclusive upper bound;
              <c>false</c> otherwise.
            </value>
        </member>
        <member name="T:Accord.Statistics.Visualizations.HistogramBinCollection">
            <summary>
              Collection of Histogram bins. This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Visualizations.HistogramBinCollection.Search(System.Double)">
            <summary>
              Searches for a bin containing the specified value.
            </summary>
            <param name="value">The value to search for.</param>
            <returns>The histogram bin containing the searched value.</returns>
        </member>
        <member name="M:Accord.Statistics.Visualizations.HistogramBinCollection.SearchIndex(System.Double)">
            <summary>
              Searchs for the index of the bin containing the specified value.
            </summary>
            <param name="value">The value to search for.</param>
            <returns>The index of the bin containing the specified value.</returns>
        </member>
        <member name="T:Accord.Statistics.Visualizations.HistogramBin">
            <summary>
              Histrogram Bin
            </summary>
            <remarks>
            <para>
              A "bin" is a container, where each element stores the total number of observations of a sample
              whose values lie within a given range. A histogram of a sample consists of a list of such bins
              whose range does not overlap with each other; or in other words, bins that are mutually exclusive.</para>
            <para>
              Unless <see cref="P:Accord.Statistics.Visualizations.Histogram.InclusiveUpperBound"/> is true, the ranges of all bins <c>i</c> are
              defined as Edge[i] &lt;= x &lt; Edge[i+1]. Otherwise, the last bin will have an inclusive upper
              bound (i.e. will be defined as Edge[i] &lt;= x &lt;= Edge[i+1].</para>  
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Visualizations.HistogramBin.Contains(System.Double)">
            <summary>
              Gets whether the Histogram Bin contains the given value.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Visualizations.HistogramBin.Range">
            <summary>Gets the actual range of data this bin represents.</summary>
        </member>
        <member name="P:Accord.Statistics.Visualizations.HistogramBin.Width">
            <summary>Gets the Width (range) for this histogram bin.</summary>
        </member>
        <member name="P:Accord.Statistics.Visualizations.HistogramBin.Value">
            <summary>
              Gets the Value (number of occurances of a variable in a range)
              for this histogram bin.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Regression.Linear.PolynomialRegression">
            <summary>
              Polynomial Linear Regression.
            </summary>
            <remarks>
              In linear regression, the model specification is that the dependent
              variable, y is a linear combination of the parameters (but need not
              be linear in the independent variables). As the linear regression
              has a closed form solution, the regression coefficients can be
              efficiently computed using the Regress method of this class.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.#ctor(System.Int32)">
            <summary>
              Creates a new Polynomial Linear Regression.
            </summary>
            <param name="degree">The degree of the polynomial used by the model.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.Regress(System.Double[],System.Double[])">
            <summary>
              Performs the regression using the input and output
              data, returning the sum of squared errors of the fit.
            </summary>
            <param name="inputs">The input data.</param>
            <param name="outputs">The output data.</param>
            <returns>The regression Sum-of-Squares error.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.Compute(System.Double[])">
            <summary>
              Computes the regressed model output for the given inputs.
            </summary>
            <param name="input">The input data.</param>
            <returns>The computed outputs.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.Compute(System.Double)">
            <summary>
              Computes the regressed model output for the given input.
            </summary>
            <param name="input">The input value.</param>
            <returns>The computed output.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.CoefficientOfDetermination(System.Double[],System.Double[])">
            <summary>
              Gets the coefficient of determination, as known as R² (r-squared).
            </summary>
            <remarks>
              <para>
               The coefficient of determination is used in the context of statistical models
               whose main purpose is the prediction of future outcomes on the basis of other
               related information. It is the proportion of variability in a data set that
               is accounted for by the statistical model. It provides a measure of how well
               future outcomes are likely to be predicted by the model.</para>
              <para>
               The R² coefficient of determination is a statistical measure of how well the
               regression line approximates the real data points. An R² of 1.0 indicates
               that the regression line perfectly fits the data.</para> 
            </remarks>
            <returns>The R² (r-squared) coefficient for the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.CoefficientOfDetermination(System.Double[],System.Double[],System.Boolean)">
            <summary>
              Gets the coefficient of determination, as known as R² (r-squared).
            </summary>
            <remarks>
              <para>
               The coefficient of determination is used in the context of statistical models
               whose main purpose is the prediction of future outcomes on the basis of other
               related information. It is the proportion of variability in a data set that
               is accounted for by the statistical model. It provides a measure of how well
               future outcomes are likely to be predicted by the model.</para>
              <para>
               The R² coefficient of determination is a statistical measure of how well the
               regression line approximates the real data points. An R² of 1.0 indicates
               that the regression line perfectly fits the data.</para> 
            </remarks>
            <returns>The R² (r-squared) coefficient for the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.ToString">
            <summary>
              Returns a System.String representing the regression.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.Accord#Statistics#Models#Regression#Linear#ILinearRegression#Compute(System.Double[])">
            <summary>
              Computes the model output for a given input.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.Degree">
            <summary>
              Gets the degree of the polynomial used by the regression.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.PolynomialRegression.Coefficients">
            <summary>
              Gets the coefficients of the polynomial regression,
              with the first being the higher-order term and the last
              the intercept term.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression">
            <summary>
              Multivariate Linear Regression.
            </summary>
            <remarks>
              Multivariate Linear Regression is a generalization of
              Multiple Linear Regression to allow for multiple outputs.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.#ctor(System.Int32,System.Int32)">
            <summary>
              Creates a new Multivariate Linear Regression.
            </summary>
            <param name="inputs">The number of inputs for the regression.</param>
            <param name="outputs">The number of outputs for the regression.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
              Creates a new Multivariate Linear Regression.
            </summary>
            <param name="inputs">The number of inputs for the regression.</param>
            <param name="outputs">The number of outputs for the regression.</param>
            <param name="intercept">True to use an intercept term, false otherwise. Default is false.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.#ctor(System.Double[0:,0:],System.Double[],System.Boolean)">
            <summary>
              Creates a new Multivariate Linear Regression.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.Regress(System.Double[][],System.Double[][])">
            <summary>
              Performs the regression using the input vectors and output
              vectors, returning the sum of squared errors of the fit.
            </summary>
            <param name="inputs">The input vectors to be used in the regression.</param>
            <param name="outputs">The output values for each input vector.</param>
            <returns>The Sum-Of-Squares error of the regression.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.CoefficientOfDetermination(System.Double[][],System.Double[][])">
            <summary>
              Gets the coefficient of determination, as known as R² (r-squared).
            </summary>
            <remarks>
              <para>
               The coefficient of determination is used in the context of statistical models
               whose main purpose is the prediction of future outcomes on the basis of other
               related information. It is the proportion of variability in a data set that
               is accounted for by the statistical model. It provides a measure of how well
               future outcomes are likely to be predicted by the model.</para>
              <para>
               The R² coefficient of determination is a statistical measure of how well the
               regression line approximates the real data points. An R² of 1.0 indicates
               that the regression line perfectly fits the data.</para> 
            </remarks>
            <returns>The R² (r-squared) coefficient for the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.CoefficientOfDetermination(System.Double[][],System.Double[][],System.Boolean)">
            <summary>
              Gets the coefficient of determination, as known as R² (r-squared).
            </summary>
            <remarks>
              <para>
               The coefficient of determination is used in the context of statistical models
               whose main purpose is the prediction of future outcomes on the basis of other
               related information. It is the proportion of variability in a data set that
               is accounted for by the statistical model. It provides a measure of how well
               future outcomes are likely to be predicted by the model.</para>
              <para>
               The R² coefficient of determination is a statistical measure of how well the
               regression line approximates the real data points. An R² of 1.0 indicates
               that the regression line perfectly fits the data.</para> 
            </remarks>
            <returns>The R² (r-squared) coefficient for the given data.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.Compute(System.Double[])">
            <summary>
              Computes the Multiple Linear Regression output for a given input.
            </summary>
            <param name="input">A input vector.</param>
            <returns>The computed output.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.Compute(System.Double[][])">
            <summary>
              Computes the Multiple Linear Regression output for a given input.
            </summary>
            <param name="input">An array of input vectors.</param>
            <returns>The computed outputs.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.Accord#Statistics#Models#Regression#Linear#ILinearRegression#Compute(System.Double[])">
            <summary>
              Computes the model output for a given input.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.Coefficients">
            <summary>
              Gets the coefficient matrix used by the regression model. Each
              column corresponds to the coefficient vector for each of the outputs.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.Intercepts">
            <summary>
              Gets the intercept vector used by the multivariate regression model.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.Inputs">
            <summary>
              Gets the number of inputs in the model.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Models.Regression.Linear.MultivariateLinearRegression.Outputs">
            <summary>
              Gets the number of outputs in the model.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.HistogramIntersection">
            <summary>
              Generalized Histogram Intersection Kernel.
            </summary>
            <remarks>
              The Generalized Histogram Intersection kernel is built based on the
              Histogram Intersection Kernel for image classification but applies
              in a much larger variety of contexts (Boughorbel, 2005).
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.HistogramIntersection.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a new Generalized Histogram Intersection Kernel.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Kernels.HistogramIntersection.Function(System.Double[],System.Double[])">
            <summary>
              Generalized Histogram Intersection Kernel Function
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="T:Accord.Statistics.Kernels.Bessel">
            <summary>
              Bessel Kernel.
            </summary>
            <remarks>
              The Bessel kernel is well known in the theory of function spaces of fractional smoothness. 
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Bessel.#ctor(System.Int32,System.Double)">
            <summary>
              Constructs a new Bessel Kernel.
            </summary>
            <param name="order">The order for the Bessel function.</param>
            <param name="sigma">The value for sigma.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Bessel.Function(System.Double[],System.Double[])">
            <summary>
              Bessel Kernel Function
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Bessel.Order">
            <summary>
              Gets or sets the order of the Bessel function.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Kernels.Bessel.Sigma">
            <summary>
              Gets or sets the sigma constant for this kernel.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Models.Fields.Learning.QuasiNewtonLearning">
            <summary>
              Quasi-Newton Learning (L-BFGS) learning algorithm for Conditional Random Fields.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.QuasiNewtonLearning.#ctor(Accord.Statistics.Models.Fields.ConditionalRandomField)">
            <summary>
              Constructs a new L-BFGS learning algorithm.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Fields.Learning.QuasiNewtonLearning.Run(System.Int32[][],System.Int32[][])">
            <summary>
            Runs the learning algorithm with the specified input
            training observations and corresponding output labels.
            </summary>
            <param name="observations">The training observations.</param>
            <param name="labels">The observation's labels.</param>
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.NormalDistribution">
            <summary>
              Normal (Gaussian) distribution.
            </summary>
            <remarks>
              The Gaussian is the most widely used distribution for continuous
              variables. In the case of a single variable, it is governed by
              two parameters, the mean and the variance.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.#ctor">
            <summary>
              Constructs a Gaussian distribution with zero mean
              and unit variance.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.#ctor(System.Double)">
            <summary>
              Constructs a Gaussian distribution with given mean
              and unit variance.
            </summary>
            <param name="mean"></param>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a Gaussian distribution with given mean
              and given variance.
            </summary>
            <param name="mean"></param>
            <param name="variance"></param>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.DistributionFunction(System.Double)">
            <summary>
              Gets the cumulative distribution function (cdf) for
              the this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range.</param>
            <remarks>
            <para>
              The Cumulative Distribution Function (CDF) describes the cumulative
              probability that a given value or any value smaller than it will occur.</para>
            <para>
             The calculation is computed through the relationship to
             the function as <see cref="M:Accord.Math.Special.Erfc(System.Double)">erfc</see>(-z/sqrt(2)) / 2.</para>  
             
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://mathworld.wolfram.com/NormalDistributionFunction.html">
                  http://mathworld.wolfram.com/NormalDistributionFunction.html</a></description></item>
              </list></para>
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.ProbabilityDensityFunction(System.Double)">
            <summary>
              Gets the probability density function (pdf) for
              the Gaussian distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">A single point in the distribution range. For a
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.ZScore(System.Double)">
            <summary>
              Gets the Z-Score for a given value.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
            Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">The array of observations to fit the model against. The array
            elements can be either of type double (for univariate data) or
            type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            <remarks>
            Although both double[] and double[][] arrays are supported,
            providing a double[] for a multivariate distribution or a
            double[][] for a univariate distribution may have a negative
            impact in performance.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.NormalDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NormalDistribution.Mean">
            <summary>
              Gets the Mean for the Gaussian distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NormalDistribution.Variance">
            <summary>
              Gets the Variance for the Gaussian distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NormalDistribution.Entropy">
            <summary>
              Gets the Entropy for the Gaussian distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.NormalDistribution.Standard">
            <summary>
              Gets the Standard Gaussian Distribution,
              with zero mean and unit variance.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution">
            <summary>
              Univariate generic discrete distribution, also referred as the
              Categorical distribution.
            </summary>
            <remarks>
             <para>
              An univariate categorical distribution is a statistical distribution
              whose variables can take on only discrete values. Each discrete
              value defined within the interval of the distribution has an
              associated probability value indicating its frequency of occurrence.</para>
             <para>
              The discrete uniform distribution is a special case of a generic
              discrete distribution whose probability values are constant.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.#ctor(System.Int32,System.Double[])">
            <summary>
              Constructs a new generic discrete distribution.
            </summary>
            <param name="start">
              The integer value where the distribution starts, also
              known as the offset value. Default value is 0.</param>
            <param name="probabilities">
              The frequency of occurrence for each integer value in the
              distribution. The distribution is assumed to begin in the
              interval defined by start up to size of this vector.</param>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.#ctor(System.Int32,System.Int32)">
            <summary>
              Constructs a new uniform discrete distribution.
            </summary>
            <param name="start">
              The integer value where the distribution starts, also
              known as the offset value. Default value is 0.</param>
            <param name="symbols">
              The number of discrete values within the distribution.
              The distribution is assumed to belong to the interval
              [start, start + symbols].</param>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.#ctor(System.Double[])">
            <summary>
              Constructs a new generic discrete distribution.
            </summary>
            <param name="probabilities">
              The frequency of occurrence for each integer value in the
              distribution. The distribution is assumed to begin in the
              interval defined by start up to size of this vector.</param>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.#ctor(System.Int32)">
            <summary>
              Constructs a new uniform discrete distribution.
            </summary>
            <param name="symbols">
              The number of discrete values within the distribution.
              The distribution is assumed to belong to the interval
              [start, start + symbols].</param>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.DistributionFunction(System.Int32)">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range. For a 
              univariate distribution, this should be a single
              double value. For a multivariate distribution,
              this should be a double array.</param>
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.ProbabilityMassFunction(System.Int32)">
            <summary>
              Gets the probability mass function (pmf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">
              A single point in the distribution range.</param>
            <remarks>
              The Probability Mass Function (PMF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.</returns>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
            Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">The array of observations to fit the model against. The array
            elements can be either of type double (for univariate data) or
            type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            <remarks>
            Although both double[] and double[][] arrays are supported,
            providing a double[] for a multivariate distribution or a
            double[][] for a univariate distribution may have a negative
            impact in performance.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Start">
            <summary>
              Gets the integer value where the
              discrete distribution starts.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.End">
            <summary>
              Gets the integer value where the
              discrete distribution ends.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Frequencies">
            <summary>
              Gets the probabilities associated
              with each discrete variable value.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Variance">
            <summary>
              Gets the variance for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Univariate.GeneralDiscreteDistribution.Entropy">
            <summary>
              Gets the entropy for this distribution.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.PrincipalComponent">
            <summary>
              Represents a Principal Component found in the Principal Component Analysis,
              allowing it to be bound to controls like the DataGridView. This class cannot
              be instantiated outside the PrincipalComponentAnalysis.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PrincipalComponent.#ctor(Accord.Statistics.Analysis.PrincipalComponentAnalysis,System.Int32)">
            <summary>
              Creates a principal component representation.
            </summary>
            <param name="analysis">The analysis to which this component belongs.</param>
            <param name="index">The component index.</param>
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponent.Index">
            <summary>Gets the Index of this component on the original analysis principal component collection.</summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponent.Analysis">
            <summary>Returns a reference to the parent analysis object.</summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponent.Proportion">
            <summary>Gets the proportion of data this component represents.</summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponent.CumulativeProportion">
            <summary>Gets the cumulative proportion of data this component represents.</summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponent.SingularValue">
            <summary>If available, gets the Singular Value of this component found during the Analysis.</summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponent.Eigenvalue">
            <summary>Gets the Eigenvalue of this component found during the analysis.</summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.PrincipalComponent.Eigenvector">
            <summary>Gets the Eigenvector of this component.</summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.PrincipalComponentCollection">
            <summary>
              Represents a Collection of Principal Components found in the Principal Component Analysis.
              This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Kernels.Sigmoid">
            <summary>
              Sigmoid Kernel.
            </summary>
            <remarks>
              Sigmoid kernels are not positive definite and therefore do not induce
              a reproducing kernel Hilbert space. However, they have been successfully
              used in practice (Scholkopf and Smola, 2002).
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sigmoid.#ctor(System.Double,System.Double)">
            <summary>
              Constructs a Sigmoid kernel.
            </summary>
            <param name="alpha">Alpha parameter.</param>
            <param name="constant">Constant parameter.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Sigmoid.Function(System.Double[],System.Double[])">
            <summary>
              Sigmoid kernel function.
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Sigmoid.Gamma">
            <summary>
              Gets or sets the kernel's gamma parameter.
            </summary>
            <remarks>
              In a sigmoid kernel, gamma is a inner product
              coefficient for the hyperbolic tangent function.
            </remarks>
        </member>
        <member name="P:Accord.Statistics.Kernels.Sigmoid.Constant">
            <summary>
              Gets or sets the kernel's constant term.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Filters.CodificationFilter">
            <summary>
              Codification Filter class.
            </summary>
            <remarks>
              The codification filter performs an integer codification of classes in
              given in a string form. An unique integer identifier will be assigned
              for each of the string classes.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Filters.CodificationFilter.#ctor">
            <summary>
              Creates a new Codification Filter.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Filters.CodificationFilter.ProcessFilter(System.Data.DataTable)">
            <summary>
              Processes the current filter.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Filters.CodificationFilter.Detect(System.Data.DataTable)">
            <summary>
              Auto detects the filter options by analyzing a given <see cref="T:System.Data.DataTable"/>.
            </summary> 
             
        </member>
        <member name="T:Accord.Statistics.Filters.CodificationFilter.Options">
            <summary>
              Options for processing a column.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.CodificationFilter.Options.#ctor(System.String)">
            <summary>
              Constructs a new Options object for the given column.
            </summary>
            <param name="name">
              The name of the column to create this options for.
            </param>
        </member>
        <member name="M:Accord.Statistics.Filters.CodificationFilter.Options.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
              Constructs a new Options object for the given column.
            </summary>
            <param name="name">
              The name of the column to create this options for.
            </param>
            <param name="map">The initial mapping for this column.</param>
        </member>
        <member name="M:Accord.Statistics.Filters.CodificationFilter.Options.#ctor">
            <summary>
              Constructs a new Options object.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Filters.CodificationFilter.Options.Mapping">
            <summary>
              Gets or sets the label mapping for translating
              integer labels to the original string labels.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Filters.EqualizationFilter">
            <summary>
              Class equalization filter.
            </summary>
            <remarks>
              Currently this class does only work for a single
              column and only for the binary case (two classes).
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Filters.EqualizationFilter.#ctor">
            <summary>
              Creates a new class equalization filter.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Filters.EqualizationFilter.#ctor(System.String)">
            <summary>
              Creates a new classes equalization filter.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Accord.Statistics.Filters.EqualizationFilter.ProcessFilter(System.Data.DataTable)">
            <summary>
              Processes the current filter.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Filters.EqualizationFilter.Options">
            <summary>
              Options for the equalization filter.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Filters.EqualizationFilter.Options.#ctor(System.String)">
            <summary>
              Constructs a new Options object for the given column.
            </summary>
            <param name="name">
              The name of the column to create this options for.
            </param>
        </member>
        <member name="M:Accord.Statistics.Filters.EqualizationFilter.Options.#ctor">
            <summary>
              Constructs a new Options object.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Filters.EqualizationFilter.Options.Classes">
            <summary>
              Gets or sets the labels used for each class contained in the column.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.PartialLeastSquaresAlgorithm">
            <summary>
              The PLS algorithm to use in the Partial Least Squares Analysis.
            </summary>
        </member>
        <member name="F:Accord.Statistics.Analysis.PartialLeastSquaresAlgorithm.SIMPLS">
            <summary>
              Sijmen de Jong's SIMPLS algorithm.
            </summary>
            <remarks>
              The SIMPLS algorithm is considerably faster than NIPALS, especially when the number of
              input variables increases; but gives slightly different results in the case of multiple
              outputs.
            </remarks>
        </member>
        <member name="F:Accord.Statistics.Analysis.PartialLeastSquaresAlgorithm.NIPALS">
            <summary>
              Traditional NIPALS algorithm.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis">
             <summary>
               Partial Least Squares Regression/Analysis (a.k.a Projection To Latent Structures)
             </summary>
             <remarks>
             <para>
               Partial least squares regression (PLS-regression) is a statistical method that bears
               some relation to principal components regression; instead of finding hyperplanes of 
               maximum variance between the response and independent variables, it finds a linear 
               regression model by projecting the predicted variables and the observable variables 
               to a new space. Because both the X and Y data are projected to new spaces, the PLS 
               family of methods are known as bilinear factor models.</para>
            
             <para>
               References:
               <list type="bullet">
                 <item><description>
                   Abdi, H. (2010). Partial least square regression, projection on latent structure regression,
                   PLS-Regression. Wiley Interdisciplinary Reviews: Computational Statistics, 2, 97-106. 
                   Available in: http://www.utdallas.edu/~herve/abdi-wireCS-PLS2010.pdf</description></item>
                 <item><description>
                   Abdi, H. (2007). Partial least square regression (PLS regression). In N.J. Salkind (Ed.):
                   Encyclopedia of Measurement and Statistics. Thousand Oaks (CA): Sage. pp. 740-744.
                   Resource available online in: http://www.utdallas.edu/~herve/Abdi-PLS-pretty.pdf</description></item>
                 <item><description>
                   Mevik, B-H; Wehrens, R. The pls Package: Principal Component and Partial Least Squares
                   Regression in R. Journal of Statistical Software, Volume 18, Issue 2, 2007.
                   Resource available online in: http://www.jstatsoft.org/v18/i02/paper</description></item>
                 <item><description>
                   Garson, D. Partial Least Squares Regression (PLS).
                   http://faculty.chass.ncsu.edu/garson/PA765/pls.htm</description></item>
                 <item><description>
                   De Jong, S., 1993. SIMPLS: an alternative approach to partial least squares regression.
                   Chemometrics and Intelligent Laboratory Systems, 18: 251–263.
                   http://dx.doi.org/10.1016/0169-7439(93)85002-X</description></item>
               </list></para>   
             </remarks>
             
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.#ctor(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>Constructs a new Partial Least Squares Analysis.</summary>
            <param name="inputs">The input source data to perform analysis.</param>
            <param name="outputs">The output source data to perform analysis.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.#ctor(System.Double[0:,0:],System.Double[0:,0:],Accord.Statistics.Analysis.AnalysisMethod,Accord.Statistics.Analysis.PartialLeastSquaresAlgorithm)">
            <summary>Constructs a new Partial Least Squares Analysis.</summary>
            <param name="inputs">The input source data to perform analysis.</param>
            <param name="outputs">The output source data to perform analysis.</param>
            <param name="method">The analysis method to perform. Default is <see cref="F:Accord.Statistics.Analysis.AnalysisMethod.Center"/>.</param>
            <param name="algorithm">The PLS algorithm to use in the analysis. Default is <see cref="F:Accord.Statistics.Analysis.PartialLeastSquaresAlgorithm.NIPALS"/>.</param>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Compute">
            <summary>
              Computes the Partial Least Squares Analysis.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Compute(System.Int32)">
            <summary>
              Computes the Partial Least Squares Analysis.
            </summary>
            <param name="factors">
              The number of factors to compute. The number of factors
              should be a value between 1 and min(rows-1,cols) where
              rows and columns are the number of observations and
              variables in the input source data matrix. </param>
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Transform(System.Double[0:,0:])">
            <summary>
              Projects a given set of inputs into latent space.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Transform(System.Double[0:,0:],System.Int32)">
            <summary>
              Projects a given set of inputs into latent space.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.TransformOutput(System.Double[0:,0:])">
            <summary>
              Projects a given set of outputs into latent space.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.TransformOutput(System.Double[0:,0:],System.Int32)">
            <summary>
              Projects a given set of outputs into latent space.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.CreateRegression">
            <summary>
              Creates a Multivariate Linear Regression model using
              coefficients obtained by the Partial Least Squares.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.CreateRegression(System.Int32)">
            <summary>
              Creates a Multivariate Linear Regression model using
              coefficients obtained by the Partial Least Squares.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.nipals(System.Double[0:,0:],System.Double[0:,0:],System.Int32,System.Double)">
            <summary>
              Computes PLS parameters using NIPALS algorithm.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.simpls(System.Double[0:,0:],System.Double[0:,0:],System.Int32)">
            <summary>
              Computes PLS parameters using SIMPLS algorithm.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Adjust(System.Double[0:,0:],System.Double[],System.Double[])">
            <summary>
              Adjusts a data matrix, centering and standardizing its values
              using the already computed column's means and standard deviations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.largest(System.Double[0:,0:])">
            <summary>
              Returns the index for the column with largest squared sum.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.ComputeVariableImportanceInProjection(System.Int32)">
            <summary>
              Computes the variable importance in projection (VIP)
            </summary>
            <returns>
              A predictors x factors matrix in which each row represents
              the importance of the variable in a projection considering
              the number of factors indicated by the column.
            </returns>
            <remarks>
              References:
               - http://mevik.net/work/software/VIP.R
               - http://www.postech.ac.kr/~chjun/publication/Chemometrics/chemo05.pdf
            </remarks>
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Source">
            <summary>
              Source data used in the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Output">
            <summary>
              Gets the the dependent variables' values
              for each of the source input points.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Predictors">
            <summary>
              Gets information about independent (input) variables.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Dependents">
            <summary>
              Gets information about dependent (output) variables.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Weights">
            <summary>
              Gets the Weight matrix obtained during the analysis. For the NIPALS algorithm
              this is the W matrix. For the SIMPLS algorithm this is the R matrix.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Factors">
            <summary>
              Gets information about the factors discovered during the analysis in a
              object-oriented structure which can be databound directly to many controls.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Algorithm">
            <summary>
              Gets the PLS algorithm used by the analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Method">
            <summary>
              Gets the method used by this analysis.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresAnalysis.Importance">
            <summary>
              Gets the Variable Importance in Projection (VIP).
            </summary>
            <remarks>
              This method has been implemented considering only PLS
              models fitted using the NIPALS algorithm containing a
              single response (output) variable.
            </remarks>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.PartialLeastSquaresFactor">
            <summary>
              Represents a Partial Least Squares Factor found in the Partial Least Squares
              Analysis, allowing it to be directly bound to controls like the DataGridView.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresFactor.#ctor(Accord.Statistics.Analysis.PartialLeastSquaresAnalysis,System.Int32)">
            <summary>
              Creates a partial least squares factor representation.
            </summary>
            <param name="analysis">The analysis to which this component belongs.</param>
            <param name="index">The component index.</param>
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.Index">
            <summary>
              Gets the Index of this component on the original factor collection.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.Analysis">
            <summary>
              Returns a reference to the parent analysis object.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.PredictorProportion">
            <summary>
              Gets the proportion of prediction variables
              variance explained by this factor.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.PredictorCumulativeProportion">
            <summary>
              Gets the cumulative proportion of dependent variables
              variance explained by this factor.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.DependentProportion">
            <summary>
              Gets the proportion of dependent variable
              variance explained by this factor.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.DependentCumulativeProportion">
            <summary>
              Gets the cumulative proportion of dependent variable
              variance explained by this factor.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.IndependentLatentVectors">
            <summary>
              Gets the input variable's latent vectors for this factor.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.DependentLatentVector">
            <summary>
              Gets the output variable's latent vectors for this factor.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresFactor.VariableImportance">
            <summary>
              Gets the importance of each variable for the given component.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Analysis.PartialLeastSquaresFactorCollection">
            <summary>
              Represents a Collection of Partial Least Squares Factors found in
              the Partial Least Squares Analysis. This class cannot be instantiated.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Analysis.PartialLeastSquaresVariables">
            <summary>
              Represents source variables used in Partial Least Squares Analysis. Can represent either
              input variables (predictor variables) or output variables (independent variables or regressors).
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresVariables.Transform(System.Double[0:,0:])">
            <summary>
              Projects a given dataset into latent space. Can be either input variable's
              latent space or output variable's latent space, depending if the variables
              chosen are predictor variables or dependent variables, respectively.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Analysis.PartialLeastSquaresVariables.Transform(System.Double[0:,0:],System.Int32)">
            <summary>
              Projects a given dataset into latent space. Can be either input variable's
              latent space or output variable's latent space, depending if the variables
              chosen are predictor variables or dependent variables, respectively.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresVariables.Source">
            <summary>
              Source data used in the analysis. Can be either input data
              or output data depending if the variables chosen are predictor
              variables or dependent variables, respectively.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresVariables.Result">
            <summary>
              Gets the resulting projection (scores) of the source data
              into latent space. Can be either from input data or output
              data depending if the variables chosen are predictor variables
              or dependent variables, respectively.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresVariables.Means">
            <summary>
              Gets the column means of the source data. Can be either from
              input data or output data, depending if the variables chosen
              are predictor variables or dependent variables, respectively.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresVariables.StandardDeviations">
            <summary>
              Gets the column standard deviations of the source data. Can be either 
              from input data or output data, depending if the variables chosen are
              predictor variables or dependent variables, respectively.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresVariables.FactorMatrix">
            <summary>
              Gets the loadings (a.k.a factors or components) for the 
              variables obtained during the analysis. Can be either from
              input data or output data, depending if the variables chosen
              are predictor variables or dependent variables, respectively.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresVariables.FactorProportions">
            <summary>
              Gets the amount of variance explained by each latent factor.
              Can be either by input variables' latent factors or output
              variables' latent factors, depending if the variables chosen
              are predictor variables or dependent variables, respectively.
            </summary>
            
        </member>
        <member name="P:Accord.Statistics.Analysis.PartialLeastSquaresVariables.CumulativeProportions">
            <summary>
              Gets the cumulative variance explained by each latent factor.
              Can be either by input variables' latent factors or output
              variables' latent factors, depending if the variables chosen
              are predictor variables or dependent variables, respectively.
            </summary>
            
        </member>
        <member name="T:Accord.Statistics.Running.RunningNormalStatistics">
            <summary>
              Running (normal) statistics.
            </summary>
            
            <remarks>
            
            <para>
              This class computes the running variance using Welford’s method. Running statistics 
              need only one pass over the data, and do not require all data to be available prior
              to computing.
            </para>
            
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://www.johndcook.com/standard_deviation.html">
                  John D. Cook. Accurately computing running variance. Available on:
                  http://www.johndcook.com/standard_deviation.html</a></description></item>
                <item><description>
                  Chan, Tony F.; Golub, Gene H.; LeVeque, Randall J. (1983). Algorithms for 
                  Computing the Sample Variance: Analysis and Recommendations. The American
                  Statistician 37, 242-247.</description></item>
                <item><description>
                  Ling, Robert F. (1974). Comparison of Several Algorithms for Computing Sample
                  Means and Variances. Journal of the American Statistical Association, Vol. 69,
                  No. 348, 859-866.</description></item>
              </list></para>
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Running.RunningNormalStatistics.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.Statistics.Running.RunningNormalStatistics"/> class.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Running.RunningNormalStatistics.Push(System.Double)">
            <summary>
            Registers the occurance of a value.
            </summary>
            <param name="value">The value to be registered.</param>
        </member>
        <member name="M:Accord.Statistics.Running.RunningNormalStatistics.Clear">
            <summary>
            Clears all measures previously computed.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Running.RunningNormalStatistics.Mean">
            <summary>
            Gets the current mean of the gathered values.
            </summary>
            <value>The mean of the values.</value>
        </member>
        <member name="P:Accord.Statistics.Running.RunningNormalStatistics.Variance">
            <summary>
            Gets the current variance of the gathered values.
            </summary>
            <value>The variance of the values.</value>
        </member>
        <member name="P:Accord.Statistics.Running.RunningNormalStatistics.StandardDeviation">
            <summary>
            Gets the current standard deviation of the gathered values.
            </summary>
            <value>The standard deviation of the values.</value>
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning">
            <summary>
              Baum-Welch learning algorithm for discrete density Hidden Markov Models.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning.#ctor(Accord.Statistics.Models.Markov.HiddenMarkovModel)">
            <summary>
              Creates a new instance of the Baum-Welch learning algorithm.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning.Run(System.Int32[][])">
            <summary>
              Runs the Baum-Welch learning algorithm for hidden Markov models.
            </summary>
            <param name="observations">An array of observation sequences to be used to train the model.</param>
            <returns>
              The average log-likelihood for the observations after the model has been trained.
            </returns>
            <remarks>
              Learning problem. Given some training observation sequences O = {o1, o2, ..., oK}
              and general structure of HMM (numbers of hidden and visible states), determine
              HMM parameters M = (A, B, pi) that best fit training data.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning.Accord#Statistics#Models#Markov#Learning#IUnsupervisedLearning#Run(System.Array[])">
            <summary>
              Runs the Baum-Welch learning algorithm for hidden Markov models.
            </summary>
            <param name="observations">The sequences of univariate or multivariate observations used to train the model.
              Can be either of type double[] (for the univariate case) or double[][] for the
              multivariate case.</param>
            <returns>
              The average log-likelihood for the observations after the model has been trained.
            </returns>
            <remarks>
              Learning problem. Given some training observation sequences O = {o1, o2, ..., oK}
              and general structure of HMM (numbers of hidden and visible states), determine
              HMM parameters M = (A, B, pi) that best fit training data.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning.ComputeForwardBackward(System.Int32,System.Double[0:,0:]@,System.Double[0:,0:]@,System.Double[]@)">
            <summary>
              Computes the forward and backward probabilities matrices
              for a given observation referenced by its index in the
              input training data.
            </summary>
            <param name="index">The index of the observation in the input training data.</param>
            <param name="fwd">Returns the computed forward probabilities matrix.</param>
            <param name="bwd">Returns the computed backward probabilities matrix.</param>
            <param name="scaling">Returns the scaling parameters used during calculations.</param>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning.UpdateEmissions">
            <summary>
              Updates the emission probability matrix.
            </summary>
            <remarks>
              Implementations of this method should use the observations
              in the training data and the Gamma probability matrix to
              update the probability distributions of symbol emissions.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.BaumWelchLearning.ComputeKsi(System.Int32,System.Double[0:,0:],System.Double[0:,0:],System.Double[])">
            <summary>
              Computes the ksi matrix of probabilities for a given observation
              referenced by its index in the input training data.
            </summary>
            <param name="index">The index of the observation in the input training data.</param>
            <param name="fwd">The matrix of forward probabilities for the observation.</param>
            <param name="bwd">The matrix of backward probabilities for the observation.</param>
            <param name="scaling">The scaling vector computed in previous calculations.</param>
        </member>
        <member name="T:Accord.Statistics.Models.Markov.Learning.SequenceClassifierLearning">
             <summary>
               Discrete-density hidden Markov Sequence Classifier learning algorithm.
             </summary>
             
             <example>
               <code>
               // Declare some testing data
               int[][] inputs = new int[][]
               {
                   new int[] { 0,1,1,0 },   // Class 0
                   new int[] { 0,0,1,0 },   // Class 0
                   new int[] { 0,1,1,1,0 }, // Class 0
                   new int[] { 0,1,0 },     // Class 0
               
                   new int[] { 1,0,0,1 },   // Class 1
                   new int[] { 1,1,0,1 },   // Class 1
                   new int[] { 1,0,0,0,1 }, // Class 1
                   new int[] { 1,0,1 },     // Class 1
               };
               
               int[] outputs = new int[]
               {
                   0,0,0,0, // First four sequences are of class 0
                   1,1,1,1, // Last four sequences are of class 1
               };
               
               
               // We are trying to predict two different classes
               int classes = 2;
            
               // Each sequence may have up to two symbols (0 or 1)
               int symbols = 2;
            
               // Nested models will have two states each
               int[] states = new int[] { 2, 2 };
            
               // Creates a new Hidden Markov Model Sequence Classifier with the given parameters
               SequenceClassifier classifier = new SequenceClassifier(classes, states, symbols);
               
               // Create a new learning algorithm to train the sequence classifier
               var teacher = new SequenceClassifierLearning(classifier,
               
                   // Train each model until the log-likelihood changes less than 0.001
                   modelIndex => new BaumWelchLearning(classifier.Models[modelIndex])
                   {
                       Tolerance = 0.001,
                       Iterations = 0
                   }
               );
               
               // Train the sequence classifier using the algorithm
               double likelihood = teacher.Run(inputs, outputs);
               
               </code>
             </example>
             
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.SequenceClassifierLearning.#ctor(Accord.Statistics.Models.Markov.SequenceClassifier,Accord.Statistics.Models.Markov.Learning.ClassifierLearningAlgorithmConfiguration)">
            <summary>
              Creates a new instance of the learning algorithm for a given 
              Markov sequence classifier using the specified configuration
              function.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.SequenceClassifierLearning.Run(System.Int32[][],System.Int32[])">
            <summary>
              Trains each model to recognize each of the output labels.
            </summary>
            <returns>The sum log-likelihood for all models after training.</returns>
        </member>
        <member name="M:Accord.Statistics.Models.Markov.Learning.SequenceClassifierLearning.Threshold">
            <summary>
              Creates a new <see cref="M:Accord.Statistics.Models.Markov.Learning.SequenceClassifierLearning.Threshold">threshold model</see>
              for the current set of Markov models in this sequence classifier.
            </summary>
            <returns>
              A <see cref="M:Accord.Statistics.Models.Markov.Learning.SequenceClassifierLearning.Threshold">threshold Markov model</see>.
            </returns>
        </member>
        <member name="P:Accord.Statistics.Models.Markov.Learning.SequenceClassifierLearning.Smoothing">
            <summary>
              Gets or sets the smoothing kernel's sigma
              for the threshold model.
            </summary>
            <value>The smoothing kernel's sigma.</value>
        </member>
        <member name="T:Accord.Statistics.Kernels.Sparse.SparseLinear">
            <summary>
              Sparse Linear Kernel.
            </summary>
            <remarks>
              The Sparse Linear kernel accepts inputs in the libsvm sparse format.
            </remarks>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseLinear.#ctor(System.Double)">
            <summary>
              Constructs a new Sparse Linear kernel.
            </summary>
            <param name="constant">A constant intercept term.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseLinear.#ctor">
            <summary>
              Constructs a new Sparse Linear Kernel.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseLinear.Function(System.Double[],System.Double[])">
            <summary>
              Sparse Linear kernel function.
            </summary>
            <param name="x">Sparse vector <c>x</c> in input space.</param>
            <param name="y">Sparse vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="M:Accord.Statistics.Kernels.Sparse.SparseLinear.Distance(System.Double[],System.Double[])">
            <summary>
              Computes the distance in input space
              between two points given in feature space.
            </summary>
            <param name="x">Vector <c>x</c> in feature (kernel) space.</param>
            <param name="y">Vector <c>y</c> in feature (kernel) space.</param>
            <returns>Distance between <c>x</c> and <c>y</c> in input space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Sparse.SparseLinear.Constant">
            <summary>
              Gets or sets the kernel's intercept term.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Kernels.Additive">
            <summary>
              Additive combination of kernels.
            </summary>
            
        </member>
        <member name="M:Accord.Statistics.Kernels.Additive.#ctor(Accord.Statistics.Kernels.IKernel[])">
            <summary>
              Constructs a new additive kernel.
            </summary>
            <param name="kernels">Kernels to combine.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Additive.#ctor(Accord.Statistics.Kernels.IKernel[],System.Double[])">
            <summary>
              Constructs a new additive kernel.
            </summary>
            <param name="kernels">Kernels to combine.</param>
            <param name="weights">
              Weight values for each of the kernels.
              Default is to assign equal weights.</param>
        </member>
        <member name="M:Accord.Statistics.Kernels.Additive.Function(System.Double[],System.Double[])">
            <summary>
              Additive Kernel Combination function.
            </summary>
            <param name="x">Vector <c>x</c> in input space.</param>
            <param name="y">Vector <c>y</c> in input space.</param>
            <returns>Dot product in feature (kernel) space.</returns>
        </member>
        <member name="P:Accord.Statistics.Kernels.Additive.Kernels">
            <summary>
              Gets the combination of kernels to use.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Kernels.Additive.Weights">
            <summary>
              Gets the weight array to use in the weighted kernel sum.
            </summary>
        </member>
        <member name="T:Accord.Statistics.Distributions.Multivariate.Mixture`1">
            <summary>
              Mixture of multivariate probability distributions.
            </summary>
            <remarks>
            <para>
              A mixture density is a probability density function which is expressed
              as a convex combination (i.e. a weighted sum, with non-negative weights
              that sum to 1) of other probability density functions. The individual
              density functions that are combined to make the mixture density are
              called the mixture components, and the weights associated with each
              component are called the mixture weights.</para>
              
            <para>    
              References:
              <list type="bullet">
                <item><description><a href="http://en.wikipedia.org/wiki/Mixture_density">
                  http://en.wikipedia.org/wiki/Mixture_density</a></description></item>
              </list></para>
            </remarks>
              
            <typeparam name="T">
              The type of the multivariate component distributions.</typeparam>
              
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Mixture`1.#ctor(`0[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Multivariate.Mixture`1"/> class.
            </summary>
            <param name="components">The mixture distribution components.</param>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Mixture`1.#ctor(System.Double[],`0[])">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Statistics.Distributions.Multivariate.Mixture`1"/> class.
            </summary>
            <param name="coefficients">The mixture weight coefficients.</param>
            <param name="components">The mixture distribution components.</param>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Mixture`1.ProbabilityDensityFunction(System.Int32,System.Double[])">
            <summary>
              Gets the probability density function (pdf) for one of
              the components distributions evaluated at point <c>x</c>.
            </summary>
            <param name="componentIndex">The index of the desired component distribution.</param>
            <param name="x">A single point in the distribution range.</param>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Mixture`1.ProbabilityDensityFunction(System.Double[])">
            <summary>
              Gets the probability density function (pdf) for
              this distribution evaluated at point <c>x</c>.
            </summary>
            <param name="x">A single point in the distribution range.</param>
            <returns>
              The probability of <c>x</c> occurring
              in the current distribution.
            </returns>
            <remarks>
              The Probability Density Function (PDF) describes the
              probability that a given value <c>x</c> will occur.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Mixture`1.DistributionFunction(System.Double[])">
            <summary>
              This method is not supported.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Mixture`1.Fit(System.Double[][],System.Double[],Accord.Statistics.Distributions.Fitting.IFittingOptions)">
            <summary>
            Fits the underlying distribution to a given set of observations.
            </summary>
            <param name="observations">The array of observations to fit the model against. The array
            elements can be either of type double (for univariate data) or
            type double[] (for multivariate data).</param>
            <param name="weights">The weight vector containing the weight for each of the samples.</param>
            <param name="options">Optional arguments which may be used during fitting, such
            as regularization constants and additional parameters.</param>
            <remarks>
            Although both double[] and double[][] arrays are supported,
            providing a double[] for a multivariate distribution or a
            double[][] for a univariate distribution may have a negative
            impact in performance.
            </remarks>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Mixture`1.LogLikelihood(System.Double[][],System.Double[])">
            <summary>
              Computes the log-likelihood of the distribution
              for a given set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Mixture`1.LogLikelihood(System.Double[][])">
            <summary>
              Computes the log-likelihood of the distribution
              for a given set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Mixture`1.logLikelihood(System.Double[],`0[],System.Double[][],System.Double[])">
            <summary>
              Computes the log-likelihood of the distribution
              for a given set of observations.
            </summary>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Mixture`1.Clone">
            <summary>
              Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
              A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Mixture`1.Estimate(System.Double[][],`0[])">
            <summary>
              Estimates a new mixture model from a given set of observations.
            </summary>
            <param name="data">A set of observations.</param>
            <param name="components">The initial components of the mixture model.</param>
            <returns>Returns a new Mixture fitted to the given observations.</returns>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Mixture`1.Estimate(System.Double[][],System.Double[],`0[])">
            <summary>
              Estimates a new mixture model from a given set of observations.
            </summary>
            <param name="data">A set of observations.</param>
            <param name="components">The initial components of the mixture model.</param>
            <param name="coefficients">The initial mixture coefficients.</param>
            <returns>Returns a new Mixture fitted to the given observations.</returns>
        </member>
        <member name="M:Accord.Statistics.Distributions.Multivariate.Mixture`1.Estimate(System.Double[][],System.Double,System.Double[],`0[])">
            <summary>
              Estimates a new mixture model from a given set of observations.
            </summary>
            <param name="data">A set of observations.</param>
            <param name="components">The initial components of the mixture model.</param>
            <param name="coefficients">The initial mixture coefficients.</param>
            <param name="threshold">The convergence threshold for the Expectation-Maximization estimation.</param>
            <returns>Returns a new Mixture fitted to the given observations.</returns>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.Mixture`1.Components">
            <summary>
              Gets the mixture components.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.Mixture`1.Coefficients">
            <summary>
              Gets the weight coefficients.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.Mixture`1.Mean">
            <summary>
              Gets the mean for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.Mixture`1.Covariance">
            <summary>
              Gets the variance-covariance matrix for this distribution.
            </summary>
        </member>
        <member name="P:Accord.Statistics.Distributions.Multivariate.Mixture`1.Variance">
            <summary>
              Gets the variance vector for this distribution.
            </summary>
        </member>
    </members>
</doc>
